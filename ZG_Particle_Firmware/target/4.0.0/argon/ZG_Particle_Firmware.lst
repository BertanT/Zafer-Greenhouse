
/Users/bertan/Developer/GitRepositories/Zafer-Greenhouse/ZG_Particle_Firmware/target/4.0.0/argon/ZG_Particle_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003530  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7550  000b7550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b7574  000b7574  00007574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b757c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  2003e59c  000b7580  0001e59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e8  2003e608  2003e608  0002e608  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b75ec  000b75ec  000275ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7614  000b7614  00027614  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00128d4b  00000000  00000000  00027618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00013a08  00000000  00000000  00150363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003aaa5  00000000  00000000  00163d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002bf0  00000000  00000000  0019e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a5d0  00000000  00000000  001a1400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ab7d  00000000  00000000  001ab9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00040d5d  00000000  00000000  001e654d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001389e9  00000000  00000000  002272aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007da4  00000000  00000000  0035fc94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 ff81 	bl	b6f38 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 ff89 	bl	b6f54 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e59c 	.word	0x2003e59c
   b404c:	000b7580 	.word	0x000b7580
   b4050:	2003e608 	.word	0x2003e608
   b4054:	2003e608 	.word	0x2003e608
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 f889 	bl	b6178 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7524 	.word	0x000b7524
   b4080:	000b7548 	.word	0x000b7548

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba5e 	b.w	b4544 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa11 	bl	b44b0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 b829 	b.w	b60e8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 b86d 	b.w	b5174 <malloc>

000b409a <_Znaj>:
   b409a:	f001 b86b 	b.w	b5174 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 b871 	b.w	b5184 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40b4:	b513      	push	{r0, r1, r4, lr}
   b40b6:	4b05      	ldr	r3, [pc, #20]	; (b40cc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b40b8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40ba:	f88d 3000 	strb.w	r3, [sp]
   b40be:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40c0:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40c2:	f001 fa2f 	bl	b5524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b40c6:	4620      	mov	r0, r4
   b40c8:	b002      	add	sp, #8
   b40ca:	bd10      	pop	{r4, pc}
   b40cc:	2003e618 	.word	0x2003e618

000b40d0 <_Z12read_soil_rhiii>:
double eCO2;
double TVOC;
double AQI;

// Function to read relative humidity from soil moisture sensor
int read_soil_rh(int soil_pin, int soil_dry, int soil_wet) {
   b40d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int soil_value = analogRead(soil_pin);
   b40d2:	b280      	uxth	r0, r0
int read_soil_rh(int soil_pin, int soil_dry, int soil_wet) {
   b40d4:	e9cd 2102 	strd	r2, r1, [sp, #8]
    int soil_value = analogRead(soil_pin);
   b40d8:	f002 f8e8 	bl	b62ac <analogRead>
    int soil_rh = map(soil_value, soil_dry, soil_wet, 0, 100);
   b40dc:	2364      	movs	r3, #100	; 0x64
   b40de:	9300      	str	r3, [sp, #0]
   b40e0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b40e4:	2300      	movs	r3, #0
   b40e6:	f001 f885 	bl	b51f4 <_Z3mapiiiii>
    return soil_rh;
}
   b40ea:	b005      	add	sp, #20
   b40ec:	f85d fb04 	ldr.w	pc, [sp], #4

000b40f0 <_Z14updateReadingsv>:
  // Register watering control function to the cloud
  Particle.function("setWatering", setWatering);
}

// Unified function to update all sensor data
int updateReadings() {
   b40f0:	b510      	push	{r4, lr}
  // Update soil moisture sensor readings
  soil_1_rh = read_soil_rh(soil_1, SOIL_1_DRY, SOIL_1_WET);
   b40f2:	f640 72ff 	movw	r2, #4095	; 0xfff
   b40f6:	2100      	movs	r1, #0
   b40f8:	2013      	movs	r0, #19
   b40fa:	f7ff ffe9 	bl	b40d0 <_Z12read_soil_rhiii>
   b40fe:	f002 fabf 	bl	b6680 <__aeabi_i2d>
   b4102:	4b33      	ldr	r3, [pc, #204]	; (b41d0 <_Z14updateReadingsv+0xe0>)
  soil_3_rh = read_soil_rh(soil_3, SOIL_3_DRY, SOIL_3_WET);
  soil_4_rh = read_soil_rh(soil_4, SOIL_4_DRY, SOIL_4_WET);
  soil_5_rh = read_soil_rh(soil_5, SOIL_5_DRY, SOIL_5_WET);

  // Update environmental monitoring sensor readings
  temperature = bme280.getTemperature();
   b4104:	4c33      	ldr	r4, [pc, #204]	; (b41d4 <_Z14updateReadingsv+0xe4>)
  soil_1_rh = read_soil_rh(soil_1, SOIL_1_DRY, SOIL_1_WET);
   b4106:	e9c3 0100 	strd	r0, r1, [r3]
  soil_2_rh = read_soil_rh(soil_2, SOIL_2_DRY, SOIL_2_WET);
   b410a:	f640 72ff 	movw	r2, #4095	; 0xfff
   b410e:	2100      	movs	r1, #0
   b4110:	2012      	movs	r0, #18
   b4112:	f7ff ffdd 	bl	b40d0 <_Z12read_soil_rhiii>
   b4116:	f002 fab3 	bl	b6680 <__aeabi_i2d>
   b411a:	4b2f      	ldr	r3, [pc, #188]	; (b41d8 <_Z14updateReadingsv+0xe8>)
  soil_3_rh = read_soil_rh(soil_3, SOIL_3_DRY, SOIL_3_WET);
   b411c:	f640 72ff 	movw	r2, #4095	; 0xfff
  soil_2_rh = read_soil_rh(soil_2, SOIL_2_DRY, SOIL_2_WET);
   b4120:	e9c3 0100 	strd	r0, r1, [r3]
  soil_3_rh = read_soil_rh(soil_3, SOIL_3_DRY, SOIL_3_WET);
   b4124:	2100      	movs	r1, #0
   b4126:	2011      	movs	r0, #17
   b4128:	f7ff ffd2 	bl	b40d0 <_Z12read_soil_rhiii>
   b412c:	f002 faa8 	bl	b6680 <__aeabi_i2d>
   b4130:	4b2a      	ldr	r3, [pc, #168]	; (b41dc <_Z14updateReadingsv+0xec>)
  soil_4_rh = read_soil_rh(soil_4, SOIL_4_DRY, SOIL_4_WET);
   b4132:	f640 72ff 	movw	r2, #4095	; 0xfff
  soil_3_rh = read_soil_rh(soil_3, SOIL_3_DRY, SOIL_3_WET);
   b4136:	e9c3 0100 	strd	r0, r1, [r3]
  soil_4_rh = read_soil_rh(soil_4, SOIL_4_DRY, SOIL_4_WET);
   b413a:	2100      	movs	r1, #0
   b413c:	2010      	movs	r0, #16
   b413e:	f7ff ffc7 	bl	b40d0 <_Z12read_soil_rhiii>
   b4142:	f002 fa9d 	bl	b6680 <__aeabi_i2d>
   b4146:	4b26      	ldr	r3, [pc, #152]	; (b41e0 <_Z14updateReadingsv+0xf0>)
  soil_5_rh = read_soil_rh(soil_5, SOIL_5_DRY, SOIL_5_WET);
   b4148:	f640 72ff 	movw	r2, #4095	; 0xfff
  soil_4_rh = read_soil_rh(soil_4, SOIL_4_DRY, SOIL_4_WET);
   b414c:	e9c3 0100 	strd	r0, r1, [r3]
  soil_5_rh = read_soil_rh(soil_5, SOIL_5_DRY, SOIL_5_WET);
   b4150:	2100      	movs	r1, #0
   b4152:	200f      	movs	r0, #15
   b4154:	f7ff ffbc 	bl	b40d0 <_Z12read_soil_rhiii>
   b4158:	f002 fa92 	bl	b6680 <__aeabi_i2d>
   b415c:	4b21      	ldr	r3, [pc, #132]	; (b41e4 <_Z14updateReadingsv+0xf4>)
   b415e:	e9c3 0100 	strd	r0, r1, [r3]
  temperature = bme280.getTemperature();
   b4162:	4620      	mov	r0, r4
   b4164:	f000 fb18 	bl	b4798 <_ZN14DFRobot_BME28014getTemperatureEv>
   b4168:	ee10 0a10 	vmov	r0, s0
   b416c:	f002 fa9a 	bl	b66a4 <__aeabi_f2d>
   b4170:	4b1d      	ldr	r3, [pc, #116]	; (b41e8 <_Z14updateReadingsv+0xf8>)
   b4172:	e9c3 0100 	strd	r0, r1, [r3]
  air_humidity = bme280.getHumidity();
   b4176:	4620      	mov	r0, r4
   b4178:	f000 fc20 	bl	b49bc <_ZN14DFRobot_BME28011getHumidityEv>
   b417c:	ee10 0a10 	vmov	r0, s0
   b4180:	f002 fa90 	bl	b66a4 <__aeabi_f2d>
   b4184:	4b19      	ldr	r3, [pc, #100]	; (b41ec <_Z14updateReadingsv+0xfc>)
   b4186:	e9c3 0100 	strd	r0, r1, [r3]
  barometric_pressure = bme280.getPressure();
   b418a:	4620      	mov	r0, r4
   b418c:	f000 fb46 	bl	b481c <_ZN14DFRobot_BME28011getPressureEv>
   b4190:	f002 fa66 	bl	b6660 <__aeabi_ui2d>
  eCO2 = ens160.getECO2();
   b4194:	4c16      	ldr	r4, [pc, #88]	; (b41f0 <_Z14updateReadingsv+0x100>)
  barometric_pressure = bme280.getPressure();
   b4196:	4b17      	ldr	r3, [pc, #92]	; (b41f4 <_Z14updateReadingsv+0x104>)
   b4198:	e9c3 0100 	strd	r0, r1, [r3]
  eCO2 = ens160.getECO2();
   b419c:	4620      	mov	r0, r4
   b419e:	f000 fdd5 	bl	b4d4c <_ZN14DFRobot_ENS1607getECO2Ev>
   b41a2:	f002 fa5d 	bl	b6660 <__aeabi_ui2d>
   b41a6:	4b14      	ldr	r3, [pc, #80]	; (b41f8 <_Z14updateReadingsv+0x108>)
   b41a8:	e9c3 0100 	strd	r0, r1, [r3]
  TVOC = ens160.getTVOC();
   b41ac:	4620      	mov	r0, r4
   b41ae:	f000 fdc2 	bl	b4d36 <_ZN14DFRobot_ENS1607getTVOCEv>
   b41b2:	f002 fa55 	bl	b6660 <__aeabi_ui2d>
   b41b6:	4b11      	ldr	r3, [pc, #68]	; (b41fc <_Z14updateReadingsv+0x10c>)
   b41b8:	e9c3 0100 	strd	r0, r1, [r3]
  AQI = ens160.getAQI();
   b41bc:	4620      	mov	r0, r4
   b41be:	f000 fdab 	bl	b4d18 <_ZN14DFRobot_ENS1606getAQIEv>
   b41c2:	f002 fa4d 	bl	b6660 <__aeabi_ui2d>
   b41c6:	4b0e      	ldr	r3, [pc, #56]	; (b4200 <_Z14updateReadingsv+0x110>)
   b41c8:	e9c3 0100 	strd	r0, r1, [r3]
  return 0;
}
   b41cc:	2000      	movs	r0, #0
   b41ce:	bd10      	pop	{r4, pc}
   b41d0:	2003e688 	.word	0x2003e688
   b41d4:	2003e630 	.word	0x2003e630
   b41d8:	2003e690 	.word	0x2003e690
   b41dc:	2003e698 	.word	0x2003e698
   b41e0:	2003e6a0 	.word	0x2003e6a0
   b41e4:	2003e6a8 	.word	0x2003e6a8
   b41e8:	2003e6b0 	.word	0x2003e6b0
   b41ec:	2003e620 	.word	0x2003e620
   b41f0:	2003e678 	.word	0x2003e678
   b41f4:	2003e628 	.word	0x2003e628
   b41f8:	2003e670 	.word	0x2003e670
   b41fc:	2003e610 	.word	0x2003e610
   b4200:	2003e608 	.word	0x2003e608

000b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4204:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4206:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4208:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b420a:	b17c      	cbz	r4, b422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b420c:	6863      	ldr	r3, [r4, #4]
   b420e:	3b01      	subs	r3, #1
   b4210:	6063      	str	r3, [r4, #4]
   b4212:	b95b      	cbnz	r3, b422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4214:	6823      	ldr	r3, [r4, #0]
   b4216:	4620      	mov	r0, r4
   b4218:	689b      	ldr	r3, [r3, #8]
   b421a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b421c:	68a3      	ldr	r3, [r4, #8]
   b421e:	3b01      	subs	r3, #1
   b4220:	60a3      	str	r3, [r4, #8]
   b4222:	b91b      	cbnz	r3, b422c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4224:	6823      	ldr	r3, [r4, #0]
   b4226:	4620      	mov	r0, r4
   b4228:	68db      	ldr	r3, [r3, #12]
   b422a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b422c:	4628      	mov	r0, r5
   b422e:	bd38      	pop	{r3, r4, r5, pc}

000b4230 <_Z11setWatering6String>:
int setWatering(String is_on) {
   b4230:	b537      	push	{r0, r1, r2, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4232:	491b      	ldr	r1, [pc, #108]	; (b42a0 <_Z11setWatering6String+0x70>)
   b4234:	4605      	mov	r5, r0
   b4236:	f001 fdb6 	bl	b5da6 <_ZNK6String6equalsEPKc>
  if (is_on == "true") {
   b423a:	4604      	mov	r4, r0
   b423c:	b198      	cbz	r0, b4266 <_Z11setWatering6String+0x36>
    digitalWrite(water_valve, HIGH);
   b423e:	2101      	movs	r1, #1
   b4240:	2006      	movs	r0, #6
   b4242:	f002 f81a 	bl	b627a <digitalWrite>
    Particle.publish("wateringStateChanged", "true");
   b4246:	4917      	ldr	r1, [pc, #92]	; (b42a4 <_Z11setWatering6String+0x74>)
   b4248:	4a15      	ldr	r2, [pc, #84]	; (b42a0 <_Z11setWatering6String+0x70>)
   b424a:	4668      	mov	r0, sp
   b424c:	f7ff ff32 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4250:	a801      	add	r0, sp, #4
   b4252:	f7ff ffd7 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Serial.println("Watering system turned on!");
   b4256:	f001 fec1 	bl	b5fdc <_Z16_fetch_usbserialv>
   b425a:	4913      	ldr	r1, [pc, #76]	; (b42a8 <_Z11setWatering6String+0x78>)
   b425c:	f001 fcf1 	bl	b5c42 <_ZN5Print7printlnEPKc>
  return 0;
   b4260:	2000      	movs	r0, #0
}
   b4262:	b003      	add	sp, #12
   b4264:	bd30      	pop	{r4, r5, pc}
   b4266:	4911      	ldr	r1, [pc, #68]	; (b42ac <_Z11setWatering6String+0x7c>)
   b4268:	4628      	mov	r0, r5
   b426a:	f001 fd9c 	bl	b5da6 <_ZNK6String6equalsEPKc>
  } else if (is_on == "false") {
   b426e:	b178      	cbz	r0, b4290 <_Z11setWatering6String+0x60>
    digitalWrite(water_valve, LOW);
   b4270:	4621      	mov	r1, r4
   b4272:	2006      	movs	r0, #6
   b4274:	f002 f801 	bl	b627a <digitalWrite>
    Particle.publish("wateringStateChanged", "true");
   b4278:	490a      	ldr	r1, [pc, #40]	; (b42a4 <_Z11setWatering6String+0x74>)
   b427a:	4a09      	ldr	r2, [pc, #36]	; (b42a0 <_Z11setWatering6String+0x70>)
   b427c:	4668      	mov	r0, sp
   b427e:	f7ff ff19 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4282:	a801      	add	r0, sp, #4
   b4284:	f7ff ffbe 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Serial.println("Watering system turned off!");
   b4288:	f001 fea8 	bl	b5fdc <_Z16_fetch_usbserialv>
   b428c:	4908      	ldr	r1, [pc, #32]	; (b42b0 <_Z11setWatering6String+0x80>)
   b428e:	e7e5      	b.n	b425c <_Z11setWatering6String+0x2c>
    Serial.println("Invalid command for function setWatering!");
   b4290:	f001 fea4 	bl	b5fdc <_Z16_fetch_usbserialv>
   b4294:	4907      	ldr	r1, [pc, #28]	; (b42b4 <_Z11setWatering6String+0x84>)
   b4296:	f001 fcd4 	bl	b5c42 <_ZN5Print7printlnEPKc>
    return -1;
   b429a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b429e:	e7e0      	b.n	b4262 <_Z11setWatering6String+0x32>
   b42a0:	000b7100 	.word	0x000b7100
   b42a4:	000b7105 	.word	0x000b7105
   b42a8:	000b711a 	.word	0x000b711a
   b42ac:	000b7135 	.word	0x000b7135
   b42b0:	000b713b 	.word	0x000b713b
   b42b4:	000b7157 	.word	0x000b7157

000b42b8 <_Z11cloudUpdatev>:

// Take new measurement and publish to cloud
int cloudUpdate() {
   b42b8:	b510      	push	{r4, lr}
   b42ba:	b086      	sub	sp, #24
  // Take new measurements
  updateReadings();
  // Publish to cloud
  Particle.publish("soil_1_rh", String::format("%.1f", soil_1_rh));
   b42bc:	4c65      	ldr	r4, [pc, #404]	; (b4454 <_Z11cloudUpdatev+0x19c>)
  updateReadings();
   b42be:	f7ff ff17 	bl	b40f0 <_Z14updateReadingsv>
  Particle.publish("soil_1_rh", String::format("%.1f", soil_1_rh));
   b42c2:	4b65      	ldr	r3, [pc, #404]	; (b4458 <_Z11cloudUpdatev+0x1a0>)
   b42c4:	4621      	mov	r1, r4
   b42c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42ca:	a802      	add	r0, sp, #8
   b42cc:	f001 fd7e 	bl	b5dcc <_ZN6String6formatEPKcz>
   b42d0:	9a02      	ldr	r2, [sp, #8]
   b42d2:	4962      	ldr	r1, [pc, #392]	; (b445c <_Z11cloudUpdatev+0x1a4>)
   b42d4:	4668      	mov	r0, sp
   b42d6:	f7ff feed 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b42da:	a801      	add	r0, sp, #4
   b42dc:	f7ff ff92 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b42e0:	a802      	add	r0, sp, #8
   b42e2:	f001 fce7 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("soil_2_rh", String::format("%.1f", soil_2_rh));
   b42e6:	4b5e      	ldr	r3, [pc, #376]	; (b4460 <_Z11cloudUpdatev+0x1a8>)
   b42e8:	4621      	mov	r1, r4
   b42ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42ee:	a802      	add	r0, sp, #8
   b42f0:	f001 fd6c 	bl	b5dcc <_ZN6String6formatEPKcz>
   b42f4:	9a02      	ldr	r2, [sp, #8]
   b42f6:	495b      	ldr	r1, [pc, #364]	; (b4464 <_Z11cloudUpdatev+0x1ac>)
   b42f8:	4668      	mov	r0, sp
   b42fa:	f7ff fedb 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b42fe:	a801      	add	r0, sp, #4
   b4300:	f7ff ff80 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4304:	a802      	add	r0, sp, #8
   b4306:	f001 fcd5 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("soil_3_rh", String::format("%.1f", soil_3_rh));
   b430a:	4b57      	ldr	r3, [pc, #348]	; (b4468 <_Z11cloudUpdatev+0x1b0>)
   b430c:	4621      	mov	r1, r4
   b430e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4312:	a802      	add	r0, sp, #8
   b4314:	f001 fd5a 	bl	b5dcc <_ZN6String6formatEPKcz>
   b4318:	9a02      	ldr	r2, [sp, #8]
   b431a:	4954      	ldr	r1, [pc, #336]	; (b446c <_Z11cloudUpdatev+0x1b4>)
   b431c:	4668      	mov	r0, sp
   b431e:	f7ff fec9 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4322:	a801      	add	r0, sp, #4
   b4324:	f7ff ff6e 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4328:	a802      	add	r0, sp, #8
   b432a:	f001 fcc3 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("soil_4_rh", String::format("%.1f", soil_4_rh));
   b432e:	4b50      	ldr	r3, [pc, #320]	; (b4470 <_Z11cloudUpdatev+0x1b8>)
   b4330:	4621      	mov	r1, r4
   b4332:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4336:	a802      	add	r0, sp, #8
   b4338:	f001 fd48 	bl	b5dcc <_ZN6String6formatEPKcz>
   b433c:	9a02      	ldr	r2, [sp, #8]
   b433e:	494d      	ldr	r1, [pc, #308]	; (b4474 <_Z11cloudUpdatev+0x1bc>)
   b4340:	4668      	mov	r0, sp
   b4342:	f7ff feb7 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4346:	a801      	add	r0, sp, #4
   b4348:	f7ff ff5c 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b434c:	a802      	add	r0, sp, #8
   b434e:	f001 fcb1 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("soil_5_rh", String::format("%.1f", soil_5_rh));
   b4352:	4b49      	ldr	r3, [pc, #292]	; (b4478 <_Z11cloudUpdatev+0x1c0>)
   b4354:	4621      	mov	r1, r4
   b4356:	e9d3 2300 	ldrd	r2, r3, [r3]
   b435a:	a802      	add	r0, sp, #8
   b435c:	f001 fd36 	bl	b5dcc <_ZN6String6formatEPKcz>
   b4360:	9a02      	ldr	r2, [sp, #8]
   b4362:	4946      	ldr	r1, [pc, #280]	; (b447c <_Z11cloudUpdatev+0x1c4>)
   b4364:	4668      	mov	r0, sp
   b4366:	f7ff fea5 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b436a:	a801      	add	r0, sp, #4
   b436c:	f7ff ff4a 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4370:	a802      	add	r0, sp, #8
   b4372:	f001 fc9f 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("temperature", String::format("%.1f", temperature));
   b4376:	4b42      	ldr	r3, [pc, #264]	; (b4480 <_Z11cloudUpdatev+0x1c8>)
   b4378:	4621      	mov	r1, r4
   b437a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b437e:	a802      	add	r0, sp, #8
   b4380:	f001 fd24 	bl	b5dcc <_ZN6String6formatEPKcz>
   b4384:	9a02      	ldr	r2, [sp, #8]
   b4386:	493f      	ldr	r1, [pc, #252]	; (b4484 <_Z11cloudUpdatev+0x1cc>)
   b4388:	4668      	mov	r0, sp
   b438a:	f7ff fe93 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b438e:	a801      	add	r0, sp, #4
   b4390:	f7ff ff38 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4394:	a802      	add	r0, sp, #8
   b4396:	f001 fc8d 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("humidity", String::format("%.1f", air_humidity));
   b439a:	4b3b      	ldr	r3, [pc, #236]	; (b4488 <_Z11cloudUpdatev+0x1d0>)
   b439c:	4621      	mov	r1, r4
   b439e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43a2:	a802      	add	r0, sp, #8
   b43a4:	f001 fd12 	bl	b5dcc <_ZN6String6formatEPKcz>
   b43a8:	9a02      	ldr	r2, [sp, #8]
   b43aa:	4938      	ldr	r1, [pc, #224]	; (b448c <_Z11cloudUpdatev+0x1d4>)
   b43ac:	4668      	mov	r0, sp
   b43ae:	f7ff fe81 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b43b2:	a801      	add	r0, sp, #4
   b43b4:	f7ff ff26 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b43b8:	a802      	add	r0, sp, #8
   b43ba:	f001 fc7b 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("barometric_pressure", String::format("%.1f", barometric_pressure));
   b43be:	4b34      	ldr	r3, [pc, #208]	; (b4490 <_Z11cloudUpdatev+0x1d8>)
   b43c0:	4621      	mov	r1, r4
   b43c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43c6:	a802      	add	r0, sp, #8
   b43c8:	f001 fd00 	bl	b5dcc <_ZN6String6formatEPKcz>
   b43cc:	9a02      	ldr	r2, [sp, #8]
   b43ce:	4931      	ldr	r1, [pc, #196]	; (b4494 <_Z11cloudUpdatev+0x1dc>)
   b43d0:	4668      	mov	r0, sp
   b43d2:	f7ff fe6f 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b43d6:	a801      	add	r0, sp, #4
   b43d8:	f7ff ff14 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b43dc:	a802      	add	r0, sp, #8
   b43de:	f001 fc69 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("eCO2", String::format("%.1f", eCO2));
   b43e2:	4b2d      	ldr	r3, [pc, #180]	; (b4498 <_Z11cloudUpdatev+0x1e0>)
   b43e4:	4621      	mov	r1, r4
   b43e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43ea:	a802      	add	r0, sp, #8
   b43ec:	f001 fcee 	bl	b5dcc <_ZN6String6formatEPKcz>
   b43f0:	9a02      	ldr	r2, [sp, #8]
   b43f2:	492a      	ldr	r1, [pc, #168]	; (b449c <_Z11cloudUpdatev+0x1e4>)
   b43f4:	4668      	mov	r0, sp
   b43f6:	f7ff fe5d 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b43fa:	a801      	add	r0, sp, #4
   b43fc:	f7ff ff02 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4400:	a802      	add	r0, sp, #8
   b4402:	f001 fc57 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("TVOC", String::format("%.1f", TVOC));
   b4406:	4b26      	ldr	r3, [pc, #152]	; (b44a0 <_Z11cloudUpdatev+0x1e8>)
   b4408:	4621      	mov	r1, r4
   b440a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b440e:	a802      	add	r0, sp, #8
   b4410:	f001 fcdc 	bl	b5dcc <_ZN6String6formatEPKcz>
   b4414:	9a02      	ldr	r2, [sp, #8]
   b4416:	4923      	ldr	r1, [pc, #140]	; (b44a4 <_Z11cloudUpdatev+0x1ec>)
   b4418:	4668      	mov	r0, sp
   b441a:	f7ff fe4b 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b441e:	a801      	add	r0, sp, #4
   b4420:	f7ff fef0 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4424:	a802      	add	r0, sp, #8
   b4426:	f001 fc45 	bl	b5cb4 <_ZN6StringD1Ev>
  Particle.publish("AQI", String::format("%.1f", AQI));
   b442a:	4b1f      	ldr	r3, [pc, #124]	; (b44a8 <_Z11cloudUpdatev+0x1f0>)
   b442c:	4621      	mov	r1, r4
   b442e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4432:	a802      	add	r0, sp, #8
   b4434:	f001 fcca 	bl	b5dcc <_ZN6String6formatEPKcz>
   b4438:	9a02      	ldr	r2, [sp, #8]
   b443a:	491c      	ldr	r1, [pc, #112]	; (b44ac <_Z11cloudUpdatev+0x1f4>)
   b443c:	4668      	mov	r0, sp
   b443e:	f7ff fe39 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4442:	a801      	add	r0, sp, #4
   b4444:	f7ff fede 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4448:	a802      	add	r0, sp, #8
   b444a:	f001 fc33 	bl	b5cb4 <_ZN6StringD1Ev>
  return 0;
}
   b444e:	2000      	movs	r0, #0
   b4450:	b006      	add	sp, #24
   b4452:	bd10      	pop	{r4, pc}
   b4454:	000b7181 	.word	0x000b7181
   b4458:	2003e688 	.word	0x2003e688
   b445c:	000b7186 	.word	0x000b7186
   b4460:	2003e690 	.word	0x2003e690
   b4464:	000b7190 	.word	0x000b7190
   b4468:	2003e698 	.word	0x2003e698
   b446c:	000b719a 	.word	0x000b719a
   b4470:	2003e6a0 	.word	0x2003e6a0
   b4474:	000b71a4 	.word	0x000b71a4
   b4478:	2003e6a8 	.word	0x2003e6a8
   b447c:	000b71ae 	.word	0x000b71ae
   b4480:	2003e6b0 	.word	0x2003e6b0
   b4484:	000b71b8 	.word	0x000b71b8
   b4488:	2003e620 	.word	0x2003e620
   b448c:	000b71c4 	.word	0x000b71c4
   b4490:	2003e628 	.word	0x2003e628
   b4494:	000b71cd 	.word	0x000b71cd
   b4498:	2003e670 	.word	0x2003e670
   b449c:	000b71e1 	.word	0x000b71e1
   b44a0:	2003e610 	.word	0x2003e610
   b44a4:	000b71e6 	.word	0x000b71e6
   b44a8:	2003e608 	.word	0x2003e608
   b44ac:	000b71eb 	.word	0x000b71eb

000b44b0 <loop>:

void loop() {
   b44b0:	b570      	push	{r4, r5, r6, lr}
  // Periodically calibrate the ENS160 sensor according to the current conditions
  ens160.setTempAndHum(bme280.getTemperature(), bme280.getHumidity());
   b44b2:	4813      	ldr	r0, [pc, #76]	; (b4500 <loop+0x50>)
    for (uint32_t ms = millis(); millis() - ms < duration; Particle.process());
   b44b4:	4e13      	ldr	r6, [pc, #76]	; (b4504 <loop+0x54>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b44b6:	4d14      	ldr	r5, [pc, #80]	; (b4508 <loop+0x58>)
void loop() {
   b44b8:	ed2d 8b02 	vpush	{d8}
  ens160.setTempAndHum(bme280.getTemperature(), bme280.getHumidity());
   b44bc:	f000 f96c 	bl	b4798 <_ZN14DFRobot_BME28014getTemperatureEv>
   b44c0:	480f      	ldr	r0, [pc, #60]	; (b4500 <loop+0x50>)
   b44c2:	eeb0 8a40 	vmov.f32	s16, s0
   b44c6:	f000 fa79 	bl	b49bc <_ZN14DFRobot_BME28011getHumidityEv>
   b44ca:	4810      	ldr	r0, [pc, #64]	; (b450c <loop+0x5c>)
   b44cc:	eef0 0a40 	vmov.f32	s1, s0
   b44d0:	eeb0 0a48 	vmov.f32	s0, s16
   b44d4:	f000 fbe0 	bl	b4c98 <_ZN14DFRobot_ENS16013setTempAndHumEff>
  cloudUpdate();
   b44d8:	f7ff feee 	bl	b42b8 <_Z11cloudUpdatev>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b44dc:	f000 fc5c 	bl	b4d98 <HAL_Timer_Get_Milli_Seconds>
   b44e0:	4604      	mov	r4, r0
   b44e2:	f000 fc59 	bl	b4d98 <HAL_Timer_Get_Milli_Seconds>
    for (uint32_t ms = millis(); millis() - ms < duration; Particle.process());
   b44e6:	1b00      	subs	r0, r0, r4
   b44e8:	42b0      	cmp	r0, r6
   b44ea:	d805      	bhi.n	b44f8 <loop+0x48>
		return HAL_Timer_Get_Milli_Seconds();
   b44ec:	f000 fc54 	bl	b4d98 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b44f0:	6028      	str	r0, [r5, #0]
    		spark_process();
   b44f2:	f000 fdbf 	bl	b5074 <spark_process>
    }
   b44f6:	e7f4      	b.n	b44e2 <loop+0x32>
  softDelay(MEASUREMENT_INTERVAL*1000);
   b44f8:	ecbd 8b02 	vpop	{d8}
   b44fc:	bd70      	pop	{r4, r5, r6, pc}
   b44fe:	bf00      	nop
   b4500:	2003e630 	.word	0x2003e630
   b4504:	000493df 	.word	0x000493df
   b4508:	2003e728 	.word	0x2003e728
   b450c:	2003e678 	.word	0x2003e678

000b4510 <_GLOBAL__sub_I_bme280>:
   b4510:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4512:	4b09      	ldr	r3, [pc, #36]	; (b4538 <_GLOBAL__sub_I_bme280+0x28>)
   b4514:	2200      	movs	r2, #0
   b4516:	701a      	strb	r2, [r3, #0]
DFRobot_BME280_IIC bme280(&Wire, 0x76);
   b4518:	f001 fef6 	bl	b6308 <_Z19__fetch_global_Wirev>
   b451c:	2276      	movs	r2, #118	; 0x76
   b451e:	4601      	mov	r1, r0
   b4520:	4806      	ldr	r0, [pc, #24]	; (b453c <_GLOBAL__sub_I_bme280+0x2c>)
   b4522:	f000 fb1d 	bl	b4b60 <_ZN18DFRobot_BME280_IICC1EP7TwoWireh>
DFRobot_ENS160_I2C ens160(&Wire, 0x53);
   b4526:	f001 feef 	bl	b6308 <_Z19__fetch_global_Wirev>
   b452a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
DFRobot_ENS160_I2C ens160(&Wire, 0x53);
   b452e:	4601      	mov	r1, r0
   b4530:	2253      	movs	r2, #83	; 0x53
   b4532:	4803      	ldr	r0, [pc, #12]	; (b4540 <_GLOBAL__sub_I_bme280+0x30>)
   b4534:	f000 bc16 	b.w	b4d64 <_ZN18DFRobot_ENS160_I2CC1EP7TwoWireh>
   b4538:	2003e618 	.word	0x2003e618
   b453c:	2003e630 	.word	0x2003e630
   b4540:	2003e678 	.word	0x2003e678

000b4544 <setup>:
void setup() {
   b4544:	b508      	push	{r3, lr}
  Serial.begin(115200);
   b4546:	f001 fd49 	bl	b5fdc <_Z16_fetch_usbserialv>
   b454a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b454e:	f001 fd39 	bl	b5fc4 <_ZN9USBSerial5beginEl>
  Serial.println("Welcome to the Zafer Smart Greenhouse Project! Courtesy of IB Class of 23 :)");
   b4552:	f001 fd43 	bl	b5fdc <_Z16_fetch_usbserialv>
   b4556:	4928      	ldr	r1, [pc, #160]	; (b45f8 <setup+0xb4>)
   b4558:	f001 fb73 	bl	b5c42 <_ZN5Print7printlnEPKc>
  pinMode(soil_1, INPUT);
   b455c:	2100      	movs	r1, #0
   b455e:	2013      	movs	r0, #19
   b4560:	f001 fe7a 	bl	b6258 <pinMode>
  pinMode(soil_2, INPUT);
   b4564:	2100      	movs	r1, #0
   b4566:	2012      	movs	r0, #18
   b4568:	f001 fe76 	bl	b6258 <pinMode>
  pinMode(soil_3, INPUT);
   b456c:	2100      	movs	r1, #0
   b456e:	2011      	movs	r0, #17
   b4570:	f001 fe72 	bl	b6258 <pinMode>
  pinMode(soil_4, INPUT);
   b4574:	2100      	movs	r1, #0
   b4576:	2010      	movs	r0, #16
   b4578:	f001 fe6e 	bl	b6258 <pinMode>
  pinMode(soil_5, INPUT);
   b457c:	2100      	movs	r1, #0
   b457e:	200f      	movs	r0, #15
   b4580:	f001 fe6a 	bl	b6258 <pinMode>
  pinMode(water_valve, OUTPUT);
   b4584:	2006      	movs	r0, #6
   b4586:	2101      	movs	r1, #1
   b4588:	f001 fe66 	bl	b6258 <pinMode>
  if (!bme280.begin()) {
   b458c:	481b      	ldr	r0, [pc, #108]	; (b45fc <setup+0xb8>)
   b458e:	f000 fab7 	bl	b4b00 <_ZN14DFRobot_BME2805beginEv>
   b4592:	bb20      	cbnz	r0, b45de <setup+0x9a>
    Serial.println("BME280 initialization failed! Will restart in 30 seconds");
   b4594:	f001 fd22 	bl	b5fdc <_Z16_fetch_usbserialv>
   b4598:	4919      	ldr	r1, [pc, #100]	; (b4600 <setup+0xbc>)
   b459a:	f001 fb52 	bl	b5c42 <_ZN5Print7printlnEPKc>
    delay(30000);
   b459e:	f247 5030 	movw	r0, #30000	; 0x7530
   b45a2:	f000 fe33 	bl	b520c <delay>
    System.reset();
   b45a6:	f001 fc49 	bl	b5e3c <_ZN11SystemClass5resetEv>
  if (!ens160.begin()) {
   b45aa:	4816      	ldr	r0, [pc, #88]	; (b4604 <setup+0xc0>)
   b45ac:	f000 fb67 	bl	b4c7e <_ZN18DFRobot_ENS160_I2C5beginEv>
   b45b0:	b9d8      	cbnz	r0, b45ea <setup+0xa6>
    Serial.println("ENS160 initialization failed! Will restart in 30 seconds");
   b45b2:	f001 fd13 	bl	b5fdc <_Z16_fetch_usbserialv>
   b45b6:	4914      	ldr	r1, [pc, #80]	; (b4608 <setup+0xc4>)
   b45b8:	f001 fb43 	bl	b5c42 <_ZN5Print7printlnEPKc>
    delay(30000);
   b45bc:	f247 5030 	movw	r0, #30000	; 0x7530
   b45c0:	f000 fe24 	bl	b520c <delay>
    System.reset();
   b45c4:	f001 fc3a 	bl	b5e3c <_ZN11SystemClass5resetEv>
  ens160.setPWRMode(ENS160_STANDARD_MODE);
   b45c8:	480e      	ldr	r0, [pc, #56]	; (b4604 <setup+0xc0>)
   b45ca:	2102      	movs	r1, #2
   b45cc:	f000 fb18 	bl	b4c00 <_ZN14DFRobot_ENS16010setPWRModeEh>
}
   b45d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b45d4:	4a0d      	ldr	r2, [pc, #52]	; (b460c <setup+0xc8>)
   b45d6:	490e      	ldr	r1, [pc, #56]	; (b4610 <setup+0xcc>)
   b45d8:	480e      	ldr	r0, [pc, #56]	; (b4614 <setup+0xd0>)
   b45da:	f000 beac 	b.w	b5336 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Serial.println("BME280 initialization successful!");
   b45de:	f001 fcfd 	bl	b5fdc <_Z16_fetch_usbserialv>
   b45e2:	490d      	ldr	r1, [pc, #52]	; (b4618 <setup+0xd4>)
   b45e4:	f001 fb2d 	bl	b5c42 <_ZN5Print7printlnEPKc>
   b45e8:	e7df      	b.n	b45aa <setup+0x66>
    Serial.println("ENS160 initialization successful!");
   b45ea:	f001 fcf7 	bl	b5fdc <_Z16_fetch_usbserialv>
   b45ee:	490b      	ldr	r1, [pc, #44]	; (b461c <setup+0xd8>)
   b45f0:	f001 fb27 	bl	b5c42 <_ZN5Print7printlnEPKc>
   b45f4:	e7e8      	b.n	b45c8 <setup+0x84>
   b45f6:	bf00      	nop
   b45f8:	000b71ef 	.word	0x000b71ef
   b45fc:	2003e630 	.word	0x2003e630
   b4600:	000b723c 	.word	0x000b723c
   b4604:	2003e678 	.word	0x2003e678
   b4608:	000b7297 	.word	0x000b7297
   b460c:	000b72f2 	.word	0x000b72f2
   b4610:	000b4231 	.word	0x000b4231
   b4614:	000b530b 	.word	0x000b530b
   b4618:	000b7275 	.word	0x000b7275
   b461c:	000b72d0 	.word	0x000b72d0

000b4620 <_ZN18DFRobot_BME280_IIC8writeRegEhPht>:
    pBuf[i] = _pWire->read();
  lastOperateStatus = eStatusOK;
}

void DFRobot_BME280_IIC::writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
   b4620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4622:	4604      	mov	r4, r0
   b4624:	461e      	mov	r6, r3
  lastOperateStatus = eStatusErrDeviceNotDetected;
   b4626:	2302      	movs	r3, #2
   b4628:	7103      	strb	r3, [r0, #4]
  _pWire->begin();
   b462a:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
   b462c:	4615      	mov	r5, r2
   b462e:	460f      	mov	r7, r1
  _pWire->begin();
   b4630:	f001 f960 	bl	b58f4 <_ZN7TwoWire5beginEv>
  _pWire->beginTransmission(_addr);
   b4634:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   b4638:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b463a:	f001 f98d 	bl	b5958 <_ZN7TwoWire17beginTransmissionEh>
  _pWire->write(reg);
   b463e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b4640:	6803      	ldr	r3, [r0, #0]
   b4642:	4639      	mov	r1, r7
   b4644:	689b      	ldr	r3, [r3, #8]
   b4646:	4798      	blx	r3
  for(uint16_t i = 0; i < len; i ++)
   b4648:	442e      	add	r6, r5
   b464a:	42b5      	cmp	r5, r6
    _pWire->write(pBuf[i]);
   b464c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  for(uint16_t i = 0; i < len; i ++)
   b464e:	d005      	beq.n	b465c <_ZN18DFRobot_BME280_IIC8writeRegEhPht+0x3c>
    _pWire->write(pBuf[i]);
   b4650:	6803      	ldr	r3, [r0, #0]
   b4652:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4656:	689b      	ldr	r3, [r3, #8]
   b4658:	4798      	blx	r3
  for(uint16_t i = 0; i < len; i ++)
   b465a:	e7f6      	b.n	b464a <_ZN18DFRobot_BME280_IIC8writeRegEhPht+0x2a>
  if(_pWire->endTransmission() != 0)
   b465c:	f001 f984 	bl	b5968 <_ZN7TwoWire15endTransmissionEv>
   b4660:	b900      	cbnz	r0, b4664 <_ZN18DFRobot_BME280_IIC8writeRegEhPht+0x44>
    return;
  lastOperateStatus = eStatusOK;
   b4662:	7120      	strb	r0, [r4, #4]
}
   b4664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4666 <_ZN18DFRobot_BME280_IIC7readRegEhPht>:
{
   b4666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4668:	4604      	mov	r4, r0
   b466a:	461e      	mov	r6, r3
  lastOperateStatus = eStatusErrDeviceNotDetected;
   b466c:	2302      	movs	r3, #2
   b466e:	7103      	strb	r3, [r0, #4]
  _pWire->begin();
   b4670:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
   b4672:	460f      	mov	r7, r1
   b4674:	4615      	mov	r5, r2
  _pWire->begin();
   b4676:	f001 f93d 	bl	b58f4 <_ZN7TwoWire5beginEv>
  _pWire->beginTransmission(_addr);
   b467a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   b467e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b4680:	f001 f96a 	bl	b5958 <_ZN7TwoWire17beginTransmissionEh>
  _pWire->write(reg);
   b4684:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b4686:	6803      	ldr	r3, [r0, #0]
   b4688:	4639      	mov	r1, r7
   b468a:	689b      	ldr	r3, [r3, #8]
   b468c:	4798      	blx	r3
  if(_pWire->endTransmission() != 0)
   b468e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b4690:	f001 f96a 	bl	b5968 <_ZN7TwoWire15endTransmissionEv>
   b4694:	b988      	cbnz	r0, b46ba <_ZN18DFRobot_BME280_IIC7readRegEhPht+0x54>
  _pWire->requestFrom(_addr, (uint8_t)len);
   b4696:	b2f2      	uxtb	r2, r6
   b4698:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   b469c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b469e:	f001 f958 	bl	b5952 <_ZN7TwoWire11requestFromEhj>
  for(uint16_t i = 0; i < len; i ++)
   b46a2:	442e      	add	r6, r5
   b46a4:	42b5      	cmp	r5, r6
   b46a6:	d006      	beq.n	b46b6 <_ZN18DFRobot_BME280_IIC7readRegEhPht+0x50>
    pBuf[i] = _pWire->read();
   b46a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b46aa:	6803      	ldr	r3, [r0, #0]
   b46ac:	695b      	ldr	r3, [r3, #20]
   b46ae:	4798      	blx	r3
   b46b0:	f805 0b01 	strb.w	r0, [r5], #1
  for(uint16_t i = 0; i < len; i ++)
   b46b4:	e7f6      	b.n	b46a4 <_ZN18DFRobot_BME280_IIC7readRegEhPht+0x3e>
  lastOperateStatus = eStatusOK;
   b46b6:	2300      	movs	r3, #0
   b46b8:	7123      	strb	r3, [r4, #4]
}
   b46ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b46bc <_ZN14DFRobot_BME2805resetEv>:
{
   b46bc:	b513      	push	{r0, r1, r4, lr}
  uint8_t   temp = 0xb6;
   b46be:	23b6      	movs	r3, #182	; 0xb6
   b46c0:	f88d 3007 	strb.w	r3, [sp, #7]
  writeReg(regOffset(&_sRegs.reset), (uint8_t*) &temp, sizeof(temp));
   b46c4:	6803      	ldr	r3, [r0, #0]
   b46c6:	f10d 0207 	add.w	r2, sp, #7
   b46ca:	681c      	ldr	r4, [r3, #0]
   b46cc:	21e0      	movs	r1, #224	; 0xe0
   b46ce:	2301      	movs	r3, #1
   b46d0:	47a0      	blx	r4
  delay(100);
   b46d2:	2064      	movs	r0, #100	; 0x64
   b46d4:	f000 fd9a 	bl	b520c <delay>
}
   b46d8:	b002      	add	sp, #8
   b46da:	bd10      	pop	{r4, pc}

000b46dc <_ZN14DFRobot_BME28012getCalibrateEv>:
{
   b46dc:	b538      	push	{r3, r4, r5, lr}
  readReg(regOffset(&_sRegs.calib), (uint8_t*) &_sCalib, sizeof(_sCalib));
   b46de:	4602      	mov	r2, r0
{
   b46e0:	4604      	mov	r4, r0
  readReg(regOffset(&_sRegs.calib), (uint8_t*) &_sCalib, sizeof(_sCalib));
   b46e2:	f852 3b0c 	ldr.w	r3, [r2], #12
   b46e6:	2188      	movs	r1, #136	; 0x88
   b46e8:	685d      	ldr	r5, [r3, #4]
   b46ea:	231a      	movs	r3, #26
   b46ec:	47a8      	blx	r5
  readReg(regOffset(&_sRegs.calib) + sizeof(_sCalib) - 1, (uint8_t*) &_sCalibHumi.h1, sizeof(_sCalibHumi.h1));
   b46ee:	4622      	mov	r2, r4
   b46f0:	21a1      	movs	r1, #161	; 0xa1
   b46f2:	f852 3b26 	ldr.w	r3, [r2], #38
   b46f6:	4620      	mov	r0, r4
   b46f8:	685d      	ldr	r5, [r3, #4]
   b46fa:	2301      	movs	r3, #1
   b46fc:	47a8      	blx	r5
  readReg(0xe1, (uint8_t*) &_sCalibHumi.h2, sizeof(_sCalibHumi.h2));    // fxxk discontinuous address
   b46fe:	4622      	mov	r2, r4
   b4700:	21e1      	movs	r1, #225	; 0xe1
   b4702:	f852 3b28 	ldr.w	r3, [r2], #40
   b4706:	4620      	mov	r0, r4
   b4708:	685d      	ldr	r5, [r3, #4]
   b470a:	2302      	movs	r3, #2
   b470c:	47a8      	blx	r5
  readReg(0xe3, (uint8_t*) &_sCalibHumi.h3, sizeof(_sCalibHumi.h3));
   b470e:	4622      	mov	r2, r4
   b4710:	21e3      	movs	r1, #227	; 0xe3
   b4712:	f852 3b2a 	ldr.w	r3, [r2], #42
   b4716:	4620      	mov	r0, r4
   b4718:	685d      	ldr	r5, [r3, #4]
   b471a:	2301      	movs	r3, #1
   b471c:	47a8      	blx	r5
  readReg(0xe4, (uint8_t*) &_sCalibHumi.h4, sizeof(_sCalibHumi.h4));
   b471e:	4622      	mov	r2, r4
   b4720:	21e4      	movs	r1, #228	; 0xe4
   b4722:	f852 3b2c 	ldr.w	r3, [r2], #44
   b4726:	4620      	mov	r0, r4
   b4728:	685d      	ldr	r5, [r3, #4]
   b472a:	2302      	movs	r3, #2
   b472c:	47a8      	blx	r5
  readReg(0xe5, (uint8_t*) &_sCalibHumi.h5, sizeof(_sCalibHumi.h5));
   b472e:	4622      	mov	r2, r4
   b4730:	21e5      	movs	r1, #229	; 0xe5
   b4732:	f852 3b2e 	ldr.w	r3, [r2], #46
   b4736:	4620      	mov	r0, r4
   b4738:	685d      	ldr	r5, [r3, #4]
   b473a:	2302      	movs	r3, #2
   b473c:	47a8      	blx	r5
  readReg(0xe7, (uint8_t*) &_sCalibHumi.h6, sizeof(_sCalibHumi.h6));
   b473e:	4622      	mov	r2, r4
   b4740:	21e7      	movs	r1, #231	; 0xe7
   b4742:	f852 3b30 	ldr.w	r3, [r2], #48
   b4746:	4620      	mov	r0, r4
   b4748:	685d      	ldr	r5, [r3, #4]
   b474a:	2301      	movs	r3, #1
   b474c:	47a8      	blx	r5
  _sCalibHumi.h4 = ((_sCalibHumi.h4 >> 8) & 0x0f) | ((_sCalibHumi.h4 & 0x00ff) << 4);
   b474e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   b4750:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   b4754:	0112      	lsls	r2, r2, #4
   b4756:	f003 030f 	and.w	r3, r3, #15
   b475a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   b475e:	4313      	orrs	r3, r2
   b4760:	85a3      	strh	r3, [r4, #44]	; 0x2c
  _sCalibHumi.h5 = ((_sCalibHumi.h5 & 0xff00) >> 4) | ((_sCalibHumi.h5 & 0x00f0) >> 4);   // fxxk fxxk fxxk very strange arrangement
   b4762:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   b4766:	f3c3 130b 	ubfx	r3, r3, #4, #12
   b476a:	85e3      	strh	r3, [r4, #46]	; 0x2e
}
   b476c:	bd38      	pop	{r3, r4, r5, pc}

000b476e <_ZN14DFRobot_BME28017getTemperatureRawEv>:
{
   b476e:	b513      	push	{r0, r1, r4, lr}
  readReg(regOffset(&_sRegs.temp), (uint8_t*) &sReg, sizeof(sReg));
   b4770:	6803      	ldr	r3, [r0, #0]
   b4772:	aa01      	add	r2, sp, #4
   b4774:	685c      	ldr	r4, [r3, #4]
   b4776:	21fa      	movs	r1, #250	; 0xfa
   b4778:	2303      	movs	r3, #3
   b477a:	47a0      	blx	r4
  return (((uint32_t) sReg.msb << 12) | ((uint32_t) sReg.lsb << 4) | ((uint32_t) sReg.xlsb));
   b477c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4780:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b4784:	011b      	lsls	r3, r3, #4
   b4786:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
   b478a:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b478e:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
   b4792:	b002      	add	sp, #8
   b4794:	bd10      	pop	{r4, pc}
	...

000b4798 <_ZN14DFRobot_BME28014getTemperatureEv>:
{
   b4798:	b510      	push	{r4, lr}
   b479a:	4604      	mov	r4, r0
  int32_t   raw = getTemperatureRaw();
   b479c:	f7ff ffe7 	bl	b476e <_ZN14DFRobot_BME28017getTemperatureRawEv>
  if(lastOperateStatus == eStatusOK) {
   b47a0:	7923      	ldrb	r3, [r4, #4]
   b47a2:	b9fb      	cbnz	r3, b47e4 <_ZN14DFRobot_BME28014getTemperatureEv+0x4c>
    v1 = ((((raw >> 3) - ((int32_t) _sCalib.t1 << 1))) * ((int32_t) _sCalib.t2)) >> 11;
   b47a4:	89a1      	ldrh	r1, [r4, #12]
    return (rslt / 100);
   b47a6:	ed9f 7a11 	vldr	s14, [pc, #68]	; b47ec <_ZN14DFRobot_BME28014getTemperatureEv+0x54>
    v1 = ((((raw >> 3) - ((int32_t) _sCalib.t1 << 1))) * ((int32_t) _sCalib.t2)) >> 11;
   b47aa:	004b      	lsls	r3, r1, #1
    v2 = (((((raw >> 4) - ((int32_t) _sCalib.t1)) * ((raw >> 4) - ((int32_t) _sCalib.t1))) >> 12) * ((int32_t) _sCalib.t3)) >> 14;
   b47ac:	ebc1 1220 	rsb	r2, r1, r0, asr #4
    v1 = ((((raw >> 3) - ((int32_t) _sCalib.t1 << 1))) * ((int32_t) _sCalib.t2)) >> 11;
   b47b0:	ebc3 01e0 	rsb	r1, r3, r0, asr #3
   b47b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   b47b8:	4359      	muls	r1, r3
    v2 = (((((raw >> 4) - ((int32_t) _sCalib.t1)) * ((raw >> 4) - ((int32_t) _sCalib.t1))) >> 12) * ((int32_t) _sCalib.t3)) >> 14;
   b47ba:	fb02 f302 	mul.w	r3, r2, r2
   b47be:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
   b47c2:	131b      	asrs	r3, r3, #12
   b47c4:	4353      	muls	r3, r2
   b47c6:	139b      	asrs	r3, r3, #14
    _t_fine = v1 + v2;
   b47c8:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b47cc:	60a3      	str	r3, [r4, #8]
    rslt = (_t_fine * 5 + 128) >> 8;
   b47ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b47d2:	3380      	adds	r3, #128	; 0x80
   b47d4:	121b      	asrs	r3, r3, #8
   b47d6:	ee07 3a90 	vmov	s15, r3
   b47da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return (rslt / 100);
   b47de:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b47e2:	bd10      	pop	{r4, pc}
  return 0;
   b47e4:	ed9f 0a02 	vldr	s0, [pc, #8]	; b47f0 <_ZN14DFRobot_BME28014getTemperatureEv+0x58>
   b47e8:	e7fb      	b.n	b47e2 <_ZN14DFRobot_BME28014getTemperatureEv+0x4a>
   b47ea:	bf00      	nop
   b47ec:	42c80000 	.word	0x42c80000
   b47f0:	00000000 	.word	0x00000000

000b47f4 <_ZN14DFRobot_BME28014getPressureRawEv>:
{
   b47f4:	b513      	push	{r0, r1, r4, lr}
  readReg(regOffset(&_sRegs.press), (uint8_t*) &sReg, sizeof(sReg));
   b47f6:	6803      	ldr	r3, [r0, #0]
   b47f8:	aa01      	add	r2, sp, #4
   b47fa:	685c      	ldr	r4, [r3, #4]
   b47fc:	21f7      	movs	r1, #247	; 0xf7
   b47fe:	2303      	movs	r3, #3
   b4800:	47a0      	blx	r4
  return (((uint32_t) sReg.msb << 12) | ((uint32_t) sReg.lsb << 4) | ((uint32_t) sReg.xlsb));
   b4802:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4806:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b480a:	011b      	lsls	r3, r3, #4
   b480c:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
   b4810:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b4814:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
   b4818:	b002      	add	sp, #8
   b481a:	bd10      	pop	{r4, pc}

000b481c <_ZN14DFRobot_BME28011getPressureEv>:
{
   b481c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4820:	4605      	mov	r5, r0
  getTemperature();   // update _t_fine
   b4822:	f7ff ffb9 	bl	b4798 <_ZN14DFRobot_BME28014getTemperatureEv>
  int32_t   raw = getPressureRaw();
   b4826:	4628      	mov	r0, r5
   b4828:	f7ff ffe4 	bl	b47f4 <_ZN14DFRobot_BME28014getPressureRawEv>
  if(lastOperateStatus == eStatusOK) {
   b482c:	7929      	ldrb	r1, [r5, #4]
   b482e:	2900      	cmp	r1, #0
   b4830:	f040 80b2 	bne.w	b4998 <_ZN14DFRobot_BME28011getPressureEv+0x17c>
    v1 = ((int64_t) _t_fine) - 128000;
   b4834:	68ae      	ldr	r6, [r5, #8]
    v1 = ((v1 * v1 * (int64_t) _sCalib.p3) >> 8) + ((v1 * (int64_t) _sCalib.p2) << 12);
   b4836:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
    v1 = ((int64_t) _t_fine) - 128000;
   b483a:	ea4f 7ce6 	mov.w	ip, r6, asr #31
   b483e:	f5b6 36fa 	subs.w	r6, r6, #128000	; 0x1f400
   b4842:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
    v2 = v1 * v1 * (int64_t) _sCalib.p6;
   b4846:	fba6 4806 	umull	r4, r8, r6, r6
   b484a:	fb06 f70c 	mul.w	r7, r6, ip
   b484e:	eb08 0847 	add.w	r8, r8, r7, lsl #1
    v1 = ((v1 * v1 * (int64_t) _sCalib.p3) >> 8) + ((v1 * (int64_t) _sCalib.p2) << 12);
   b4852:	fb03 f20c 	mul.w	r2, r3, ip
   b4856:	17df      	asrs	r7, r3, #31
   b4858:	fb06 2207 	mla	r2, r6, r7, r2
   b485c:	fba3 3706 	umull	r3, r7, r3, r6
   b4860:	443a      	add	r2, r7
   b4862:	0312      	lsls	r2, r2, #12
   b4864:	031f      	lsls	r7, r3, #12
   b4866:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
   b486a:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
   b486e:	ea4f 79e3 	mov.w	r9, r3, asr #31
   b4872:	fb03 fe08 	mul.w	lr, r3, r8
   b4876:	fb04 ee09 	mla	lr, r4, r9, lr
   b487a:	fba3 3904 	umull	r3, r9, r3, r4
   b487e:	44ce      	add	lr, r9
   b4880:	0a1b      	lsrs	r3, r3, #8
   b4882:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
   b4886:	19db      	adds	r3, r3, r7
   b4888:	eb42 222e 	adc.w	r2, r2, lr, asr #8
    v1 = (((((int64_t) 1) << 47) + v1)) * ((int64_t) _sCalib.p1) >> 33;
   b488c:	f8b5 e012 	ldrh.w	lr, [r5, #18]
   b4890:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4894:	fba3 370e 	umull	r3, r7, r3, lr
   b4898:	fb0e 7702 	mla	r7, lr, r2, r7
   b489c:	17fb      	asrs	r3, r7, #31
   b489e:	107a      	asrs	r2, r7, #1
    if(v1 == 0)
   b48a0:	ea53 0767 	orrs.w	r7, r3, r7, asr #1
   b48a4:	d07a      	beq.n	b499c <_ZN14DFRobot_BME28011getPressureEv+0x180>
    v2 = v1 * v1 * (int64_t) _sCalib.p6;
   b48a6:	f9b5 e01c 	ldrsh.w	lr, [r5, #28]
   b48aa:	fb0e f708 	mul.w	r7, lr, r8
   b48ae:	ea4f 79ee 	mov.w	r9, lr, asr #31
   b48b2:	fb04 7709 	mla	r7, r4, r9, r7
   b48b6:	fbae e404 	umull	lr, r4, lr, r4
   b48ba:	4427      	add	r7, r4
    v2 = v2 + ((v1 * (int64_t) _sCalib.p5) << 17);
   b48bc:	f9b5 401a 	ldrsh.w	r4, [r5, #26]
   b48c0:	ea4f 78e4 	mov.w	r8, r4, asr #31
   b48c4:	fb04 fc0c 	mul.w	ip, r4, ip
   b48c8:	fb06 cc08 	mla	ip, r6, r8, ip
   b48cc:	fba4 4606 	umull	r4, r6, r4, r6
   b48d0:	4466      	add	r6, ip
   b48d2:	0476      	lsls	r6, r6, #17
   b48d4:	ea46 36d4 	orr.w	r6, r6, r4, lsr #15
   b48d8:	0464      	lsls	r4, r4, #17
   b48da:	eb14 040e 	adds.w	r4, r4, lr
    rslt = 1048576 - raw;
   b48de:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
    v2 = v2 + ((v1 * (int64_t) _sCalib.p5) << 17);
   b48e2:	eb47 0606 	adc.w	r6, r7, r6
    rslt = (((rslt << 31) - v2) * 3125) / v1;
   b48e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    v2 = v2 + (((int64_t) _sCalib.p4) << 35);
   b48ea:	f9b5 7018 	ldrsh.w	r7, [r5, #24]
   b48ee:	1909      	adds	r1, r1, r4
    rslt = (((rslt << 31) - v2) * 3125) / v1;
   b48f0:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
   b48f4:	07c0      	lsls	r0, r0, #31
   b48f6:	1a40      	subs	r0, r0, r1
    v2 = v2 + (((int64_t) _sCalib.p4) << 35);
   b48f8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    rslt = (((rslt << 31) - v2) * 3125) / v1;
   b48fc:	eb6c 0c06 	sbc.w	ip, ip, r6
   b4900:	f640 4635 	movw	r6, #3125	; 0xc35
   b4904:	fba0 0106 	umull	r0, r1, r0, r6
   b4908:	fb06 110c 	mla	r1, r6, ip, r1
   b490c:	f002 f954 	bl	b6bb8 <__aeabi_ldivmod>
    v1 = (((int64_t) _sCalib.p9) * (rslt >> 13) * (rslt >> 13)) >> 25;
   b4910:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
    v2 = (((int64_t) _sCalib.p8) * rslt) >> 19;
   b4914:	f9b5 4020 	ldrsh.w	r4, [r5, #32]
    v1 = (((int64_t) _sCalib.p9) * (rslt >> 13) * (rslt >> 13)) >> 25;
   b4918:	134f      	asrs	r7, r1, #13
   b491a:	0b43      	lsrs	r3, r0, #13
   b491c:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
    rslt = (((rslt << 31) - v2) * 3125) / v1;
   b4920:	4686      	mov	lr, r0
    v1 = (((int64_t) _sCalib.p9) * (rslt >> 13) * (rslt >> 13)) >> 25;
   b4922:	fb02 f607 	mul.w	r6, r2, r7
   b4926:	17d0      	asrs	r0, r2, #31
   b4928:	fb03 6600 	mla	r6, r3, r0, r6
   b492c:	fba2 2003 	umull	r2, r0, r2, r3
   b4930:	4430      	add	r0, r6
   b4932:	fb02 f607 	mul.w	r6, r2, r7
   b4936:	fb03 6600 	mla	r6, r3, r0, r6
   b493a:	fba2 2303 	umull	r2, r3, r2, r3
   b493e:	441e      	add	r6, r3
   b4940:	0e53      	lsrs	r3, r2, #25
   b4942:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
    rslt = ((rslt + v1 + v2) >> 8) + (((int64_t) _sCalib.p7) << 4);
   b4946:	eb13 030e 	adds.w	r3, r3, lr
   b494a:	eb41 6666 	adc.w	r6, r1, r6, asr #25
    v2 = (((int64_t) _sCalib.p8) * rslt) >> 19;
   b494e:	17e0      	asrs	r0, r4, #31
   b4950:	4361      	muls	r1, r4
   b4952:	fb00 100e 	mla	r0, r0, lr, r1
   b4956:	fba4 4c0e 	umull	r4, ip, r4, lr
   b495a:	4460      	add	r0, ip
   b495c:	0ce4      	lsrs	r4, r4, #19
   b495e:	ea44 3440 	orr.w	r4, r4, r0, lsl #13
    rslt = ((rslt + v1 + v2) >> 8) + (((int64_t) _sCalib.p7) << 4);
   b4962:	191b      	adds	r3, r3, r4
   b4964:	ea4f 2413 	mov.w	r4, r3, lsr #8
   b4968:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
   b496c:	eb46 41e0 	adc.w	r1, r6, r0, asr #19
   b4970:	17d8      	asrs	r0, r3, #31
   b4972:	0100      	lsls	r0, r0, #4
   b4974:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
   b4978:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
   b497c:	011b      	lsls	r3, r3, #4
   b497e:	191b      	adds	r3, r3, r4
    return (uint32_t) (rslt / 256);
   b4980:	eb40 2021 	adc.w	r0, r0, r1, asr #8
   b4984:	2800      	cmp	r0, #0
   b4986:	da02      	bge.n	b498e <_ZN14DFRobot_BME28011getPressureEv+0x172>
   b4988:	33ff      	adds	r3, #255	; 0xff
   b498a:	f140 0000 	adc.w	r0, r0, #0
   b498e:	0a1b      	lsrs	r3, r3, #8
   b4990:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
}
   b4994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return 0;
   b4998:	2000      	movs	r0, #0
   b499a:	e7fb      	b.n	b4994 <_ZN14DFRobot_BME28011getPressureEv+0x178>
   b499c:	4608      	mov	r0, r1
   b499e:	e7f9      	b.n	b4994 <_ZN14DFRobot_BME28011getPressureEv+0x178>

000b49a0 <_ZN14DFRobot_BME28014getHumidityRawEv>:
{
   b49a0:	b513      	push	{r0, r1, r4, lr}
  readReg(regOffset(&_sRegs.humi), (uint8_t*) &sReg, sizeof(sReg));
   b49a2:	6803      	ldr	r3, [r0, #0]
   b49a4:	aa01      	add	r2, sp, #4
   b49a6:	685c      	ldr	r4, [r3, #4]
   b49a8:	21fd      	movs	r1, #253	; 0xfd
   b49aa:	2302      	movs	r3, #2
   b49ac:	47a0      	blx	r4
  return (((int32_t) sReg.msb << 8) | (int32_t) sReg.lsb);
   b49ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b49b2:	ba40      	rev16	r0, r0
}
   b49b4:	b280      	uxth	r0, r0
   b49b6:	b002      	add	sp, #8
   b49b8:	bd10      	pop	{r4, pc}
	...

000b49bc <_ZN14DFRobot_BME28011getHumidityEv>:
{
   b49bc:	b538      	push	{r3, r4, r5, lr}
   b49be:	4604      	mov	r4, r0
  getTemperature();   // update _t_fine
   b49c0:	f7ff feea 	bl	b4798 <_ZN14DFRobot_BME28014getTemperatureEv>
  int32_t   raw = getHumidityRaw();
   b49c4:	4620      	mov	r0, r4
   b49c6:	f7ff ffeb 	bl	b49a0 <_ZN14DFRobot_BME28014getHumidityRawEv>
  if(lastOperateStatus == eStatusOK) {
   b49ca:	7923      	ldrb	r3, [r4, #4]
   b49cc:	bbc3      	cbnz	r3, b4a40 <_ZN14DFRobot_BME28011getHumidityEv+0x84>
    v1 = (_t_fine - ((int32_t) 76800));
   b49ce:	68a1      	ldr	r1, [r4, #8]
    v1 = (((((raw <<14) - (((int32_t) _sCalibHumi.h4) << 20) - (((int32_t) _sCalibHumi.h5) * v1)) +
   b49d0:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
    v1 = (_t_fine - ((int32_t) 76800));
   b49d4:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v1 = (((((raw <<14) - (((int32_t) _sCalibHumi.h4) << 20) - (((int32_t) _sCalibHumi.h5) * v1)) +
   b49d8:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   b49dc:	0509      	lsls	r1, r1, #20
   b49de:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b49e2:	fb05 3312 	mls	r3, r5, r2, r3
   b49e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
         ((int32_t) 16384)) >> 15) * (((((((v1 * ((int32_t) _sCalibHumi.h6)) >> 10) * (((v1 *
   b49ea:	13da      	asrs	r2, r3, #15
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b49ec:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
         ((int32_t) 16384)) >> 15) * (((((((v1 * ((int32_t) _sCalibHumi.h6)) >> 10) * (((v1 *
   b49f0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b49f4:	436b      	muls	r3, r5
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b49f6:	12db      	asrs	r3, r3, #11
         ((int32_t) 16384)) >> 15) * (((((((v1 * ((int32_t) _sCalibHumi.h6)) >> 10) * (((v1 *
   b49f8:	4369      	muls	r1, r5
   b49fa:	1289      	asrs	r1, r1, #10
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b49fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
         ((int32_t) 16384)) >> 15) * (((((((v1 * ((int32_t) _sCalibHumi.h6)) >> 10) * (((v1 *
   b4a00:	434b      	muls	r3, r1
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b4a02:	129b      	asrs	r3, r3, #10
         ((int32_t) _sCalibHumi.h2) + 8192) >> 14));
   b4a04:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b4a08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   b4a0c:	434b      	muls	r3, r1
         ((int32_t) _sCalibHumi.h2) + 8192) >> 14));
   b4a0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4a12:	139b      	asrs	r3, r3, #14
    v1 = (((((raw <<14) - (((int32_t) _sCalibHumi.h4) << 20) - (((int32_t) _sCalibHumi.h5) * v1)) +
   b4a14:	4353      	muls	r3, r2
    v1 = (v1 - (((((v1 >> 15) * (v1 >> 15)) >> 7) * ((int32_t) _sCalibHumi.h1)) >> 4));
   b4a16:	13da      	asrs	r2, r3, #15
   b4a18:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   b4a1c:	4352      	muls	r2, r2
   b4a1e:	11d2      	asrs	r2, r2, #7
   b4a20:	434a      	muls	r2, r1
   b4a22:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v1 = (v1 < 0 ? 0 : v1);
   b4a26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v1 = (v1 > 419430400 ? 419430400 : v1);
   b4a2a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4a2e:	bfa8      	it	ge
   b4a30:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    return ((float) (v1 >> 12)) / 1024.0f;
   b4a34:	131b      	asrs	r3, r3, #12
   b4a36:	ee00 3a10 	vmov	s0, r3
   b4a3a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4a3e:	bd38      	pop	{r3, r4, r5, pc}
  return 0;
   b4a40:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4a48 <_ZN14DFRobot_BME28011getHumidityEv+0x8c>
   b4a44:	e7fb      	b.n	b4a3e <_ZN14DFRobot_BME28011getHumidityEv+0x82>
   b4a46:	bf00      	nop
   b4a48:	00000000 	.word	0x00000000

000b4a4c <_ZN14DFRobot_BME2806getRegEh>:
{
   b4a4c:	b513      	push	{r0, r1, r4, lr}
  readReg(reg, (uint8_t*) &temp, sizeof(temp));
   b4a4e:	6803      	ldr	r3, [r0, #0]
   b4a50:	f10d 0207 	add.w	r2, sp, #7
   b4a54:	685c      	ldr	r4, [r3, #4]
   b4a56:	2301      	movs	r3, #1
   b4a58:	47a0      	blx	r4
}
   b4a5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b4a5e:	b002      	add	sp, #8
   b4a60:	bd10      	pop	{r4, pc}

000b4a62 <_ZN14DFRobot_BME28012writeRegBitsEhhh>:
{
   b4a62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4a66:	461d      	mov	r5, r3
  readReg(reg, (uint8_t*) &temp, sizeof(temp));
   b4a68:	6803      	ldr	r3, [r0, #0]
{
   b4a6a:	4617      	mov	r7, r2
  readReg(reg, (uint8_t*) &temp, sizeof(temp));
   b4a6c:	f8d3 8004 	ldr.w	r8, [r3, #4]
   b4a70:	f10d 0207 	add.w	r2, sp, #7
   b4a74:	2301      	movs	r3, #1
{
   b4a76:	4604      	mov	r4, r0
   b4a78:	460e      	mov	r6, r1
  readReg(reg, (uint8_t*) &temp, sizeof(temp));
   b4a7a:	47c0      	blx	r8
  temp &= ~field;
   b4a7c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4a80:	ea21 0307 	bic.w	r3, r1, r7
  temp |= val;
   b4a84:	431d      	orrs	r5, r3
  writeReg(reg, (uint8_t*) &temp, sizeof(temp));
   b4a86:	6823      	ldr	r3, [r4, #0]
  temp |= val;
   b4a88:	f88d 5007 	strb.w	r5, [sp, #7]
  writeReg(reg, (uint8_t*) &temp, sizeof(temp));
   b4a8c:	681d      	ldr	r5, [r3, #0]
   b4a8e:	f10d 0207 	add.w	r2, sp, #7
   b4a92:	2301      	movs	r3, #1
   b4a94:	4631      	mov	r1, r6
   b4a96:	4620      	mov	r0, r4
   b4a98:	47a8      	blx	r5
}
   b4a9a:	b002      	add	sp, #8
   b4a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4aa0 <_ZN14DFRobot_BME28015setCtrlMeasModeENS_15eCtrlMeasMode_tE>:
  writeRegBitsHelper(_sRegs.ctrl_meas, sRegFlied, sRegVal);
   b4aa0:	f001 0303 	and.w	r3, r1, #3
   b4aa4:	2203      	movs	r2, #3
   b4aa6:	21f4      	movs	r1, #244	; 0xf4
   b4aa8:	f7ff bfdb 	b.w	b4a62 <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4aac <_ZN14DFRobot_BME28023setCtrlMeasSamplingTempENS_11eSampling_tE>:
  sRegCtrlMeas_t    sRegFlied = {0}, sRegVal = {0};
   b4aac:	f04f 0300 	mov.w	r3, #0
  sRegFlied.osrs_t = 0xff; sRegVal.osrs_t = eSampling;
   b4ab0:	f361 1347 	bfi	r3, r1, #5, #3
  writeRegBitsHelper(_sRegs.ctrl_meas, sRegFlied, sRegVal);
   b4ab4:	b2db      	uxtb	r3, r3
   b4ab6:	22e0      	movs	r2, #224	; 0xe0
   b4ab8:	21f4      	movs	r1, #244	; 0xf4
   b4aba:	f7ff bfd2 	b.w	b4a62 <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4abe <_ZN14DFRobot_BME28024setCtrlMeasSamplingPressENS_11eSampling_tE>:
  sRegCtrlMeas_t    sRegFlied = {0}, sRegVal = {0};
   b4abe:	f04f 0300 	mov.w	r3, #0
  sRegFlied.osrs_p = 0xff; sRegVal.osrs_p = eSampling;
   b4ac2:	f361 0384 	bfi	r3, r1, #2, #3
  writeRegBitsHelper(_sRegs.ctrl_meas, sRegFlied, sRegVal);
   b4ac6:	b2db      	uxtb	r3, r3
   b4ac8:	221c      	movs	r2, #28
   b4aca:	21f4      	movs	r1, #244	; 0xf4
   b4acc:	f7ff bfc9 	b.w	b4a62 <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4ad0 <_ZN14DFRobot_BME28019setCtrlHumiSamplingENS_11eSampling_tE>:
  writeRegBitsHelper(_sRegs.ctrl_hum, sRegFlied, sRegVal);
   b4ad0:	f001 0307 	and.w	r3, r1, #7
   b4ad4:	2207      	movs	r2, #7
   b4ad6:	21f2      	movs	r1, #242	; 0xf2
   b4ad8:	f7ff bfc3 	b.w	b4a62 <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4adc <_ZN14DFRobot_BME28015setConfigFilterENS_15eConfigFilter_tE>:
  sRegConfig_t    sRegFlied = {0}, sRegVal = {0};
   b4adc:	f04f 0300 	mov.w	r3, #0
  sRegFlied.filter = 0xff; sRegVal.filter = eFilter;
   b4ae0:	f361 0384 	bfi	r3, r1, #2, #3
  writeRegBitsHelper(_sRegs.config, sRegFlied, sRegVal);
   b4ae4:	b2db      	uxtb	r3, r3
   b4ae6:	221c      	movs	r2, #28
   b4ae8:	21f5      	movs	r1, #245	; 0xf5
   b4aea:	f7ff bfba 	b.w	b4a62 <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4aee <_ZN14DFRobot_BME28017setConfigTStandbyENS_17eConfigTStandby_tE>:
  sRegConfig_t    sRegFlied = {0}, sRegVal = {0};
   b4aee:	f04f 0300 	mov.w	r3, #0
  sRegFlied.t_sb = 0xff; sRegVal.t_sb = eT;
   b4af2:	f361 1347 	bfi	r3, r1, #5, #3
  writeRegBitsHelper(_sRegs.config, sRegFlied, sRegVal);
   b4af6:	b2db      	uxtb	r3, r3
   b4af8:	22e0      	movs	r2, #224	; 0xe0
   b4afa:	21f5      	movs	r1, #245	; 0xf5
   b4afc:	f7ff bfb1 	b.w	b4a62 <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4b00 <_ZN14DFRobot_BME2805beginEv>:
{
   b4b00:	b538      	push	{r3, r4, r5, lr}
  uint8_t temp = getReg(regOffset(&_sRegs.chip_id));
   b4b02:	21d0      	movs	r1, #208	; 0xd0
{
   b4b04:	4604      	mov	r4, r0
  uint8_t temp = getReg(regOffset(&_sRegs.chip_id));
   b4b06:	f7ff ffa1 	bl	b4a4c <_ZN14DFRobot_BME2806getRegEh>
  if((temp == BME280_REG_CHIP_ID_DEFAULT) && (lastOperateStatus == eStatusOK)) {
   b4b0a:	2860      	cmp	r0, #96	; 0x60
   b4b0c:	d125      	bne.n	b4b5a <_ZN14DFRobot_BME2805beginEv+0x5a>
   b4b0e:	7925      	ldrb	r5, [r4, #4]
   b4b10:	bb1d      	cbnz	r5, b4b5a <_ZN14DFRobot_BME2805beginEv+0x5a>
    reset();
   b4b12:	4620      	mov	r0, r4
   b4b14:	f7ff fdd2 	bl	b46bc <_ZN14DFRobot_BME2805resetEv>
    delay(300);
   b4b18:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4b1c:	f000 fb76 	bl	b520c <delay>
    getCalibrate();
   b4b20:	4620      	mov	r0, r4
   b4b22:	f7ff fddb 	bl	b46dc <_ZN14DFRobot_BME28012getCalibrateEv>
    setCtrlMeasSamplingPress(eSampling_X8);
   b4b26:	2104      	movs	r1, #4
   b4b28:	4620      	mov	r0, r4
   b4b2a:	f7ff ffc8 	bl	b4abe <_ZN14DFRobot_BME28024setCtrlMeasSamplingPressENS_11eSampling_tE>
    setCtrlMeasSamplingTemp(eSampling_X8);
   b4b2e:	2104      	movs	r1, #4
   b4b30:	4620      	mov	r0, r4
   b4b32:	f7ff ffbb 	bl	b4aac <_ZN14DFRobot_BME28023setCtrlMeasSamplingTempENS_11eSampling_tE>
    setCtrlHumiSampling(eSampling_X8);
   b4b36:	2104      	movs	r1, #4
   b4b38:	4620      	mov	r0, r4
   b4b3a:	f7ff ffc9 	bl	b4ad0 <_ZN14DFRobot_BME28019setCtrlHumiSamplingENS_11eSampling_tE>
    setConfigFilter(eConfigFilter_off);
   b4b3e:	4629      	mov	r1, r5
   b4b40:	4620      	mov	r0, r4
   b4b42:	f7ff ffcb 	bl	b4adc <_ZN14DFRobot_BME28015setConfigFilterENS_15eConfigFilter_tE>
    setConfigTStandby(eConfigTStandby_125);
   b4b46:	2102      	movs	r1, #2
   b4b48:	4620      	mov	r0, r4
   b4b4a:	f7ff ffd0 	bl	b4aee <_ZN14DFRobot_BME28017setConfigTStandbyENS_17eConfigTStandby_tE>
    setCtrlMeasMode(eCtrlMeasMode_normal);   // set control measurement mode to make these settings effective
   b4b4e:	2103      	movs	r1, #3
   b4b50:	4620      	mov	r0, r4
   b4b52:	f7ff ffa5 	bl	b4aa0 <_ZN14DFRobot_BME28015setCtrlMeasModeENS_15eCtrlMeasMode_tE>
}
   b4b56:	7920      	ldrb	r0, [r4, #4]
   b4b58:	bd38      	pop	{r3, r4, r5, pc}
    lastOperateStatus = eStatusErrDeviceNotDetected;
   b4b5a:	2302      	movs	r3, #2
   b4b5c:	7123      	strb	r3, [r4, #4]
   b4b5e:	e7fa      	b.n	b4b56 <_ZN14DFRobot_BME2805beginEv+0x56>

000b4b60 <_ZN18DFRobot_BME280_IICC1EP7TwoWireh>:
DFRobot_BME280_IIC::DFRobot_BME280_IIC(TwoWire *pWire, uint8_t addr)
   b4b60:	b510      	push	{r4, lr}
   b4b62:	4c03      	ldr	r4, [pc, #12]	; (b4b70 <_ZN18DFRobot_BME280_IICC1EP7TwoWireh+0x10>)
   b4b64:	6004      	str	r4, [r0, #0]
  _pWire = pWire;
   b4b66:	6341      	str	r1, [r0, #52]	; 0x34
  _addr = addr;
   b4b68:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
}
   b4b6c:	bd10      	pop	{r4, pc}
   b4b6e:	bf00      	nop
   b4b70:	000b7308 	.word	0x000b7308

000b4b74 <_ZN18DFRobot_ENS160_I2C8writeRegEhPKvj>:
  _pWire->begin();   // Wire.h(I2C)library function initialize wire library
  return DFRobot_ENS160::begin();   // Use the initialization function of the parent class
}

void DFRobot_ENS160_I2C::writeReg(uint8_t reg, const void* pBuf, size_t size)
{
   b4b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b76:	4605      	mov	r5, r0
   b4b78:	460f      	mov	r7, r1
  if(pBuf == NULL) {
    DBG("pBuf ERROR!! : null pointer");
  }
  uint8_t * _pBuf = (uint8_t *)pBuf;

  _pWire->beginTransmission(_deviceAddr);
   b4b7a:	7b01      	ldrb	r1, [r0, #12]
   b4b7c:	6880      	ldr	r0, [r0, #8]
{
   b4b7e:	4614      	mov	r4, r2
   b4b80:	461e      	mov	r6, r3
  _pWire->beginTransmission(_deviceAddr);
   b4b82:	f000 fee9 	bl	b5958 <_ZN7TwoWire17beginTransmissionEh>
  _pWire->write(reg);
   b4b86:	68a8      	ldr	r0, [r5, #8]
   b4b88:	6803      	ldr	r3, [r0, #0]
   b4b8a:	4639      	mov	r1, r7
   b4b8c:	689b      	ldr	r3, [r3, #8]
   b4b8e:	4798      	blx	r3

  for(size_t i = 0; i < size; i++) {
   b4b90:	4426      	add	r6, r4
   b4b92:	42b4      	cmp	r4, r6
    _pWire->write(_pBuf[i]);
   b4b94:	68a8      	ldr	r0, [r5, #8]
  for(size_t i = 0; i < size; i++) {
   b4b96:	d005      	beq.n	b4ba4 <_ZN18DFRobot_ENS160_I2C8writeRegEhPKvj+0x30>
    _pWire->write(_pBuf[i]);
   b4b98:	6803      	ldr	r3, [r0, #0]
   b4b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4b9e:	689b      	ldr	r3, [r3, #8]
   b4ba0:	4798      	blx	r3
  for(size_t i = 0; i < size; i++) {
   b4ba2:	e7f6      	b.n	b4b92 <_ZN18DFRobot_ENS160_I2C8writeRegEhPKvj+0x1e>
  }
  _pWire->endTransmission();
}
   b4ba4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  _pWire->endTransmission();
   b4ba8:	f000 bede 	b.w	b5968 <_ZN7TwoWire15endTransmissionEv>

000b4bac <_ZN18DFRobot_ENS160_I2C7readRegEhPvj>:

size_t DFRobot_ENS160_I2C::readReg(uint8_t reg, void* pBuf, size_t size)
{
   b4bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4bae:	4604      	mov	r4, r0
   b4bb0:	460f      	mov	r7, r1
  if(NULL == pBuf) {
    DBG("pBuf ERROR!! : null pointer");
  }
  uint8_t * _pBuf = (uint8_t*)pBuf;

  _pWire->beginTransmission(_deviceAddr);
   b4bb2:	7b01      	ldrb	r1, [r0, #12]
   b4bb4:	6880      	ldr	r0, [r0, #8]
{
   b4bb6:	4615      	mov	r5, r2
   b4bb8:	461e      	mov	r6, r3
  _pWire->beginTransmission(_deviceAddr);
   b4bba:	f000 fecd 	bl	b5958 <_ZN7TwoWire17beginTransmissionEh>
  _pWire -> write(reg);
   b4bbe:	68a0      	ldr	r0, [r4, #8]
   b4bc0:	6803      	ldr	r3, [r0, #0]
   b4bc2:	4639      	mov	r1, r7
   b4bc4:	689b      	ldr	r3, [r3, #8]
   b4bc6:	4798      	blx	r3
  if(0 != _pWire->endTransmission()) {   // Used Wire.endTransmission() to end a slave transmission started by beginTransmission() and arranged by write().
   b4bc8:	68a0      	ldr	r0, [r4, #8]
   b4bca:	f000 fecd 	bl	b5968 <_ZN7TwoWire15endTransmissionEv>
   b4bce:	b9a0      	cbnz	r0, b4bfa <_ZN18DFRobot_ENS160_I2C7readRegEhPvj+0x4e>
    DBG("endTransmission ERROR!!");
  } else {
    _pWire->requestFrom(_deviceAddr, (uint8_t)size);   // Master device requests size bytes from slave device, which can be accepted by master device with read() or available()
   b4bd0:	b2f2      	uxtb	r2, r6
   b4bd2:	7b21      	ldrb	r1, [r4, #12]
   b4bd4:	68a0      	ldr	r0, [r4, #8]
   b4bd6:	f000 febc 	bl	b5952 <_ZN7TwoWire11requestFromEhj>
   b4bda:	1e6e      	subs	r6, r5, #1
   b4bdc:	f1c5 0501 	rsb	r5, r5, #1
    
    while (_pWire->available()) {
   b4be0:	68a0      	ldr	r0, [r4, #8]
   b4be2:	6803      	ldr	r3, [r0, #0]
   b4be4:	691b      	ldr	r3, [r3, #16]
   b4be6:	19af      	adds	r7, r5, r6
   b4be8:	4798      	blx	r3
   b4bea:	b138      	cbz	r0, b4bfc <_ZN18DFRobot_ENS160_I2C7readRegEhPvj+0x50>
      _pBuf[count++] = _pWire->read();   // Use read() to receive and put into buf
   b4bec:	68a0      	ldr	r0, [r4, #8]
   b4bee:	6803      	ldr	r3, [r0, #0]
   b4bf0:	695b      	ldr	r3, [r3, #20]
   b4bf2:	4798      	blx	r3
   b4bf4:	f806 0f01 	strb.w	r0, [r6, #1]!
    while (_pWire->available()) {
   b4bf8:	e7f2      	b.n	b4be0 <_ZN18DFRobot_ENS160_I2C7readRegEhPvj+0x34>
  size_t count = 0;
   b4bfa:	2700      	movs	r7, #0
    }
    // _pWire->endTransmission();
  }
  return count;
}
   b4bfc:	4638      	mov	r0, r7
   b4bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c00 <_ZN14DFRobot_ENS16010setPWRModeEh>:
{
   b4c00:	b513      	push	{r0, r1, r4, lr}
  writeReg(ENS160_OPMODE_REG, &mode, sizeof(mode));
   b4c02:	6803      	ldr	r3, [r0, #0]
{
   b4c04:	f88d 1007 	strb.w	r1, [sp, #7]
  writeReg(ENS160_OPMODE_REG, &mode, sizeof(mode));
   b4c08:	685c      	ldr	r4, [r3, #4]
   b4c0a:	f10d 0207 	add.w	r2, sp, #7
   b4c0e:	2301      	movs	r3, #1
   b4c10:	2110      	movs	r1, #16
   b4c12:	47a0      	blx	r4
  delay(20);   // Give it some time to switch mode
   b4c14:	2014      	movs	r0, #20
   b4c16:	f000 faf9 	bl	b520c <delay>
}
   b4c1a:	b002      	add	sp, #8
   b4c1c:	bd10      	pop	{r4, pc}

000b4c1e <_ZN14DFRobot_ENS16010setINTModeEh>:
{
   b4c1e:	b513      	push	{r0, r1, r4, lr}
  writeReg(ENS160_CONFIG_REG, &mode, sizeof(mode));
   b4c20:	6803      	ldr	r3, [r0, #0]
  mode |= (eINTDataDrdyEN | eIntGprDrdyDIS);
   b4c22:	f041 0102 	orr.w	r1, r1, #2
  writeReg(ENS160_CONFIG_REG, &mode, sizeof(mode));
   b4c26:	685c      	ldr	r4, [r3, #4]
  mode |= (eINTDataDrdyEN | eIntGprDrdyDIS);
   b4c28:	f88d 1007 	strb.w	r1, [sp, #7]
  writeReg(ENS160_CONFIG_REG, &mode, sizeof(mode));
   b4c2c:	2301      	movs	r3, #1
   b4c2e:	f10d 0207 	add.w	r2, sp, #7
   b4c32:	2111      	movs	r1, #17
   b4c34:	47a0      	blx	r4
  delay(20);   // Give it some time to switch mode
   b4c36:	2014      	movs	r0, #20
   b4c38:	f000 fae8 	bl	b520c <delay>
}
   b4c3c:	b002      	add	sp, #8
   b4c3e:	bd10      	pop	{r4, pc}

000b4c40 <_ZN14DFRobot_ENS1605beginEv>:
{
   b4c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(0 == readReg(ENS160_PART_ID_REG, idBuf, sizeof(idBuf)))   // Judge whether the data bus is successful
   b4c42:	6803      	ldr	r3, [r0, #0]
   b4c44:	aa01      	add	r2, sp, #4
   b4c46:	689d      	ldr	r5, [r3, #8]
   b4c48:	2100      	movs	r1, #0
   b4c4a:	2302      	movs	r3, #2
{
   b4c4c:	4604      	mov	r4, r0
  if(0 == readReg(ENS160_PART_ID_REG, idBuf, sizeof(idBuf)))   // Judge whether the data bus is successful
   b4c4e:	47a8      	blx	r5
   b4c50:	b178      	cbz	r0, b4c72 <_ZN14DFRobot_ENS1605beginEv+0x32>
  if(ENS160_PART_ID != ENS160_CONCAT_BYTES(idBuf[1], idBuf[0]))   // Judge whether the chip version matches
   b4c52:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b4c56:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
   b4c5a:	d10d      	bne.n	b4c78 <_ZN14DFRobot_ENS1605beginEv+0x38>
  setPWRMode(ENS160_STANDARD_MODE);
   b4c5c:	2102      	movs	r1, #2
   b4c5e:	4620      	mov	r0, r4
   b4c60:	f7ff ffce 	bl	b4c00 <_ZN14DFRobot_ENS16010setPWRModeEh>
  setINTMode(0x00);
   b4c64:	4620      	mov	r0, r4
   b4c66:	2100      	movs	r1, #0
   b4c68:	f7ff ffd9 	bl	b4c1e <_ZN14DFRobot_ENS16010setINTModeEh>
  return NO_ERR;
   b4c6c:	2000      	movs	r0, #0
}
   b4c6e:	b003      	add	sp, #12
   b4c70:	bd30      	pop	{r4, r5, pc}
    return ERR_DATA_BUS;
   b4c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4c76:	e7fa      	b.n	b4c6e <_ZN14DFRobot_ENS1605beginEv+0x2e>
    return ERR_IC_VERSION;
   b4c78:	f06f 0001 	mvn.w	r0, #1
   b4c7c:	e7f7      	b.n	b4c6e <_ZN14DFRobot_ENS1605beginEv+0x2e>

000b4c7e <_ZN18DFRobot_ENS160_I2C5beginEv>:
{
   b4c7e:	b510      	push	{r4, lr}
   b4c80:	4604      	mov	r4, r0
  _pWire->begin();   // Wire.h(I2C)library function initialize wire library
   b4c82:	6880      	ldr	r0, [r0, #8]
   b4c84:	f000 fe36 	bl	b58f4 <_ZN7TwoWire5beginEv>
  return DFRobot_ENS160::begin();   // Use the initialization function of the parent class
   b4c88:	4620      	mov	r0, r4
}
   b4c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return DFRobot_ENS160::begin();   // Use the initialization function of the parent class
   b4c8e:	f7ff bfd7 	b.w	b4c40 <_ZN14DFRobot_ENS1605beginEv>
   b4c92:	0000      	movs	r0, r0
   b4c94:	0000      	movs	r0, r0
	...

000b4c98 <_ZN14DFRobot_ENS16013setTempAndHumEff>:
{
   b4c98:	b530      	push	{r4, r5, lr}
   b4c9a:	ed2d 8b02 	vpush	{d8}
   b4c9e:	4604      	mov	r4, r0
   b4ca0:	b083      	sub	sp, #12
   b4ca2:	ee10 0a10 	vmov	r0, s0
   b4ca6:	eeb0 8a60 	vmov.f32	s16, s1
  uint16_t temp = (ambientTemp + 273.15) * 64;
   b4caa:	f001 fcfb 	bl	b66a4 <__aeabi_f2d>
   b4cae:	a318      	add	r3, pc, #96	; (adr r3, b4d10 <_ZN14DFRobot_ENS16013setTempAndHumEff+0x78>)
   b4cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cb4:	f001 fb98 	bl	b63e8 <__adddf3>
   b4cb8:	4b13      	ldr	r3, [pc, #76]	; (b4d08 <_ZN14DFRobot_ENS16013setTempAndHumEff+0x70>)
   b4cba:	2200      	movs	r2, #0
   b4cbc:	f001 fd4a 	bl	b6754 <__aeabi_dmul>
   b4cc0:	f001 ff5a 	bl	b6b78 <__aeabi_d2uiz>
  uint16_t rh = relativeHumidity * 512;
   b4cc4:	eddf 0a11 	vldr	s1, [pc, #68]	; b4d0c <_ZN14DFRobot_ENS16013setTempAndHumEff+0x74>
   b4cc8:	ee28 8a20 	vmul.f32	s16, s16, s1
  uint16_t temp = (ambientTemp + 273.15) * 64;
   b4ccc:	b282      	uxth	r2, r0
  uint16_t rh = relativeHumidity * 512;
   b4cce:	eebc 8ac8 	vcvt.u32.f32	s16, s16
  buf[0] = temp & 0xFF;
   b4cd2:	f88d 2004 	strb.w	r2, [sp, #4]
  uint16_t rh = relativeHumidity * 512;
   b4cd6:	ee18 3a10 	vmov	r3, s16
   b4cda:	b29b      	uxth	r3, r3
  buf[2] = rh & 0xFF;
   b4cdc:	f88d 3006 	strb.w	r3, [sp, #6]
  buf[3] = (rh & 0xFF00) >> 8;
   b4ce0:	0a1b      	lsrs	r3, r3, #8
   b4ce2:	f88d 3007 	strb.w	r3, [sp, #7]
  writeReg(ENS160_TEMP_IN_REG, buf, sizeof(buf));
   b4ce6:	6823      	ldr	r3, [r4, #0]
  buf[1] = (temp & 0xFF00) >> 8;
   b4ce8:	0a12      	lsrs	r2, r2, #8
  writeReg(ENS160_TEMP_IN_REG, buf, sizeof(buf));
   b4cea:	685d      	ldr	r5, [r3, #4]
  buf[1] = (temp & 0xFF00) >> 8;
   b4cec:	f88d 2005 	strb.w	r2, [sp, #5]
  writeReg(ENS160_TEMP_IN_REG, buf, sizeof(buf));
   b4cf0:	2304      	movs	r3, #4
   b4cf2:	eb0d 0203 	add.w	r2, sp, r3
   b4cf6:	2113      	movs	r1, #19
   b4cf8:	4620      	mov	r0, r4
   b4cfa:	47a8      	blx	r5
}
   b4cfc:	b003      	add	sp, #12
   b4cfe:	ecbd 8b02 	vpop	{d8}
   b4d02:	bd30      	pop	{r4, r5, pc}
   b4d04:	f3af 8000 	nop.w
   b4d08:	40500000 	.word	0x40500000
   b4d0c:	44000000 	.word	0x44000000
   b4d10:	66666666 	.word	0x66666666
   b4d14:	40711266 	.word	0x40711266

000b4d18 <_ZN14DFRobot_ENS1606getAQIEv>:
{
   b4d18:	b513      	push	{r0, r1, r4, lr}
  uint8_t data = 0;
   b4d1a:	2300      	movs	r3, #0
   b4d1c:	f88d 3007 	strb.w	r3, [sp, #7]
  readReg(ENS160_DATA_AQI_REG, &data, sizeof(data));
   b4d20:	6803      	ldr	r3, [r0, #0]
   b4d22:	f10d 0207 	add.w	r2, sp, #7
   b4d26:	689c      	ldr	r4, [r3, #8]
   b4d28:	2121      	movs	r1, #33	; 0x21
   b4d2a:	2301      	movs	r3, #1
   b4d2c:	47a0      	blx	r4
}
   b4d2e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b4d32:	b002      	add	sp, #8
   b4d34:	bd10      	pop	{r4, pc}

000b4d36 <_ZN14DFRobot_ENS1607getTVOCEv>:
{
   b4d36:	b513      	push	{r0, r1, r4, lr}
  readReg(ENS160_DATA_TVOC_REG, buf, sizeof(buf));
   b4d38:	6803      	ldr	r3, [r0, #0]
   b4d3a:	aa01      	add	r2, sp, #4
   b4d3c:	689c      	ldr	r4, [r3, #8]
   b4d3e:	2122      	movs	r1, #34	; 0x22
   b4d40:	2302      	movs	r3, #2
   b4d42:	47a0      	blx	r4
}
   b4d44:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b4d48:	b002      	add	sp, #8
   b4d4a:	bd10      	pop	{r4, pc}

000b4d4c <_ZN14DFRobot_ENS1607getECO2Ev>:
{
   b4d4c:	b513      	push	{r0, r1, r4, lr}
  readReg(ENS160_DATA_ECO2_REG, buf, sizeof(buf));
   b4d4e:	6803      	ldr	r3, [r0, #0]
   b4d50:	aa01      	add	r2, sp, #4
   b4d52:	689c      	ldr	r4, [r3, #8]
   b4d54:	2124      	movs	r1, #36	; 0x24
   b4d56:	2302      	movs	r3, #2
   b4d58:	47a0      	blx	r4
}
   b4d5a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b4d5e:	b002      	add	sp, #8
   b4d60:	bd10      	pop	{r4, pc}
	...

000b4d64 <_ZN18DFRobot_ENS160_I2CC1EP7TwoWireh>:
DFRobot_ENS160_I2C::DFRobot_ENS160_I2C(TwoWire *pWire, uint8_t i2cAddr)
   b4d64:	b510      	push	{r4, lr}
  misr = 0;   // Mirror of DATA_MISR (0 is hardware default)
   b4d66:	2400      	movs	r4, #0
   b4d68:	7144      	strb	r4, [r0, #5]
DFRobot_ENS160_I2C::DFRobot_ENS160_I2C(TwoWire *pWire, uint8_t i2cAddr)
   b4d6a:	4c02      	ldr	r4, [pc, #8]	; (b4d74 <_ZN18DFRobot_ENS160_I2CC1EP7TwoWireh+0x10>)
   b4d6c:	6004      	str	r4, [r0, #0]
  _deviceAddr = i2cAddr;
   b4d6e:	7302      	strb	r2, [r0, #12]
  _pWire = pWire;
   b4d70:	6081      	str	r1, [r0, #8]
}
   b4d72:	bd10      	pop	{r4, pc}
   b4d74:	000b7318 	.word	0x000b7318

000b4d78 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <os_mutex_recursive_create+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	00030248 	.word	0x00030248

000b4d88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <HAL_RNG_GetRandomNumber+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	685b      	ldr	r3, [r3, #4]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	00030218 	.word	0x00030218

000b4d98 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	695b      	ldr	r3, [r3, #20]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	00030218 	.word	0x00030218

000b4da8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <HAL_Validate_Pin_Function+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	685b      	ldr	r3, [r3, #4]
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	0003022c 	.word	0x0003022c

000b4db8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <HAL_Pin_Mode+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	689b      	ldr	r3, [r3, #8]
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	0003022c 	.word	0x0003022c

000b4dc8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <HAL_Get_Pin_Mode+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	68db      	ldr	r3, [r3, #12]
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	0003022c 	.word	0x0003022c

000b4dd8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <HAL_GPIO_Write+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	691b      	ldr	r3, [r3, #16]
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	0003022c 	.word	0x0003022c

000b4de8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <hal_adc_read+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	0003022c 	.word	0x0003022c

000b4df8 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <hal_i2c_begin+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	68db      	ldr	r3, [r3, #12]
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	00030228 	.word	0x00030228

000b4e08 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <hal_i2c_begin_transmission+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	699b      	ldr	r3, [r3, #24]
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	00030228 	.word	0x00030228

000b4e18 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <hal_i2c_end_transmission+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	69db      	ldr	r3, [r3, #28]
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	00030228 	.word	0x00030228

000b4e28 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <hal_i2c_write+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	6a1b      	ldr	r3, [r3, #32]
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	00030228 	.word	0x00030228

000b4e38 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <hal_i2c_available+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	00030228 	.word	0x00030228

000b4e48 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <hal_i2c_read+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	00030228 	.word	0x00030228

000b4e58 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <hal_i2c_peek+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	00030228 	.word	0x00030228

000b4e68 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <hal_i2c_flush+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	00030228 	.word	0x00030228

000b4e78 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <hal_i2c_is_enabled+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	00030228 	.word	0x00030228

000b4e88 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b02      	ldr	r3, [pc, #8]	; (b4e94 <hal_i2c_init+0xc>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e90:	9301      	str	r3, [sp, #4]
   b4e92:	bd08      	pop	{r3, pc}
   b4e94:	00030228 	.word	0x00030228

000b4e98 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4e98:	b508      	push	{r3, lr}
   b4e9a:	4b02      	ldr	r3, [pc, #8]	; (b4ea4 <hal_i2c_request_ex+0xc>)
   b4e9c:	681b      	ldr	r3, [r3, #0]
   b4e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4ea0:	9301      	str	r3, [sp, #4]
   b4ea2:	bd08      	pop	{r3, pc}
   b4ea4:	00030228 	.word	0x00030228

000b4ea8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4ea8:	b508      	push	{r3, lr}
   b4eaa:	4b02      	ldr	r3, [pc, #8]	; (b4eb4 <inet_inet_ntop+0xc>)
   b4eac:	681b      	ldr	r3, [r3, #0]
   b4eae:	695b      	ldr	r3, [r3, #20]
   b4eb0:	9301      	str	r3, [sp, #4]
   b4eb2:	bd08      	pop	{r3, pc}
   b4eb4:	00030264 	.word	0x00030264

000b4eb8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4eb8:	b508      	push	{r3, lr}
   b4eba:	4b02      	ldr	r3, [pc, #8]	; (b4ec4 <netdb_freeaddrinfo+0xc>)
   b4ebc:	681b      	ldr	r3, [r3, #0]
   b4ebe:	689b      	ldr	r3, [r3, #8]
   b4ec0:	9301      	str	r3, [sp, #4]
   b4ec2:	bd08      	pop	{r3, pc}
   b4ec4:	00030268 	.word	0x00030268

000b4ec8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4ec8:	b508      	push	{r3, lr}
   b4eca:	4b02      	ldr	r3, [pc, #8]	; (b4ed4 <netdb_getaddrinfo+0xc>)
   b4ecc:	681b      	ldr	r3, [r3, #0]
   b4ece:	68db      	ldr	r3, [r3, #12]
   b4ed0:	9301      	str	r3, [sp, #4]
   b4ed2:	bd08      	pop	{r3, pc}
   b4ed4:	00030268 	.word	0x00030268

000b4ed8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4ed8:	b508      	push	{r3, lr}
   b4eda:	4b02      	ldr	r3, [pc, #8]	; (b4ee4 <hal_spi_init+0xc>)
   b4edc:	681b      	ldr	r3, [r3, #0]
   b4ede:	69db      	ldr	r3, [r3, #28]
   b4ee0:	9301      	str	r3, [sp, #4]
   b4ee2:	bd08      	pop	{r3, pc}
   b4ee4:	00030230 	.word	0x00030230

000b4ee8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4ee8:	b508      	push	{r3, lr}
   b4eea:	4b02      	ldr	r3, [pc, #8]	; (b4ef4 <hal_spi_is_enabled+0xc>)
   b4eec:	681b      	ldr	r3, [r3, #0]
   b4eee:	6a1b      	ldr	r3, [r3, #32]
   b4ef0:	9301      	str	r3, [sp, #4]
   b4ef2:	bd08      	pop	{r3, pc}
   b4ef4:	00030230 	.word	0x00030230

000b4ef8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4ef8:	b508      	push	{r3, lr}
   b4efa:	4b02      	ldr	r3, [pc, #8]	; (b4f04 <hal_usart_write+0xc>)
   b4efc:	681b      	ldr	r3, [r3, #0]
   b4efe:	68db      	ldr	r3, [r3, #12]
   b4f00:	9301      	str	r3, [sp, #4]
   b4f02:	bd08      	pop	{r3, pc}
   b4f04:	0003023c 	.word	0x0003023c

000b4f08 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4f08:	b508      	push	{r3, lr}
   b4f0a:	4b02      	ldr	r3, [pc, #8]	; (b4f14 <hal_usart_available+0xc>)
   b4f0c:	681b      	ldr	r3, [r3, #0]
   b4f0e:	691b      	ldr	r3, [r3, #16]
   b4f10:	9301      	str	r3, [sp, #4]
   b4f12:	bd08      	pop	{r3, pc}
   b4f14:	0003023c 	.word	0x0003023c

000b4f18 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4f18:	b508      	push	{r3, lr}
   b4f1a:	4b02      	ldr	r3, [pc, #8]	; (b4f24 <hal_usart_read+0xc>)
   b4f1c:	681b      	ldr	r3, [r3, #0]
   b4f1e:	695b      	ldr	r3, [r3, #20]
   b4f20:	9301      	str	r3, [sp, #4]
   b4f22:	bd08      	pop	{r3, pc}
   b4f24:	0003023c 	.word	0x0003023c

000b4f28 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4f28:	b508      	push	{r3, lr}
   b4f2a:	4b02      	ldr	r3, [pc, #8]	; (b4f34 <hal_usart_peek+0xc>)
   b4f2c:	681b      	ldr	r3, [r3, #0]
   b4f2e:	699b      	ldr	r3, [r3, #24]
   b4f30:	9301      	str	r3, [sp, #4]
   b4f32:	bd08      	pop	{r3, pc}
   b4f34:	0003023c 	.word	0x0003023c

000b4f38 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4f38:	b508      	push	{r3, lr}
   b4f3a:	4b02      	ldr	r3, [pc, #8]	; (b4f44 <hal_usart_flush+0xc>)
   b4f3c:	681b      	ldr	r3, [r3, #0]
   b4f3e:	69db      	ldr	r3, [r3, #28]
   b4f40:	9301      	str	r3, [sp, #4]
   b4f42:	bd08      	pop	{r3, pc}
   b4f44:	0003023c 	.word	0x0003023c

000b4f48 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4f48:	b508      	push	{r3, lr}
   b4f4a:	4b02      	ldr	r3, [pc, #8]	; (b4f54 <hal_usart_is_enabled+0xc>)
   b4f4c:	681b      	ldr	r3, [r3, #0]
   b4f4e:	6a1b      	ldr	r3, [r3, #32]
   b4f50:	9301      	str	r3, [sp, #4]
   b4f52:	bd08      	pop	{r3, pc}
   b4f54:	0003023c 	.word	0x0003023c

000b4f58 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4f58:	b508      	push	{r3, lr}
   b4f5a:	4b02      	ldr	r3, [pc, #8]	; (b4f64 <hal_usart_available_data_for_write+0xc>)
   b4f5c:	681b      	ldr	r3, [r3, #0]
   b4f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f60:	9301      	str	r3, [sp, #4]
   b4f62:	bd08      	pop	{r3, pc}
   b4f64:	0003023c 	.word	0x0003023c

000b4f68 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b02      	ldr	r3, [pc, #8]	; (b4f74 <hal_usart_init_ex+0xc>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f70:	9301      	str	r3, [sp, #4]
   b4f72:	bd08      	pop	{r3, pc}
   b4f74:	0003023c 	.word	0x0003023c

000b4f78 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4f78:	b508      	push	{r3, lr}
   b4f7a:	4b02      	ldr	r3, [pc, #8]	; (b4f84 <HAL_USB_USART_Init+0xc>)
   b4f7c:	681b      	ldr	r3, [r3, #0]
   b4f7e:	681b      	ldr	r3, [r3, #0]
   b4f80:	9301      	str	r3, [sp, #4]
   b4f82:	bd08      	pop	{r3, pc}
   b4f84:	0003024c 	.word	0x0003024c

000b4f88 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4f88:	b508      	push	{r3, lr}
   b4f8a:	4b02      	ldr	r3, [pc, #8]	; (b4f94 <HAL_USB_USART_Begin+0xc>)
   b4f8c:	681b      	ldr	r3, [r3, #0]
   b4f8e:	685b      	ldr	r3, [r3, #4]
   b4f90:	9301      	str	r3, [sp, #4]
   b4f92:	bd08      	pop	{r3, pc}
   b4f94:	0003024c 	.word	0x0003024c

000b4f98 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <HAL_USB_USART_Available_Data+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	691b      	ldr	r3, [r3, #16]
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	0003024c 	.word	0x0003024c

000b4fa8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	695b      	ldr	r3, [r3, #20]
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	0003024c 	.word	0x0003024c

000b4fb8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <HAL_USB_USART_Receive_Data+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	699b      	ldr	r3, [r3, #24]
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	0003024c 	.word	0x0003024c

000b4fc8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <HAL_USB_USART_Send_Data+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	69db      	ldr	r3, [r3, #28]
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	0003024c 	.word	0x0003024c

000b4fd8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b02      	ldr	r3, [pc, #8]	; (b4fe4 <HAL_USB_USART_Flush_Data+0xc>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	6a1b      	ldr	r3, [r3, #32]
   b4fe0:	9301      	str	r3, [sp, #4]
   b4fe2:	bd08      	pop	{r3, pc}
   b4fe4:	0003024c 	.word	0x0003024c

000b4fe8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4fe8:	b508      	push	{r3, lr}
   b4fea:	4b02      	ldr	r3, [pc, #8]	; (b4ff4 <set_system_mode+0xc>)
   b4fec:	681b      	ldr	r3, [r3, #0]
   b4fee:	685b      	ldr	r3, [r3, #4]
   b4ff0:	9301      	str	r3, [sp, #4]
   b4ff2:	bd08      	pop	{r3, pc}
   b4ff4:	00030220 	.word	0x00030220

000b4ff8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b02      	ldr	r3, [pc, #8]	; (b5004 <system_delay_ms+0xc>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	695b      	ldr	r3, [r3, #20]
   b5000:	9301      	str	r3, [sp, #4]
   b5002:	bd08      	pop	{r3, pc}
   b5004:	00030220 	.word	0x00030220

000b5008 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <application_thread_current+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	00030220 	.word	0x00030220

000b5018 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <application_thread_invoke+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	00030220 	.word	0x00030220

000b5028 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b03      	ldr	r3, [pc, #12]	; (b5038 <system_ctrl_set_app_request_handler+0x10>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5032:	9301      	str	r3, [sp, #4]
   b5034:	bd08      	pop	{r3, pc}
   b5036:	0000      	.short	0x0000
   b5038:	00030220 	.word	0x00030220

000b503c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b03      	ldr	r3, [pc, #12]	; (b504c <system_ctrl_set_result+0x10>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5046:	9301      	str	r3, [sp, #4]
   b5048:	bd08      	pop	{r3, pc}
   b504a:	0000      	.short	0x0000
   b504c:	00030220 	.word	0x00030220

000b5050 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b03      	ldr	r3, [pc, #12]	; (b5060 <system_reset+0x10>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b505a:	9301      	str	r3, [sp, #4]
   b505c:	bd08      	pop	{r3, pc}
   b505e:	0000      	.short	0x0000
   b5060:	00030220 	.word	0x00030220

000b5064 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <spark_function+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	685b      	ldr	r3, [r3, #4]
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	00030244 	.word	0x00030244

000b5074 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <spark_process+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	689b      	ldr	r3, [r3, #8]
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	00030244 	.word	0x00030244

000b5084 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <spark_cloud_flag_connected+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	695b      	ldr	r3, [r3, #20]
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	00030244 	.word	0x00030244

000b5094 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <spark_send_event+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	6a1b      	ldr	r3, [r3, #32]
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	00030244 	.word	0x00030244

000b50a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	00030244 	.word	0x00030244

000b50b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <network_connect+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	685b      	ldr	r3, [r3, #4]
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	00030240 	.word	0x00030240

000b50c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <network_connecting+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	689b      	ldr	r3, [r3, #8]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	00030240 	.word	0x00030240

000b50d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <network_disconnect+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	68db      	ldr	r3, [r3, #12]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	00030240 	.word	0x00030240

000b50e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <network_ready+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	691b      	ldr	r3, [r3, #16]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	00030240 	.word	0x00030240

000b50f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <network_on+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	695b      	ldr	r3, [r3, #20]
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	00030240 	.word	0x00030240

000b5104 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <network_off+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	699b      	ldr	r3, [r3, #24]
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	00030240 	.word	0x00030240

000b5114 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <network_listen+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	69db      	ldr	r3, [r3, #28]
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	00030240 	.word	0x00030240

000b5124 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <network_listening+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	6a1b      	ldr	r3, [r3, #32]
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	00030240 	.word	0x00030240

000b5134 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <network_set_listen_timeout+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	00030240 	.word	0x00030240

000b5144 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <network_get_listen_timeout+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030240 	.word	0x00030240

000b5154 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <network_is_on+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	00030240 	.word	0x00030240

000b5164 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <network_is_off+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	00030240 	.word	0x00030240

000b5174 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b02      	ldr	r3, [pc, #8]	; (b5180 <malloc+0xc>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	681b      	ldr	r3, [r3, #0]
   b517c:	9301      	str	r3, [sp, #4]
   b517e:	bd08      	pop	{r3, pc}
   b5180:	0003021c 	.word	0x0003021c

000b5184 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5184:	b508      	push	{r3, lr}
   b5186:	4b02      	ldr	r3, [pc, #8]	; (b5190 <free+0xc>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	685b      	ldr	r3, [r3, #4]
   b518c:	9301      	str	r3, [sp, #4]
   b518e:	bd08      	pop	{r3, pc}
   b5190:	0003021c 	.word	0x0003021c

000b5194 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5194:	b508      	push	{r3, lr}
   b5196:	4b02      	ldr	r3, [pc, #8]	; (b51a0 <realloc+0xc>)
   b5198:	681b      	ldr	r3, [r3, #0]
   b519a:	689b      	ldr	r3, [r3, #8]
   b519c:	9301      	str	r3, [sp, #4]
   b519e:	bd08      	pop	{r3, pc}
   b51a0:	0003021c 	.word	0x0003021c

000b51a4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b51a4:	b508      	push	{r3, lr}
   b51a6:	4b02      	ldr	r3, [pc, #8]	; (b51b0 <vsnprintf+0xc>)
   b51a8:	681b      	ldr	r3, [r3, #0]
   b51aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b51ac:	9301      	str	r3, [sp, #4]
   b51ae:	bd08      	pop	{r3, pc}
   b51b0:	0003021c 	.word	0x0003021c

000b51b4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b51b4:	b508      	push	{r3, lr}
   b51b6:	4b02      	ldr	r3, [pc, #8]	; (b51c0 <abort+0xc>)
   b51b8:	681b      	ldr	r3, [r3, #0]
   b51ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51bc:	9301      	str	r3, [sp, #4]
   b51be:	bd08      	pop	{r3, pc}
   b51c0:	0003021c 	.word	0x0003021c

000b51c4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b51c4:	b508      	push	{r3, lr}
   b51c6:	4b02      	ldr	r3, [pc, #8]	; (b51d0 <_malloc_r+0xc>)
   b51c8:	681b      	ldr	r3, [r3, #0]
   b51ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b51cc:	9301      	str	r3, [sp, #4]
   b51ce:	bd08      	pop	{r3, pc}
   b51d0:	0003021c 	.word	0x0003021c

000b51d4 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b51d4:	b508      	push	{r3, lr}
   b51d6:	4b02      	ldr	r3, [pc, #8]	; (b51e0 <__assert_func+0xc>)
   b51d8:	681b      	ldr	r3, [r3, #0]
   b51da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51dc:	9301      	str	r3, [sp, #4]
   b51de:	bd08      	pop	{r3, pc}
   b51e0:	0003021c 	.word	0x0003021c

000b51e4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b51e4:	b508      	push	{r3, lr}
   b51e6:	4b02      	ldr	r3, [pc, #8]	; (b51f0 <newlib_impure_ptr_callback+0xc>)
   b51e8:	681b      	ldr	r3, [r3, #0]
   b51ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51ec:	9301      	str	r3, [sp, #4]
   b51ee:	bd08      	pop	{r3, pc}
   b51f0:	0003021c 	.word	0x0003021c

000b51f4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b51f4:	428a      	cmp	r2, r1
{
   b51f6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b51f8:	d007      	beq.n	b520a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b51fa:	1a44      	subs	r4, r0, r1
   b51fc:	9802      	ldr	r0, [sp, #8]
   b51fe:	1ac0      	subs	r0, r0, r3
   b5200:	4344      	muls	r4, r0
   b5202:	1a50      	subs	r0, r2, r1
   b5204:	fb94 f0f0 	sdiv	r0, r4, r0
   b5208:	4418      	add	r0, r3
}
   b520a:	bd10      	pop	{r4, pc}

000b520c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b520c:	2100      	movs	r1, #0
   b520e:	f7ff bef3 	b.w	b4ff8 <system_delay_ms>

000b5212 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5212:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5214:	6883      	ldr	r3, [r0, #8]
   b5216:	4604      	mov	r4, r0
   b5218:	b90b      	cbnz	r3, b521e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b521a:	f001 f8db 	bl	b63d4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b521e:	68c3      	ldr	r3, [r0, #12]
   b5220:	4798      	blx	r3
      if (_M_manager)
   b5222:	68a3      	ldr	r3, [r4, #8]
   b5224:	b11b      	cbz	r3, b522e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5226:	2203      	movs	r2, #3
   b5228:	4621      	mov	r1, r4
   b522a:	4620      	mov	r0, r4
   b522c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b522e:	4620      	mov	r0, r4
   b5230:	2110      	movs	r1, #16
}
   b5232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5236:	f7fe bf32 	b.w	b409e <_ZdlPvj>

000b523a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b523a:	b510      	push	{r4, lr}
      if (_M_manager)
   b523c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b523e:	4604      	mov	r4, r0
      if (_M_manager)
   b5240:	b113      	cbz	r3, b5248 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5242:	2203      	movs	r2, #3
   b5244:	4601      	mov	r1, r0
   b5246:	4798      	blx	r3
    }
   b5248:	4620      	mov	r0, r4
   b524a:	bd10      	pop	{r4, pc}

000b524c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b524c:	b513      	push	{r0, r1, r4, lr}
   b524e:	460b      	mov	r3, r1
   b5250:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5252:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5256:	466c      	mov	r4, sp
   b5258:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b525c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5260:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5264:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5268:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b526c:	b002      	add	sp, #8
   b526e:	bd10      	pop	{r4, pc}

000b5270 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5270:	4802      	ldr	r0, [pc, #8]	; (b527c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5272:	2300      	movs	r3, #0
   b5274:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5276:	f7ff bd7f 	b.w	b4d78 <os_mutex_recursive_create>
   b527a:	bf00      	nop
   b527c:	2003e6b8 	.word	0x2003e6b8

000b5280 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5280:	4770      	bx	lr

000b5282 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5282:	2000      	movs	r0, #0
   b5284:	4770      	bx	lr

000b5286 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5286:	b510      	push	{r4, lr}
   b5288:	2110      	movs	r1, #16
   b528a:	4604      	mov	r4, r0
   b528c:	f7fe ff07 	bl	b409e <_ZdlPvj>
   b5290:	4620      	mov	r0, r4
   b5292:	bd10      	pop	{r4, pc}

000b5294 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5294:	b508      	push	{r3, lr}
      { delete this; }
   b5296:	f7ff fff6 	bl	b5286 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b529a:	bd08      	pop	{r3, pc}

000b529c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b529c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b529e:	2200      	movs	r2, #0
   b52a0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b52a4:	6002      	str	r2, [r0, #0]
   b52a6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b52a8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b52aa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b52ac:	680c      	ldr	r4, [r1, #0]
   b52ae:	8085      	strh	r5, [r0, #4]
   b52b0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b52b2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b52b4:	bd30      	pop	{r4, r5, pc}

000b52b6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b52b6:	b510      	push	{r4, lr}
   b52b8:	4604      	mov	r4, r0
    free((void*)msg_);
   b52ba:	6800      	ldr	r0, [r0, #0]
   b52bc:	f7ff ff62 	bl	b5184 <free>
}
   b52c0:	4620      	mov	r0, r4
   b52c2:	bd10      	pop	{r4, pc}

000b52c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b52c4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b52c6:	68c4      	ldr	r4, [r0, #12]
   b52c8:	b1f4      	cbz	r4, b5308 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b52ca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b52cc:	2b02      	cmp	r3, #2
   b52ce:	d103      	bne.n	b52d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b52d0:	f104 000c 	add.w	r0, r4, #12
   b52d4:	f7ff ffef 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b52d8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b52da:	b135      	cbz	r5, b52ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b52dc:	4628      	mov	r0, r5
   b52de:	f7ff ffac 	bl	b523a <_ZNSt14_Function_baseD1Ev>
   b52e2:	2110      	movs	r1, #16
   b52e4:	4628      	mov	r0, r5
   b52e6:	f7fe feda 	bl	b409e <_ZdlPvj>
   b52ea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b52ec:	b135      	cbz	r5, b52fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b52ee:	4628      	mov	r0, r5
   b52f0:	f7ff ffa3 	bl	b523a <_ZNSt14_Function_baseD1Ev>
   b52f4:	2110      	movs	r1, #16
   b52f6:	4628      	mov	r0, r5
   b52f8:	f7fe fed1 	bl	b409e <_ZdlPvj>
   b52fc:	4620      	mov	r0, r4
   b52fe:	2114      	movs	r1, #20
   b5300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5304:	f7fe becb 	b.w	b409e <_ZdlPvj>
   b5308:	bd38      	pop	{r3, r4, r5, pc}

000b530a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b530a:	b510      	push	{r4, lr}
   b530c:	b088      	sub	sp, #32
   b530e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b5310:	4668      	mov	r0, sp
   b5312:	f000 fd1a 	bl	b5d4a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b5316:	4669      	mov	r1, sp
   b5318:	a804      	add	r0, sp, #16
   b531a:	f000 fd39 	bl	b5d90 <_ZN6StringC1ERKS_>
   b531e:	a804      	add	r0, sp, #16
   b5320:	47a0      	blx	r4
   b5322:	4604      	mov	r4, r0
   b5324:	a804      	add	r0, sp, #16
   b5326:	f000 fcc5 	bl	b5cb4 <_ZN6StringD1Ev>
    String p(param);
   b532a:	4668      	mov	r0, sp
   b532c:	f000 fcc2 	bl	b5cb4 <_ZN6StringD1Ev>
}
   b5330:	4620      	mov	r0, r4
   b5332:	b008      	add	sp, #32
   b5334:	bd10      	pop	{r4, pc}

000b5336 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b5336:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b5338:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b533a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b533e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b5340:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b5342:	461a      	mov	r2, r3
   b5344:	4669      	mov	r1, sp
   b5346:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b5348:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b534c:	f8ad 4000 	strh.w	r4, [sp]
   b5350:	f7ff fe88 	bl	b5064 <spark_function>
}
   b5354:	b004      	add	sp, #16
   b5356:	bd10      	pop	{r4, pc}

000b5358 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5358:	680b      	ldr	r3, [r1, #0]
   b535a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b535c:	684b      	ldr	r3, [r1, #4]
   b535e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5360:	b113      	cbz	r3, b5368 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5362:	685a      	ldr	r2, [r3, #4]
   b5364:	3201      	adds	r2, #1
   b5366:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5368:	4770      	bx	lr

000b536a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b536a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b536c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b536e:	4668      	mov	r0, sp
   b5370:	460d      	mov	r5, r1
   b5372:	f7ff fff1 	bl	b5358 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5376:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5378:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b537a:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b537c:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b537e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5380:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5382:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5384:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5386:	f7fe ff3d 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b538a:	b135      	cbz	r5, b539a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b538c:	1d28      	adds	r0, r5, #4
   b538e:	f7fe ff39 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5392:	2108      	movs	r1, #8
   b5394:	4628      	mov	r0, r5
   b5396:	f7fe fe82 	bl	b409e <_ZdlPvj>
        return p;
    }
   b539a:	4620      	mov	r0, r4
   b539c:	b003      	add	sp, #12
   b539e:	bd30      	pop	{r4, r5, pc}

000b53a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b53a0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b53a2:	b510      	push	{r4, lr}
      if (_M_empty())
   b53a4:	b90a      	cbnz	r2, b53aa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b53a6:	f001 f815 	bl	b63d4 <_ZSt25__throw_bad_function_callv>
    }
   b53aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b53ae:	68c3      	ldr	r3, [r0, #12]
   b53b0:	4718      	bx	r3

000b53b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b53b2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b53b4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b53b6:	f100 0110 	add.w	r1, r0, #16
   b53ba:	f7ff fff1 	bl	b53a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b53be:	bd08      	pop	{r3, pc}

000b53c0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b53c0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b53c2:	b510      	push	{r4, lr}
      if (_M_empty())
   b53c4:	b90a      	cbnz	r2, b53ca <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b53c6:	f001 f805 	bl	b63d4 <_ZSt25__throw_bad_function_callv>
    }
   b53ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b53ce:	68c3      	ldr	r3, [r0, #12]
   b53d0:	4718      	bx	r3

000b53d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b53d2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b53d4:	6800      	ldr	r0, [r0, #0]
   b53d6:	f100 0110 	add.w	r1, r0, #16
   b53da:	f7ff fff1 	bl	b53c0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b53de:	bd08      	pop	{r3, pc}

000b53e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b53e0:	b538      	push	{r3, r4, r5, lr}
   b53e2:	2300      	movs	r3, #0
   b53e4:	4604      	mov	r4, r0
   b53e6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b53e8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b53ea:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b53ec:	f7fe fe53 	bl	b4096 <_Znwj>
   b53f0:	b128      	cbz	r0, b53fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b53f2:	2301      	movs	r3, #1
   b53f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b53f8:	4b02      	ldr	r3, [pc, #8]	; (b5404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b53fa:	6003      	str	r3, [r0, #0]
   b53fc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b53fe:	6020      	str	r0, [r4, #0]
	}
   b5400:	4620      	mov	r0, r4
   b5402:	bd38      	pop	{r3, r4, r5, pc}
   b5404:	000b732c 	.word	0x000b732c

000b5408 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5408:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b540a:	2300      	movs	r3, #0
   b540c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b540e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5410:	4604      	mov	r4, r0
   b5412:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5414:	b12b      	cbz	r3, b5422 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5416:	2202      	movs	r2, #2
   b5418:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b541a:	68eb      	ldr	r3, [r5, #12]
   b541c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b541e:	68ab      	ldr	r3, [r5, #8]
   b5420:	60a3      	str	r3, [r4, #8]
    }
   b5422:	4620      	mov	r0, r4
   b5424:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5428 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5428:	b5f0      	push	{r4, r5, r6, r7, lr}
   b542a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b542c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b542e:	4668      	mov	r0, sp
   b5430:	f7ff ff34 	bl	b529c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5434:	f04f 0302 	mov.w	r3, #2
   b5438:	e8d4 2f4f 	ldrexb	r2, [r4]
   b543c:	2a00      	cmp	r2, #0
   b543e:	d103      	bne.n	b5448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5440:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5444:	2900      	cmp	r1, #0
   b5446:	d1f7      	bne.n	b5438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5448:	d125      	bne.n	b5496 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b544a:	f104 050c 	add.w	r5, r4, #12
   b544e:	4669      	mov	r1, sp
   b5450:	4628      	mov	r0, r5
   b5452:	f7ff ff23 	bl	b529c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5456:	f3bf 8f5b 	dmb	ish
   b545a:	2301      	movs	r3, #1
   b545c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b545e:	2000      	movs	r0, #0
   b5460:	f104 0308 	add.w	r3, r4, #8
   b5464:	f3bf 8f5b 	dmb	ish
   b5468:	e853 6f00 	ldrex	r6, [r3]
   b546c:	e843 0200 	strex	r2, r0, [r3]
   b5470:	2a00      	cmp	r2, #0
   b5472:	d1f9      	bne.n	b5468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5474:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5478:	b16e      	cbz	r6, b5496 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b547a:	f7ff fdc5 	bl	b5008 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b547e:	b178      	cbz	r0, b54a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5480:	4629      	mov	r1, r5
   b5482:	4630      	mov	r0, r6
   b5484:	f7ff ff8c 	bl	b53a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5488:	4630      	mov	r0, r6
   b548a:	f7ff fed6 	bl	b523a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b548e:	2110      	movs	r1, #16
   b5490:	4630      	mov	r0, r6
   b5492:	f7fe fe04 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b5496:	4668      	mov	r0, sp
   b5498:	f7ff ff0d 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
    }
   b549c:	b009      	add	sp, #36	; 0x24
   b549e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b54a0:	4631      	mov	r1, r6
   b54a2:	a802      	add	r0, sp, #8
   b54a4:	f7ff ffb0 	bl	b5408 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b54a8:	68e0      	ldr	r0, [r4, #12]
   b54aa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b54ae:	b108      	cbz	r0, b54b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b54b0:	f001 fd90 	bl	b6fd4 <strdup>
        type_(type) {
   b54b4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b54b6:	2010      	movs	r0, #16
   b54b8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b54bc:	f7fe fdeb 	bl	b4096 <_Znwj>
   b54c0:	4605      	mov	r5, r0
   b54c2:	b1e8      	cbz	r0, b5500 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b54c4:	2700      	movs	r7, #0
   b54c6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54c8:	2018      	movs	r0, #24
   b54ca:	f7fe fde4 	bl	b4096 <_Znwj>
   b54ce:	4604      	mov	r4, r0
   b54d0:	b188      	cbz	r0, b54f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b54d2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b54d4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b54d6:	a802      	add	r0, sp, #8
   b54d8:	f7ff feb8 	bl	b524c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54dc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b54de:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b54e0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54e2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b54e4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b54e6:	a906      	add	r1, sp, #24
   b54e8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b54ea:	60e3      	str	r3, [r4, #12]
   b54ec:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b54f0:	9205      	str	r2, [sp, #20]
   b54f2:	f7ff fed3 	bl	b529c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b54f6:	4b08      	ldr	r3, [pc, #32]	; (b5518 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b54f8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b54fa:	4b08      	ldr	r3, [pc, #32]	; (b551c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54fc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b54fe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5500:	a806      	add	r0, sp, #24
   b5502:	f7ff fed8 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5506:	a802      	add	r0, sp, #8
   b5508:	f7ff fe97 	bl	b523a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b550c:	2200      	movs	r2, #0
   b550e:	4629      	mov	r1, r5
   b5510:	4803      	ldr	r0, [pc, #12]	; (b5520 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5512:	f7ff fd81 	bl	b5018 <application_thread_invoke>
   b5516:	e7b7      	b.n	b5488 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5518:	000b53b3 	.word	0x000b53b3
   b551c:	000b5635 	.word	0x000b5635
   b5520:	000b5213 	.word	0x000b5213

000b5524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5528:	b08b      	sub	sp, #44	; 0x2c
   b552a:	4605      	mov	r5, r0
   b552c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5530:	460f      	mov	r7, r1
   b5532:	4690      	mov	r8, r2
   b5534:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5536:	f7ff fda5 	bl	b5084 <spark_cloud_flag_connected>
   b553a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b553c:	4683      	mov	fp, r0
   b553e:	bb38      	cbnz	r0, b5590 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5540:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5544:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5546:	a905      	add	r1, sp, #20
   b5548:	4630      	mov	r0, r6
   b554a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b554e:	f7ff fea5 	bl	b529c <_ZN8particle5ErrorC1EOS0_>
   b5552:	2014      	movs	r0, #20
   b5554:	f7fe fd9f 	bl	b4096 <_Znwj>
   b5558:	4604      	mov	r4, r0
   b555a:	b148      	cbz	r0, b5570 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b555c:	2302      	movs	r3, #2
   b555e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5560:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5562:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5566:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5568:	4631      	mov	r1, r6
   b556a:	300c      	adds	r0, #12
   b556c:	f7ff fe96 	bl	b529c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5570:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5572:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5574:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5578:	f7ff ff32 	bl	b53e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b557c:	4630      	mov	r0, r6
   b557e:	f7ff fe9a 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5582:	a805      	add	r0, sp, #20
   b5584:	f7ff fe97 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5588:	4628      	mov	r0, r5
   b558a:	b00b      	add	sp, #44	; 0x2c
   b558c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5590:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5592:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5594:	2014      	movs	r0, #20
   b5596:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b559a:	9307      	str	r3, [sp, #28]
   b559c:	f7fe fd7b 	bl	b4096 <_Znwj>
   b55a0:	4601      	mov	r1, r0
   b55a2:	b118      	cbz	r0, b55ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b55a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b55a8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b55aa:	7044      	strb	r4, [r0, #1]
   b55ac:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b55ae:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b55b0:	f7ff ff16 	bl	b53e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b55b4:	4b1e      	ldr	r3, [pc, #120]	; (b5630 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b55b6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b55b8:	2008      	movs	r0, #8
   b55ba:	f7fe fd6c 	bl	b4096 <_Znwj>
   b55be:	4604      	mov	r4, r0
   b55c0:	b110      	cbz	r0, b55c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b55c2:	a903      	add	r1, sp, #12
   b55c4:	f7ff fec8 	bl	b5358 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b55c8:	9600      	str	r6, [sp, #0]
   b55ca:	fa5f f38a 	uxtb.w	r3, sl
   b55ce:	464a      	mov	r2, r9
   b55d0:	4641      	mov	r1, r8
   b55d2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b55d4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b55d6:	f7ff fd5d 	bl	b5094 <spark_send_event>
   b55da:	b9b8      	cbnz	r0, b560c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b55dc:	9b03      	ldr	r3, [sp, #12]
   b55de:	785b      	ldrb	r3, [r3, #1]
   b55e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b55e4:	b993      	cbnz	r3, b560c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b55e6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b55ea:	a905      	add	r1, sp, #20
   b55ec:	a803      	add	r0, sp, #12
   b55ee:	9205      	str	r2, [sp, #20]
   b55f0:	f8ad 3018 	strh.w	r3, [sp, #24]
   b55f4:	f7ff ff18 	bl	b5428 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b55f8:	a805      	add	r0, sp, #20
   b55fa:	f7ff fe5c 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b55fe:	a805      	add	r0, sp, #20
   b5600:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5602:	f7ff feb2 	bl	b536a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5606:	a806      	add	r0, sp, #24
   b5608:	f7fe fdfc 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b560c:	a903      	add	r1, sp, #12
   b560e:	a805      	add	r0, sp, #20
   b5610:	f7ff fea2 	bl	b5358 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5614:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5616:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5618:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b561a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b561c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b561e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5620:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5622:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5624:	f7fe fdee 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5628:	a804      	add	r0, sp, #16
   b562a:	f7fe fdeb 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b562e:	e7ab      	b.n	b5588 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5630:	000b56b1 	.word	0x000b56b1

000b5634 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5634:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5638:	4605      	mov	r5, r0
	switch (__op)
   b563a:	d103      	bne.n	b5644 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b563c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b563e:	6003      	str	r3, [r0, #0]
      }
   b5640:	2000      	movs	r0, #0
   b5642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5644:	2a02      	cmp	r2, #2
   b5646:	d010      	beq.n	b566a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5648:	2a03      	cmp	r2, #3
   b564a:	d1f9      	bne.n	b5640 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b564c:	6804      	ldr	r4, [r0, #0]
   b564e:	2c00      	cmp	r4, #0
   b5650:	d0f6      	beq.n	b5640 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5652:	f104 0010 	add.w	r0, r4, #16
   b5656:	f7ff fe2e 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b565a:	4620      	mov	r0, r4
   b565c:	f7ff fded 	bl	b523a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5660:	2118      	movs	r1, #24
   b5662:	4620      	mov	r0, r4
   b5664:	f7fe fd1b 	bl	b409e <_ZdlPvj>
   b5668:	e7ea      	b.n	b5640 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b566a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b566c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b566e:	f7fe fd12 	bl	b4096 <_Znwj>
   b5672:	4604      	mov	r4, r0
   b5674:	b150      	cbz	r0, b568c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5676:	4631      	mov	r1, r6
   b5678:	f7ff fec6 	bl	b5408 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b567c:	6930      	ldr	r0, [r6, #16]
   b567e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5682:	b108      	cbz	r0, b5688 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5684:	f001 fca6 	bl	b6fd4 <strdup>
        type_(type) {
   b5688:	6120      	str	r0, [r4, #16]
   b568a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b568c:	602c      	str	r4, [r5, #0]
	}
   b568e:	e7d7      	b.n	b5640 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5690 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5690:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5692:	2300      	movs	r3, #0
   b5694:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5696:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5698:	4604      	mov	r4, r0
   b569a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b569c:	b12b      	cbz	r3, b56aa <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b569e:	2202      	movs	r2, #2
   b56a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b56a2:	68eb      	ldr	r3, [r5, #12]
   b56a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b56a6:	68ab      	ldr	r3, [r5, #8]
   b56a8:	60a3      	str	r3, [r4, #8]
    }
   b56aa:	4620      	mov	r0, r4
   b56ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b56b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b56b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b56b2:	b089      	sub	sp, #36	; 0x24
   b56b4:	4604      	mov	r4, r0
   b56b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b56b8:	a801      	add	r0, sp, #4
   b56ba:	4611      	mov	r1, r2
   b56bc:	f7ff fe55 	bl	b536a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b56c0:	b1a4      	cbz	r4, b56ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b56c2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b56c4:	b11d      	cbz	r5, b56ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b56c6:	4628      	mov	r0, r5
   b56c8:	f001 fc84 	bl	b6fd4 <strdup>
   b56cc:	4605      	mov	r5, r0
   b56ce:	a801      	add	r0, sp, #4
   b56d0:	a903      	add	r1, sp, #12
        type_(type) {
   b56d2:	9503      	str	r5, [sp, #12]
   b56d4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b56d8:	f7ff fea6 	bl	b5428 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b56dc:	a803      	add	r0, sp, #12
   b56de:	f7ff fdea 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
   b56e2:	a802      	add	r0, sp, #8
   b56e4:	f7fe fd8e 	bl	b4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b56e8:	b009      	add	sp, #36	; 0x24
   b56ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b56ec:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b56ee:	2301      	movs	r3, #1
   b56f0:	e8d5 2f4f 	ldrexb	r2, [r5]
   b56f4:	2a00      	cmp	r2, #0
   b56f6:	d103      	bne.n	b5700 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b56f8:	e8c5 3f41 	strexb	r1, r3, [r5]
   b56fc:	2900      	cmp	r1, #0
   b56fe:	d1f7      	bne.n	b56f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5700:	d1ef      	bne.n	b56e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5702:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5704:	f3bf 8f5b 	dmb	ish
   b5708:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b570a:	1d2b      	adds	r3, r5, #4
   b570c:	f3bf 8f5b 	dmb	ish
   b5710:	e853 6f00 	ldrex	r6, [r3]
   b5714:	e843 4200 	strex	r2, r4, [r3]
   b5718:	2a00      	cmp	r2, #0
   b571a:	d1f9      	bne.n	b5710 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b571c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5720:	2e00      	cmp	r6, #0
   b5722:	d0de      	beq.n	b56e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5724:	4620      	mov	r0, r4
   b5726:	f7ff fc6f 	bl	b5008 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b572a:	4607      	mov	r7, r0
   b572c:	b160      	cbz	r0, b5748 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b572e:	f105 010c 	add.w	r1, r5, #12
   b5732:	4630      	mov	r0, r6
   b5734:	f7ff fe44 	bl	b53c0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5738:	4630      	mov	r0, r6
   b573a:	f7ff fd7e 	bl	b523a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b573e:	2110      	movs	r1, #16
   b5740:	4630      	mov	r0, r6
   b5742:	f7fe fcac 	bl	b409e <_ZdlPvj>
   b5746:	e7cc      	b.n	b56e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5748:	4631      	mov	r1, r6
   b574a:	a803      	add	r0, sp, #12
   b574c:	f7ff ffa0 	bl	b5690 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5750:	7b2b      	ldrb	r3, [r5, #12]
   b5752:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5756:	2010      	movs	r0, #16
   b5758:	f7fe fc9d 	bl	b4096 <_Znwj>
   b575c:	4605      	mov	r5, r0
   b575e:	b1d0      	cbz	r0, b5796 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5760:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5762:	2014      	movs	r0, #20
   b5764:	f7fe fc97 	bl	b4096 <_Znwj>
   b5768:	4604      	mov	r4, r0
   b576a:	b178      	cbz	r0, b578c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b576c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b576e:	4601      	mov	r1, r0
   b5770:	a803      	add	r0, sp, #12
   b5772:	f7ff fd6b 	bl	b524c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5776:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5778:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b577a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b577c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b577e:	9205      	str	r2, [sp, #20]
   b5780:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5782:	60e3      	str	r3, [r4, #12]
   b5784:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5788:	9206      	str	r2, [sp, #24]
   b578a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b578c:	4b06      	ldr	r3, [pc, #24]	; (b57a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b578e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5790:	4b06      	ldr	r3, [pc, #24]	; (b57ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5792:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5794:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5796:	a803      	add	r0, sp, #12
   b5798:	f7ff fd4f 	bl	b523a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b579c:	2200      	movs	r2, #0
   b579e:	4629      	mov	r1, r5
   b57a0:	4803      	ldr	r0, [pc, #12]	; (b57b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b57a2:	f7ff fc39 	bl	b5018 <application_thread_invoke>
   b57a6:	e7c7      	b.n	b5738 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b57a8:	000b53d3 	.word	0x000b53d3
   b57ac:	000b57b5 	.word	0x000b57b5
   b57b0:	000b5213 	.word	0x000b5213

000b57b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b57b4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b57b6:	b570      	push	{r4, r5, r6, lr}
   b57b8:	4604      	mov	r4, r0
	switch (__op)
   b57ba:	d103      	bne.n	b57c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b57bc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b57be:	6003      	str	r3, [r0, #0]
      }
   b57c0:	2000      	movs	r0, #0
   b57c2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b57c4:	2a02      	cmp	r2, #2
   b57c6:	d00c      	beq.n	b57e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b57c8:	2a03      	cmp	r2, #3
   b57ca:	d1f9      	bne.n	b57c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b57cc:	6804      	ldr	r4, [r0, #0]
   b57ce:	2c00      	cmp	r4, #0
   b57d0:	d0f6      	beq.n	b57c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b57d2:	4620      	mov	r0, r4
   b57d4:	f7ff fd31 	bl	b523a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b57d8:	2114      	movs	r1, #20
   b57da:	4620      	mov	r0, r4
   b57dc:	f7fe fc5f 	bl	b409e <_ZdlPvj>
   b57e0:	e7ee      	b.n	b57c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b57e2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b57e4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b57e6:	f7fe fc56 	bl	b4096 <_Znwj>
   b57ea:	4605      	mov	r5, r0
   b57ec:	b120      	cbz	r0, b57f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b57ee:	4631      	mov	r1, r6
   b57f0:	f7ff ff4e 	bl	b5690 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b57f4:	7c33      	ldrb	r3, [r6, #16]
   b57f6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b57f8:	6025      	str	r5, [r4, #0]
	}
   b57fa:	e7e1      	b.n	b57c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b57fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b57fc:	2200      	movs	r2, #0
   b57fe:	6840      	ldr	r0, [r0, #4]
   b5800:	4611      	mov	r1, r2
   b5802:	f7ff bc8f 	b.w	b5124 <network_listening>

000b5806 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5806:	2200      	movs	r2, #0
   b5808:	6840      	ldr	r0, [r0, #4]
   b580a:	4611      	mov	r1, r2
   b580c:	f7ff bc9a 	b.w	b5144 <network_get_listen_timeout>

000b5810 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5810:	6840      	ldr	r0, [r0, #4]
   b5812:	2200      	movs	r2, #0
   b5814:	f7ff bc8e 	b.w	b5134 <network_set_listen_timeout>

000b5818 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5818:	6840      	ldr	r0, [r0, #4]
   b581a:	2200      	movs	r2, #0
   b581c:	f081 0101 	eor.w	r1, r1, #1
   b5820:	f7ff bc78 	b.w	b5114 <network_listen>

000b5824 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5824:	2300      	movs	r3, #0
   b5826:	6840      	ldr	r0, [r0, #4]
   b5828:	461a      	mov	r2, r3
   b582a:	4619      	mov	r1, r3
   b582c:	f7ff bc6a 	b.w	b5104 <network_off>

000b5830 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5830:	2300      	movs	r3, #0
   b5832:	6840      	ldr	r0, [r0, #4]
   b5834:	461a      	mov	r2, r3
   b5836:	4619      	mov	r1, r3
   b5838:	f7ff bc5c 	b.w	b50f4 <network_on>

000b583c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b583c:	2200      	movs	r2, #0
   b583e:	6840      	ldr	r0, [r0, #4]
   b5840:	4611      	mov	r1, r2
   b5842:	f7ff bc4f 	b.w	b50e4 <network_ready>

000b5846 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5846:	2200      	movs	r2, #0
   b5848:	6840      	ldr	r0, [r0, #4]
   b584a:	4611      	mov	r1, r2
   b584c:	f7ff bc3a 	b.w	b50c4 <network_connecting>

000b5850 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5850:	6840      	ldr	r0, [r0, #4]
   b5852:	2200      	movs	r2, #0
   b5854:	2102      	movs	r1, #2
   b5856:	f7ff bc3d 	b.w	b50d4 <network_disconnect>

000b585a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b585a:	2300      	movs	r3, #0
   b585c:	6840      	ldr	r0, [r0, #4]
   b585e:	461a      	mov	r2, r3
   b5860:	f7ff bc28 	b.w	b50b4 <network_connect>

000b5864 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5864:	4b02      	ldr	r3, [pc, #8]	; (b5870 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5866:	2203      	movs	r2, #3
   b5868:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b586a:	4a02      	ldr	r2, [pc, #8]	; (b5874 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b586c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b586e:	4770      	bx	lr
   b5870:	2003e6bc 	.word	0x2003e6bc
   b5874:	000b7348 	.word	0x000b7348

000b5878 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5878:	4770      	bx	lr

000b587a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b587a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b587c:	4606      	mov	r6, r0
   b587e:	4615      	mov	r5, r2
   b5880:	460c      	mov	r4, r1
   b5882:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5884:	42bc      	cmp	r4, r7
   b5886:	d006      	beq.n	b5896 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5888:	6833      	ldr	r3, [r6, #0]
   b588a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b588e:	689b      	ldr	r3, [r3, #8]
   b5890:	4630      	mov	r0, r6
   b5892:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5894:	e7f6      	b.n	b5884 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5896:	4628      	mov	r0, r5
   b5898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b589a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b589a:	7c00      	ldrb	r0, [r0, #16]
   b589c:	2200      	movs	r2, #0
   b589e:	f7ff bac3 	b.w	b4e28 <hal_i2c_write>

000b58a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b58a2:	7c00      	ldrb	r0, [r0, #16]
   b58a4:	2100      	movs	r1, #0
   b58a6:	f7ff bac7 	b.w	b4e38 <hal_i2c_available>

000b58aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b58aa:	7c00      	ldrb	r0, [r0, #16]
   b58ac:	2100      	movs	r1, #0
   b58ae:	f7ff bacb 	b.w	b4e48 <hal_i2c_read>

000b58b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b58b2:	7c00      	ldrb	r0, [r0, #16]
   b58b4:	2100      	movs	r1, #0
   b58b6:	f7ff bacf 	b.w	b4e58 <hal_i2c_peek>

000b58ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b58ba:	7c00      	ldrb	r0, [r0, #16]
   b58bc:	2100      	movs	r1, #0
   b58be:	f7ff bad3 	b.w	b4e68 <hal_i2c_flush>

000b58c2 <_ZN7TwoWireD0Ev>:
   b58c2:	b510      	push	{r4, lr}
   b58c4:	2114      	movs	r1, #20
   b58c6:	4604      	mov	r4, r0
   b58c8:	f7fe fbe9 	bl	b409e <_ZdlPvj>
   b58cc:	4620      	mov	r0, r4
   b58ce:	bd10      	pop	{r4, pc}

000b58d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b58d0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b58d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58d6:	4604      	mov	r4, r0
   b58d8:	4608      	mov	r0, r1
   b58da:	2100      	movs	r1, #0
   b58dc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b58e0:	4b03      	ldr	r3, [pc, #12]	; (b58f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b58e2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b58e4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b58e6:	4611      	mov	r1, r2
   b58e8:	f7ff face 	bl	b4e88 <hal_i2c_init>
}
   b58ec:	4620      	mov	r0, r4
   b58ee:	bd10      	pop	{r4, pc}
   b58f0:	000b7384 	.word	0x000b7384

000b58f4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b58f4:	2300      	movs	r3, #0
   b58f6:	7c00      	ldrb	r0, [r0, #16]
   b58f8:	461a      	mov	r2, r3
   b58fa:	4619      	mov	r1, r3
   b58fc:	f7ff ba7c 	b.w	b4df8 <hal_i2c_begin>

000b5900 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5900:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5902:	2200      	movs	r2, #0
   b5904:	2314      	movs	r3, #20
   b5906:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b590a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b590e:	780b      	ldrb	r3, [r1, #0]
   b5910:	f88d 3008 	strb.w	r3, [sp, #8]
   b5914:	684b      	ldr	r3, [r1, #4]
   b5916:	9303      	str	r3, [sp, #12]
   b5918:	68cb      	ldr	r3, [r1, #12]
   b591a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b591c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b591e:	7a0b      	ldrb	r3, [r1, #8]
   b5920:	9305      	str	r3, [sp, #20]
   b5922:	a901      	add	r1, sp, #4
   b5924:	f7ff fab8 	bl	b4e98 <hal_i2c_request_ex>
}
   b5928:	b007      	add	sp, #28
   b592a:	f85d fb04 	ldr.w	pc, [sp], #4

000b592e <_ZN7TwoWire11requestFromEhjh>:
{
   b592e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5930:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5932:	f88d 1000 	strb.w	r1, [sp]
   b5936:	f04f 0164 	mov.w	r1, #100	; 0x64
   b593a:	9103      	str	r1, [sp, #12]
   b593c:	bf18      	it	ne
   b593e:	2301      	movne	r3, #1
   b5940:	4669      	mov	r1, sp
    size_ = size;
   b5942:	9201      	str	r2, [sp, #4]
   b5944:	f88d 3008 	strb.w	r3, [sp, #8]
   b5948:	f7ff ffda 	bl	b5900 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b594c:	b005      	add	sp, #20
   b594e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5952 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5952:	2301      	movs	r3, #1
   b5954:	f7ff bfeb 	b.w	b592e <_ZN7TwoWire11requestFromEhjh>

000b5958 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5958:	7c00      	ldrb	r0, [r0, #16]
   b595a:	2200      	movs	r2, #0
   b595c:	f7ff ba54 	b.w	b4e08 <hal_i2c_begin_transmission>

000b5960 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5960:	7c00      	ldrb	r0, [r0, #16]
   b5962:	2200      	movs	r2, #0
   b5964:	f7ff ba58 	b.w	b4e18 <hal_i2c_end_transmission>

000b5968 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5968:	2101      	movs	r1, #1
   b596a:	f7ff bff9 	b.w	b5960 <_ZN7TwoWire15endTransmissionEh>

000b596e <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b596e:	4770      	bx	lr

000b5970 <_ZN9IPAddressD0Ev>:
   b5970:	b510      	push	{r4, lr}
   b5972:	2118      	movs	r1, #24
   b5974:	4604      	mov	r4, r0
   b5976:	f7fe fb92 	bl	b409e <_ZdlPvj>
   b597a:	4620      	mov	r0, r4
   b597c:	bd10      	pop	{r4, pc}

000b597e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b597e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5980:	7d03      	ldrb	r3, [r0, #20]
   b5982:	2b06      	cmp	r3, #6
{
   b5984:	b08d      	sub	sp, #52	; 0x34
   b5986:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5988:	f100 0704 	add.w	r7, r0, #4
   b598c:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5990:	d012      	beq.n	b59b8 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5992:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5996:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b599a:	220a      	movs	r2, #10
   b599c:	4630      	mov	r0, r6
   b599e:	f000 f95a 	bl	b5c56 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b59a2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b59a4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b59a6:	d019      	beq.n	b59dc <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b59a8:	2c00      	cmp	r4, #0
   b59aa:	d0f4      	beq.n	b5996 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b59ac:	212e      	movs	r1, #46	; 0x2e
   b59ae:	4630      	mov	r0, r6
   b59b0:	f000 f938 	bl	b5c24 <_ZN5Print5printEc>
   b59b4:	4404      	add	r4, r0
   b59b6:	e7ee      	b.n	b5996 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59b8:	232f      	movs	r3, #47	; 0x2f
   b59ba:	466a      	mov	r2, sp
   b59bc:	4639      	mov	r1, r7
   b59be:	200a      	movs	r0, #10
		buf[0] = 0;
   b59c0:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59c4:	f7ff fa70 	bl	b4ea8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b59c8:	4668      	mov	r0, sp
   b59ca:	f001 fb20 	bl	b700e <strlen>
   b59ce:	6833      	ldr	r3, [r6, #0]
   b59d0:	4602      	mov	r2, r0
   b59d2:	68db      	ldr	r3, [r3, #12]
   b59d4:	4669      	mov	r1, sp
   b59d6:	4630      	mov	r0, r6
   b59d8:	4798      	blx	r3
   b59da:	4604      	mov	r4, r0
    }
    return n;
}
   b59dc:	4620      	mov	r0, r4
   b59de:	b00d      	add	sp, #52	; 0x34
   b59e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b59e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b59e4:	b510      	push	{r4, lr}
   b59e6:	4b05      	ldr	r3, [pc, #20]	; (b59fc <_ZN9IPAddressC1Ev+0x18>)
   b59e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b59ea:	2211      	movs	r2, #17
   b59ec:	f840 3b04 	str.w	r3, [r0], #4
   b59f0:	2100      	movs	r1, #0
   b59f2:	f001 faaf 	bl	b6f54 <memset>
}
   b59f6:	4620      	mov	r0, r4
   b59f8:	bd10      	pop	{r4, pc}
   b59fa:	bf00      	nop
   b59fc:	000b73ac 	.word	0x000b73ac

000b5a00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5a00:	4603      	mov	r3, r0
   b5a02:	4a07      	ldr	r2, [pc, #28]	; (b5a20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5a04:	b510      	push	{r4, lr}
   b5a06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5a0a:	f101 0210 	add.w	r2, r1, #16
   b5a0e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5a12:	f843 4b04 	str.w	r4, [r3], #4
   b5a16:	4291      	cmp	r1, r2
   b5a18:	d1f9      	bne.n	b5a0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5a1a:	780a      	ldrb	r2, [r1, #0]
   b5a1c:	701a      	strb	r2, [r3, #0]
}
   b5a1e:	bd10      	pop	{r4, pc}
   b5a20:	000b73ac 	.word	0x000b73ac

000b5a24 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5a24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5a26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5a2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5a2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5a32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5a36:	2304      	movs	r3, #4
   b5a38:	6041      	str	r1, [r0, #4]
   b5a3a:	7503      	strb	r3, [r0, #20]
}
   b5a3c:	bd10      	pop	{r4, pc}
	...

000b5a40 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5a40:	b507      	push	{r0, r1, r2, lr}
   b5a42:	4b06      	ldr	r3, [pc, #24]	; (b5a5c <_ZN9IPAddressC1EPKh+0x1c>)
   b5a44:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5a46:	78cb      	ldrb	r3, [r1, #3]
   b5a48:	9300      	str	r3, [sp, #0]
   b5a4a:	788b      	ldrb	r3, [r1, #2]
   b5a4c:	784a      	ldrb	r2, [r1, #1]
   b5a4e:	7809      	ldrb	r1, [r1, #0]
   b5a50:	f7ff ffe8 	bl	b5a24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5a54:	b003      	add	sp, #12
   b5a56:	f85d fb04 	ldr.w	pc, [sp], #4
   b5a5a:	bf00      	nop
   b5a5c:	000b73ac 	.word	0x000b73ac

000b5a60 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5a60:	4b01      	ldr	r3, [pc, #4]	; (b5a68 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5a62:	4a02      	ldr	r2, [pc, #8]	; (b5a6c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5a64:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5a66:	4770      	bx	lr
   b5a68:	2003e6c4 	.word	0x2003e6c4
   b5a6c:	000b73b8 	.word	0x000b73b8

000b5a70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5a70:	2300      	movs	r3, #0
   b5a72:	6840      	ldr	r0, [r0, #4]
   b5a74:	461a      	mov	r2, r3
   b5a76:	f7ff bb1d 	b.w	b50b4 <network_connect>

000b5a7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5a7a:	6840      	ldr	r0, [r0, #4]
   b5a7c:	2200      	movs	r2, #0
   b5a7e:	2102      	movs	r1, #2
   b5a80:	f7ff bb28 	b.w	b50d4 <network_disconnect>

000b5a84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5a84:	2200      	movs	r2, #0
   b5a86:	6840      	ldr	r0, [r0, #4]
   b5a88:	4611      	mov	r1, r2
   b5a8a:	f7ff bb1b 	b.w	b50c4 <network_connecting>

000b5a8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5a8e:	2200      	movs	r2, #0
   b5a90:	6840      	ldr	r0, [r0, #4]
   b5a92:	4611      	mov	r1, r2
   b5a94:	f7ff bb26 	b.w	b50e4 <network_ready>

000b5a98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5a98:	2300      	movs	r3, #0
   b5a9a:	6840      	ldr	r0, [r0, #4]
   b5a9c:	461a      	mov	r2, r3
   b5a9e:	4619      	mov	r1, r3
   b5aa0:	f7ff bb28 	b.w	b50f4 <network_on>

000b5aa4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5aa4:	2300      	movs	r3, #0
   b5aa6:	6840      	ldr	r0, [r0, #4]
   b5aa8:	461a      	mov	r2, r3
   b5aaa:	4619      	mov	r1, r3
   b5aac:	f7ff bb2a 	b.w	b5104 <network_off>

000b5ab0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5ab0:	6840      	ldr	r0, [r0, #4]
   b5ab2:	2100      	movs	r1, #0
   b5ab4:	f7ff bb4e 	b.w	b5154 <network_is_on>

000b5ab8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5ab8:	6840      	ldr	r0, [r0, #4]
   b5aba:	2100      	movs	r1, #0
   b5abc:	f7ff bb52 	b.w	b5164 <network_is_off>

000b5ac0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5ac0:	6840      	ldr	r0, [r0, #4]
   b5ac2:	2200      	movs	r2, #0
   b5ac4:	f081 0101 	eor.w	r1, r1, #1
   b5ac8:	f7ff bb24 	b.w	b5114 <network_listen>

000b5acc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5acc:	6840      	ldr	r0, [r0, #4]
   b5ace:	2200      	movs	r2, #0
   b5ad0:	f7ff bb30 	b.w	b5134 <network_set_listen_timeout>

000b5ad4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5ad4:	2200      	movs	r2, #0
   b5ad6:	6840      	ldr	r0, [r0, #4]
   b5ad8:	4611      	mov	r1, r2
   b5ada:	f7ff bb33 	b.w	b5144 <network_get_listen_timeout>

000b5ade <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5ade:	2200      	movs	r2, #0
   b5ae0:	6840      	ldr	r0, [r0, #4]
   b5ae2:	4611      	mov	r1, r2
   b5ae4:	f7ff bb1e 	b.w	b5124 <network_listening>

000b5ae8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5aec:	b095      	sub	sp, #84	; 0x54
   b5aee:	4614      	mov	r4, r2
   b5af0:	460d      	mov	r5, r1
   b5af2:	4607      	mov	r7, r0
    IPAddress addr;
   b5af4:	f7ff ff76 	bl	b59e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5af8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5afa:	221c      	movs	r2, #28
   b5afc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5afe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5b00:	f001 fa28 	bl	b6f54 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5b04:	2340      	movs	r3, #64	; 0x40
   b5b06:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5b08:	4620      	mov	r0, r4
   b5b0a:	466b      	mov	r3, sp
   b5b0c:	aa0c      	add	r2, sp, #48	; 0x30
   b5b0e:	2100      	movs	r1, #0
   b5b10:	f7ff f9da 	bl	b4ec8 <netdb_getaddrinfo>
    if (!r) {
   b5b14:	4604      	mov	r4, r0
   b5b16:	2800      	cmp	r0, #0
   b5b18:	d14b      	bne.n	b5bb2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b1a:	4602      	mov	r2, r0
   b5b1c:	2101      	movs	r1, #1
   b5b1e:	6868      	ldr	r0, [r5, #4]
   b5b20:	f7ff fae0 	bl	b50e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b24:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b26:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b28:	4622      	mov	r2, r4
   b5b2a:	6868      	ldr	r0, [r5, #4]
   b5b2c:	f7ff fada 	bl	b50e4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b30:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b32:	4681      	mov	r9, r0
        bool ok = false;
   b5b34:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b36:	2e00      	cmp	r6, #0
   b5b38:	d03b      	beq.n	b5bb2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5b3a:	2900      	cmp	r1, #0
   b5b3c:	d139      	bne.n	b5bb2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5b3e:	6873      	ldr	r3, [r6, #4]
   b5b40:	2b02      	cmp	r3, #2
   b5b42:	d003      	beq.n	b5b4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5b44:	2b0a      	cmp	r3, #10
   b5b46:	d011      	beq.n	b5b6c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b48:	69f6      	ldr	r6, [r6, #28]
   b5b4a:	e7f4      	b.n	b5b36 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5b4c:	f1b8 0f00 	cmp.w	r8, #0
   b5b50:	d0fa      	beq.n	b5b48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5b52:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5b54:	a806      	add	r0, sp, #24
   b5b56:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5b58:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5b5a:	f7ff ff71 	bl	b5a40 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b60:	1d3c      	adds	r4, r7, #4
   b5b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b64:	682b      	ldr	r3, [r5, #0]
   b5b66:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b68:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5b6a:	e7ed      	b.n	b5b48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5b6c:	f1b9 0f00 	cmp.w	r9, #0
   b5b70:	d0ea      	beq.n	b5b48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5b72:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5b74:	2210      	movs	r2, #16
   b5b76:	a801      	add	r0, sp, #4
   b5b78:	f001 f9ec 	bl	b6f54 <memset>
                    a.v = 6;
   b5b7c:	2306      	movs	r3, #6
   b5b7e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b82:	ad01      	add	r5, sp, #4
   b5b84:	f104 0308 	add.w	r3, r4, #8
   b5b88:	3418      	adds	r4, #24
   b5b8a:	6818      	ldr	r0, [r3, #0]
   b5b8c:	6859      	ldr	r1, [r3, #4]
   b5b8e:	462a      	mov	r2, r5
   b5b90:	c203      	stmia	r2!, {r0, r1}
   b5b92:	3308      	adds	r3, #8
   b5b94:	42a3      	cmp	r3, r4
   b5b96:	4615      	mov	r5, r2
   b5b98:	d1f7      	bne.n	b5b8a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5b9a:	a901      	add	r1, sp, #4
   b5b9c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5b9e:	ad07      	add	r5, sp, #28
   b5ba0:	f7ff ff2e 	bl	b5a00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ba6:	1d3c      	adds	r4, r7, #4
   b5ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5baa:	682b      	ldr	r3, [r5, #0]
   b5bac:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5bae:	4649      	mov	r1, r9
   b5bb0:	e7ca      	b.n	b5b48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5bb2:	9800      	ldr	r0, [sp, #0]
   b5bb4:	f7ff f980 	bl	b4eb8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5bb8:	4638      	mov	r0, r7
   b5bba:	b015      	add	sp, #84	; 0x54
   b5bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5bc0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5bc0:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5bc2:	4a03      	ldr	r2, [pc, #12]	; (b5bd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5bc4:	601a      	str	r2, [r3, #0]
   b5bc6:	2200      	movs	r2, #0
   b5bc8:	605a      	str	r2, [r3, #4]

} // spark
   b5bca:	4770      	bx	lr
   b5bcc:	2003e6c8 	.word	0x2003e6c8
   b5bd0:	000b73c4 	.word	0x000b73c4

000b5bd4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bd6:	4606      	mov	r6, r0
   b5bd8:	460d      	mov	r5, r1
  size_t n = 0;
   b5bda:	188f      	adds	r7, r1, r2
   b5bdc:	2400      	movs	r4, #0
  while (size--) {
   b5bde:	42bd      	cmp	r5, r7
   b5be0:	d00c      	beq.n	b5bfc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5be2:	6833      	ldr	r3, [r6, #0]
   b5be4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5be8:	689b      	ldr	r3, [r3, #8]
   b5bea:	4630      	mov	r0, r6
   b5bec:	4798      	blx	r3
     if (chunk>=0)
   b5bee:	1e03      	subs	r3, r0, #0
   b5bf0:	db01      	blt.n	b5bf6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5bf2:	441c      	add	r4, r3
  while (size--) {
   b5bf4:	e7f3      	b.n	b5bde <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5bf6:	2c00      	cmp	r4, #0
   b5bf8:	bf08      	it	eq
   b5bfa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5bfc:	4620      	mov	r0, r4
   b5bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c00 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5c00:	b513      	push	{r0, r1, r4, lr}
   b5c02:	4604      	mov	r4, r0
    }
   b5c04:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5c06:	b159      	cbz	r1, b5c20 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5c08:	9101      	str	r1, [sp, #4]
   b5c0a:	f001 fa00 	bl	b700e <strlen>
   b5c0e:	6823      	ldr	r3, [r4, #0]
   b5c10:	9901      	ldr	r1, [sp, #4]
   b5c12:	68db      	ldr	r3, [r3, #12]
   b5c14:	4602      	mov	r2, r0
   b5c16:	4620      	mov	r0, r4
    }
   b5c18:	b002      	add	sp, #8
   b5c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5c1e:	4718      	bx	r3
    }
   b5c20:	b002      	add	sp, #8
   b5c22:	bd10      	pop	{r4, pc}

000b5c24 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5c24:	6803      	ldr	r3, [r0, #0]
   b5c26:	689b      	ldr	r3, [r3, #8]
   b5c28:	4718      	bx	r3

000b5c2a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5c2a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5c2c:	210d      	movs	r1, #13
{
   b5c2e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5c30:	f7ff fff8 	bl	b5c24 <_ZN5Print5printEc>
  n += print('\n');
   b5c34:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5c36:	4604      	mov	r4, r0
  n += print('\n');
   b5c38:	4628      	mov	r0, r5
   b5c3a:	f7ff fff3 	bl	b5c24 <_ZN5Print5printEc>
  return n;
}
   b5c3e:	4420      	add	r0, r4
   b5c40:	bd38      	pop	{r3, r4, r5, pc}

000b5c42 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5c42:	b538      	push	{r3, r4, r5, lr}
   b5c44:	4605      	mov	r5, r0
  return write(str);
   b5c46:	f7ff ffdb 	bl	b5c00 <_ZN5Print5writeEPKc>
   b5c4a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5c4c:	4628      	mov	r0, r5
   b5c4e:	f7ff ffec 	bl	b5c2a <_ZN5Print7printlnEv>
  return n;
}
   b5c52:	4420      	add	r0, r4
   b5c54:	bd38      	pop	{r3, r4, r5, pc}

000b5c56 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5c56:	b530      	push	{r4, r5, lr}
   b5c58:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5c5a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5c5c:	2a01      	cmp	r2, #1
  *str = '\0';
   b5c5e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5c62:	bf98      	it	ls
   b5c64:	220a      	movls	r2, #10
   b5c66:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5c68:	460d      	mov	r5, r1
   b5c6a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5c6e:	fb01 5312 	mls	r3, r1, r2, r5
   b5c72:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c76:	2b09      	cmp	r3, #9
   b5c78:	bf94      	ite	ls
   b5c7a:	3330      	addls	r3, #48	; 0x30
   b5c7c:	3337      	addhi	r3, #55	; 0x37
   b5c7e:	b2db      	uxtb	r3, r3
  } while(n);
   b5c80:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c82:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5c86:	d9ef      	bls.n	b5c68 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5c88:	4621      	mov	r1, r4
   b5c8a:	f7ff ffb9 	bl	b5c00 <_ZN5Print5writeEPKc>
}
   b5c8e:	b00b      	add	sp, #44	; 0x2c
   b5c90:	bd30      	pop	{r4, r5, pc}
	...

000b5c94 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5c94:	4b01      	ldr	r3, [pc, #4]	; (b5c9c <_GLOBAL__sub_I_RGB+0x8>)
   b5c96:	2200      	movs	r2, #0
   b5c98:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5c9a:	4770      	bx	lr
   b5c9c:	2003e6d0 	.word	0x2003e6d0

000b5ca0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5ca0:	b510      	push	{r4, lr}
   b5ca2:	4604      	mov	r4, r0
   b5ca4:	4608      	mov	r0, r1
{
    _spi = spi;
   b5ca6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5ca8:	f7ff f916 	bl	b4ed8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5cac:	2300      	movs	r3, #0
   b5cae:	6063      	str	r3, [r4, #4]
}
   b5cb0:	4620      	mov	r0, r4
   b5cb2:	bd10      	pop	{r4, pc}

000b5cb4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5cb4:	b510      	push	{r4, lr}
   b5cb6:	4604      	mov	r4, r0
{
	free(buffer);
   b5cb8:	6800      	ldr	r0, [r0, #0]
   b5cba:	f7ff fa63 	bl	b5184 <free>
}
   b5cbe:	4620      	mov	r0, r4
   b5cc0:	bd10      	pop	{r4, pc}

000b5cc2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5cc2:	b510      	push	{r4, lr}
   b5cc4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5cc6:	6800      	ldr	r0, [r0, #0]
   b5cc8:	b108      	cbz	r0, b5cce <_ZN6String10invalidateEv+0xc>
   b5cca:	f7ff fa5b 	bl	b5184 <free>
	buffer = NULL;
   b5cce:	2300      	movs	r3, #0
	capacity = len = 0;
   b5cd0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5cd4:	6023      	str	r3, [r4, #0]
}
   b5cd6:	bd10      	pop	{r4, pc}

000b5cd8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5cd8:	b538      	push	{r3, r4, r5, lr}
   b5cda:	4604      	mov	r4, r0
   b5cdc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5cde:	6800      	ldr	r0, [r0, #0]
   b5ce0:	3101      	adds	r1, #1
   b5ce2:	f7ff fa57 	bl	b5194 <realloc>
	if (newbuffer) {
   b5ce6:	b110      	cbz	r0, b5cee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5ce8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5cec:	2001      	movs	r0, #1
	}
	return 0;
}
   b5cee:	bd38      	pop	{r3, r4, r5, pc}

000b5cf0 <_ZN6String7reserveEj>:
{
   b5cf0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5cf2:	6803      	ldr	r3, [r0, #0]
{
   b5cf4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5cf6:	b123      	cbz	r3, b5d02 <_ZN6String7reserveEj+0x12>
   b5cf8:	6843      	ldr	r3, [r0, #4]
   b5cfa:	428b      	cmp	r3, r1
   b5cfc:	d301      	bcc.n	b5d02 <_ZN6String7reserveEj+0x12>
   b5cfe:	2001      	movs	r0, #1
}
   b5d00:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5d02:	4620      	mov	r0, r4
   b5d04:	f7ff ffe8 	bl	b5cd8 <_ZN6String12changeBufferEj>
   b5d08:	2800      	cmp	r0, #0
   b5d0a:	d0f9      	beq.n	b5d00 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5d0c:	68a3      	ldr	r3, [r4, #8]
   b5d0e:	2b00      	cmp	r3, #0
   b5d10:	d1f5      	bne.n	b5cfe <_ZN6String7reserveEj+0xe>
   b5d12:	6822      	ldr	r2, [r4, #0]
   b5d14:	7013      	strb	r3, [r2, #0]
   b5d16:	e7f2      	b.n	b5cfe <_ZN6String7reserveEj+0xe>

000b5d18 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d1a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5d1c:	4611      	mov	r1, r2
   b5d1e:	9201      	str	r2, [sp, #4]
{
   b5d20:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5d22:	f7ff ffe5 	bl	b5cf0 <_ZN6String7reserveEj>
   b5d26:	9a01      	ldr	r2, [sp, #4]
   b5d28:	b928      	cbnz	r0, b5d36 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5d2a:	4620      	mov	r0, r4
   b5d2c:	f7ff ffc9 	bl	b5cc2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5d30:	4620      	mov	r0, r4
   b5d32:	b003      	add	sp, #12
   b5d34:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5d36:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5d38:	4629      	mov	r1, r5
   b5d3a:	6820      	ldr	r0, [r4, #0]
   b5d3c:	f001 f8fc 	bl	b6f38 <memcpy>
	buffer[len] = 0;
   b5d40:	6822      	ldr	r2, [r4, #0]
   b5d42:	68a3      	ldr	r3, [r4, #8]
   b5d44:	2100      	movs	r1, #0
   b5d46:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5d48:	e7f2      	b.n	b5d30 <_ZN6String4copyEPKcj+0x18>

000b5d4a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5d4a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5d4c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5d4e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5d52:	4604      	mov	r4, r0
	len = 0;
   b5d54:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5d56:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5d58:	b141      	cbz	r1, b5d6c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5d5a:	4608      	mov	r0, r1
   b5d5c:	9101      	str	r1, [sp, #4]
   b5d5e:	f001 f956 	bl	b700e <strlen>
   b5d62:	9901      	ldr	r1, [sp, #4]
   b5d64:	4602      	mov	r2, r0
   b5d66:	4620      	mov	r0, r4
   b5d68:	f7ff ffd6 	bl	b5d18 <_ZN6String4copyEPKcj>
}
   b5d6c:	4620      	mov	r0, r4
   b5d6e:	b002      	add	sp, #8
   b5d70:	bd10      	pop	{r4, pc}

000b5d72 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5d72:	4288      	cmp	r0, r1
{
   b5d74:	b510      	push	{r4, lr}
   b5d76:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5d78:	d005      	beq.n	b5d86 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5d7a:	680b      	ldr	r3, [r1, #0]
   b5d7c:	b12b      	cbz	r3, b5d8a <_ZN6StringaSERKS_+0x18>
   b5d7e:	688a      	ldr	r2, [r1, #8]
   b5d80:	4619      	mov	r1, r3
   b5d82:	f7ff ffc9 	bl	b5d18 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5d86:	4620      	mov	r0, r4
   b5d88:	bd10      	pop	{r4, pc}
	else invalidate();
   b5d8a:	f7ff ff9a 	bl	b5cc2 <_ZN6String10invalidateEv>
   b5d8e:	e7fa      	b.n	b5d86 <_ZN6StringaSERKS_+0x14>

000b5d90 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5d90:	b510      	push	{r4, lr}
	buffer = NULL;
   b5d92:	2300      	movs	r3, #0
String::String(const String &value)
   b5d94:	4604      	mov	r4, r0
	capacity = 0;
   b5d96:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5d9a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5d9c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5d9e:	f7ff ffe8 	bl	b5d72 <_ZN6StringaSERKS_>
}
   b5da2:	4620      	mov	r0, r4
   b5da4:	bd10      	pop	{r4, pc}

000b5da6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b5da6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5da8:	6882      	ldr	r2, [r0, #8]
   b5daa:	b93a      	cbnz	r2, b5dbc <_ZNK6String6equalsEPKc+0x16>
   b5dac:	b121      	cbz	r1, b5db8 <_ZNK6String6equalsEPKc+0x12>
   b5dae:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b5db0:	fab0 f080 	clz	r0, r0
   b5db4:	0940      	lsrs	r0, r0, #5
   b5db6:	e000      	b.n	b5dba <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5db8:	2001      	movs	r0, #1
}
   b5dba:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b5dbc:	6800      	ldr	r0, [r0, #0]
   b5dbe:	b909      	cbnz	r1, b5dc4 <_ZNK6String6equalsEPKc+0x1e>
   b5dc0:	7800      	ldrb	r0, [r0, #0]
   b5dc2:	e7f5      	b.n	b5db0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b5dc4:	f001 f8fc 	bl	b6fc0 <strcmp>
   b5dc8:	e7f2      	b.n	b5db0 <_ZNK6String6equalsEPKc+0xa>
	...

000b5dcc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b5dcc:	b40e      	push	{r1, r2, r3}
   b5dce:	b570      	push	{r4, r5, r6, lr}
   b5dd0:	b087      	sub	sp, #28
   b5dd2:	ad0b      	add	r5, sp, #44	; 0x2c
   b5dd4:	4604      	mov	r4, r0
   b5dd6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5dda:	9201      	str	r2, [sp, #4]
   b5ddc:	462b      	mov	r3, r5
   b5dde:	2105      	movs	r1, #5
   b5de0:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b5de2:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5de4:	f7ff f9de 	bl	b51a4 <vsnprintf>
    va_end(marker);

    String result;
   b5de8:	490b      	ldr	r1, [pc, #44]	; (b5e18 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5dea:	4606      	mov	r6, r0
    String result;
   b5dec:	4620      	mov	r0, r4
   b5dee:	f7ff ffac 	bl	b5d4a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b5df2:	4631      	mov	r1, r6
   b5df4:	4620      	mov	r0, r4
   b5df6:	f7ff ff7b 	bl	b5cf0 <_ZN6String7reserveEj>
    if (result.buffer) {
   b5dfa:	6820      	ldr	r0, [r4, #0]
   b5dfc:	b130      	cbz	r0, b5e0c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5dfe:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b5e00:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5e02:	462b      	mov	r3, r5
   b5e04:	1c71      	adds	r1, r6, #1
   b5e06:	f7ff f9cd 	bl	b51a4 <vsnprintf>
        va_end(marker);
        result.len = n;
   b5e0a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b5e0c:	4620      	mov	r0, r4
   b5e0e:	b007      	add	sp, #28
   b5e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5e14:	b003      	add	sp, #12
   b5e16:	4770      	bx	lr
   b5e18:	000b7156 	.word	0x000b7156

000b5e1c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b5e1c:	b507      	push	{r0, r1, r2, lr}
   b5e1e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b5e20:	2100      	movs	r1, #0
{
   b5e22:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b5e24:	9100      	str	r1, [sp, #0]
   b5e26:	2001      	movs	r0, #1
   b5e28:	218c      	movs	r1, #140	; 0x8c
   b5e2a:	f7ff f911 	bl	b5050 <system_reset>
}
   b5e2e:	b003      	add	sp, #12
   b5e30:	f85d fb04 	ldr.w	pc, [sp], #4

000b5e34 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b5e34:	4601      	mov	r1, r0
    reset(0, flags);
   b5e36:	2000      	movs	r0, #0
   b5e38:	f7ff bff0 	b.w	b5e1c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b5e3c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b5e3c:	2000      	movs	r0, #0
   b5e3e:	f7ff bff9 	b.w	b5e34 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000b5e44 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5e44:	4b05      	ldr	r3, [pc, #20]	; (b5e5c <_GLOBAL__sub_I_System+0x18>)
   b5e46:	2202      	movs	r2, #2
   b5e48:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5e4a:	4b05      	ldr	r3, [pc, #20]	; (b5e60 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5e4c:	4a05      	ldr	r2, [pc, #20]	; (b5e64 <_GLOBAL__sub_I_System+0x20>)
   b5e4e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5e50:	2000      	movs	r0, #0
   b5e52:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5e56:	f7ff b8c7 	b.w	b4fe8 <set_system_mode>
   b5e5a:	bf00      	nop
   b5e5c:	2003e6ec 	.word	0x2003e6ec
   b5e60:	2003e6e0 	.word	0x2003e6e0
   b5e64:	ffff0000 	.word	0xffff0000

000b5e68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5e68:	4b02      	ldr	r3, [pc, #8]	; (b5e74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5e6a:	681a      	ldr	r2, [r3, #0]
   b5e6c:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5e6e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5e70:	4770      	bx	lr
   b5e72:	bf00      	nop
   b5e74:	2003e59c 	.word	0x2003e59c
   b5e78:	2003e6f0 	.word	0x2003e6f0

000b5e7c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5e7c:	4770      	bx	lr

000b5e7e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5e7e:	7441      	strb	r1, [r0, #17]
}
   b5e80:	4770      	bx	lr

000b5e82 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5e82:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5e84:	7c00      	ldrb	r0, [r0, #16]
   b5e86:	f7ff f867 	bl	b4f58 <hal_usart_available_data_for_write>
}
   b5e8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e8e:	bd08      	pop	{r3, pc}

000b5e90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5e90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5e92:	7c00      	ldrb	r0, [r0, #16]
   b5e94:	f7ff f838 	bl	b4f08 <hal_usart_available>
}
   b5e98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e9c:	bd08      	pop	{r3, pc}

000b5e9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5e9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5ea0:	7c00      	ldrb	r0, [r0, #16]
   b5ea2:	f7ff f841 	bl	b4f28 <hal_usart_peek>
}
   b5ea6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5eaa:	bd08      	pop	{r3, pc}

000b5eac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5eac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5eae:	7c00      	ldrb	r0, [r0, #16]
   b5eb0:	f7ff f832 	bl	b4f18 <hal_usart_read>
}
   b5eb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5eb8:	bd08      	pop	{r3, pc}

000b5eba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5eba:	7c00      	ldrb	r0, [r0, #16]
   b5ebc:	f7ff b83c 	b.w	b4f38 <hal_usart_flush>

000b5ec0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ec2:	7c45      	ldrb	r5, [r0, #17]
{
   b5ec4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ec6:	b12d      	cbz	r5, b5ed4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5ec8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5eca:	b003      	add	sp, #12
   b5ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5ed0:	f7ff b812 	b.w	b4ef8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ed4:	7c00      	ldrb	r0, [r0, #16]
   b5ed6:	9101      	str	r1, [sp, #4]
   b5ed8:	f7ff f83e 	bl	b4f58 <hal_usart_available_data_for_write>
   b5edc:	2800      	cmp	r0, #0
   b5ede:	9901      	ldr	r1, [sp, #4]
   b5ee0:	dcf2      	bgt.n	b5ec8 <_ZN11USARTSerial5writeEh+0x8>
}
   b5ee2:	4628      	mov	r0, r5
   b5ee4:	b003      	add	sp, #12
   b5ee6:	bd30      	pop	{r4, r5, pc}

000b5ee8 <_ZN11USARTSerialD0Ev>:
   b5ee8:	b510      	push	{r4, lr}
   b5eea:	2114      	movs	r1, #20
   b5eec:	4604      	mov	r4, r0
   b5eee:	f7fe f8d6 	bl	b409e <_ZdlPvj>
   b5ef2:	4620      	mov	r0, r4
   b5ef4:	bd10      	pop	{r4, pc}
	...

000b5ef8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5ef8:	b510      	push	{r4, lr}
   b5efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5efe:	4604      	mov	r4, r0
   b5f00:	4608      	mov	r0, r1
   b5f02:	4611      	mov	r1, r2
   b5f04:	2200      	movs	r2, #0
   b5f06:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5f0a:	4b04      	ldr	r3, [pc, #16]	; (b5f1c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5f0c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5f0e:	2301      	movs	r3, #1
  _serial = serial;
   b5f10:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5f12:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5f14:	f7ff f828 	bl	b4f68 <hal_usart_init_ex>
}
   b5f18:	4620      	mov	r0, r4
   b5f1a:	bd10      	pop	{r4, pc}
   b5f1c:	000b741c 	.word	0x000b741c

000b5f20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5f20:	7441      	strb	r1, [r0, #17]
}
   b5f22:	4770      	bx	lr

000b5f24 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5f24:	4770      	bx	lr

000b5f26 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5f26:	4770      	bx	lr

000b5f28 <_ZN9USBSerial4readEv>:
{
   b5f28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5f2a:	2100      	movs	r1, #0
   b5f2c:	7c00      	ldrb	r0, [r0, #16]
   b5f2e:	f7ff f843 	bl	b4fb8 <HAL_USB_USART_Receive_Data>
}
   b5f32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f36:	bd08      	pop	{r3, pc}

000b5f38 <_ZN9USBSerial4peekEv>:
{
   b5f38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5f3a:	2101      	movs	r1, #1
   b5f3c:	7c00      	ldrb	r0, [r0, #16]
   b5f3e:	f7ff f83b 	bl	b4fb8 <HAL_USB_USART_Receive_Data>
}
   b5f42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f46:	bd08      	pop	{r3, pc}

000b5f48 <_ZN9USBSerial17availableForWriteEv>:
{
   b5f48:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5f4a:	7c00      	ldrb	r0, [r0, #16]
   b5f4c:	f7ff f82c 	bl	b4fa8 <HAL_USB_USART_Available_Data_For_Write>
}
   b5f50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f54:	bd08      	pop	{r3, pc}

000b5f56 <_ZN9USBSerial9availableEv>:
{
   b5f56:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5f58:	7c00      	ldrb	r0, [r0, #16]
   b5f5a:	f7ff f81d 	bl	b4f98 <HAL_USB_USART_Available_Data>
}
   b5f5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f62:	bd08      	pop	{r3, pc}

000b5f64 <_ZN9USBSerial5writeEh>:
{
   b5f64:	b513      	push	{r0, r1, r4, lr}
   b5f66:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5f68:	7c00      	ldrb	r0, [r0, #16]
{
   b5f6a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5f6c:	f7ff f81c 	bl	b4fa8 <HAL_USB_USART_Available_Data_For_Write>
   b5f70:	2800      	cmp	r0, #0
   b5f72:	9901      	ldr	r1, [sp, #4]
   b5f74:	dc01      	bgt.n	b5f7a <_ZN9USBSerial5writeEh+0x16>
   b5f76:	7c60      	ldrb	r0, [r4, #17]
   b5f78:	b120      	cbz	r0, b5f84 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5f7a:	7c20      	ldrb	r0, [r4, #16]
   b5f7c:	f7ff f824 	bl	b4fc8 <HAL_USB_USART_Send_Data>
   b5f80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5f84:	b002      	add	sp, #8
   b5f86:	bd10      	pop	{r4, pc}

000b5f88 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5f88:	7c00      	ldrb	r0, [r0, #16]
   b5f8a:	f7ff b825 	b.w	b4fd8 <HAL_USB_USART_Flush_Data>

000b5f8e <_ZN9USBSerialD0Ev>:
   b5f8e:	b510      	push	{r4, lr}
   b5f90:	2114      	movs	r1, #20
   b5f92:	4604      	mov	r4, r0
   b5f94:	f7fe f883 	bl	b409e <_ZdlPvj>
   b5f98:	4620      	mov	r0, r4
   b5f9a:	bd10      	pop	{r4, pc}

000b5f9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5f9c:	b510      	push	{r4, lr}
   b5f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5fa2:	4604      	mov	r4, r0
   b5fa4:	4608      	mov	r0, r1
   b5fa6:	2100      	movs	r1, #0
   b5fa8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5fac:	4b04      	ldr	r3, [pc, #16]	; (b5fc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5fae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5fb0:	2301      	movs	r3, #1
  _serial = serial;
   b5fb2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5fb4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5fb6:	4611      	mov	r1, r2
   b5fb8:	f7fe ffde 	bl	b4f78 <HAL_USB_USART_Init>
}
   b5fbc:	4620      	mov	r0, r4
   b5fbe:	bd10      	pop	{r4, pc}
   b5fc0:	000b744c 	.word	0x000b744c

000b5fc4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5fc4:	7c00      	ldrb	r0, [r0, #16]
   b5fc6:	2200      	movs	r2, #0
   b5fc8:	f7fe bfde 	b.w	b4f88 <HAL_USB_USART_Begin>

000b5fcc <_Z19acquireSerialBufferv>:
{
   b5fcc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5fce:	2214      	movs	r2, #20
{
   b5fd0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5fd2:	2100      	movs	r1, #0
   b5fd4:	f000 ffbe 	bl	b6f54 <memset>
}
   b5fd8:	4620      	mov	r0, r4
   b5fda:	bd10      	pop	{r4, pc}

000b5fdc <_Z16_fetch_usbserialv>:
{
   b5fdc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5fde:	4c0f      	ldr	r4, [pc, #60]	; (b601c <_Z16_fetch_usbserialv+0x40>)
{
   b5fe0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5fe2:	a803      	add	r0, sp, #12
   b5fe4:	f7ff fff2 	bl	b5fcc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5fe8:	7821      	ldrb	r1, [r4, #0]
   b5fea:	f3bf 8f5b 	dmb	ish
   b5fee:	f011 0101 	ands.w	r1, r1, #1
   b5ff2:	d10f      	bne.n	b6014 <_Z16_fetch_usbserialv+0x38>
   b5ff4:	4620      	mov	r0, r4
   b5ff6:	9101      	str	r1, [sp, #4]
   b5ff8:	f7fe f853 	bl	b40a2 <__cxa_guard_acquire>
   b5ffc:	9901      	ldr	r1, [sp, #4]
   b5ffe:	b148      	cbz	r0, b6014 <_Z16_fetch_usbserialv+0x38>
   b6000:	aa03      	add	r2, sp, #12
   b6002:	4807      	ldr	r0, [pc, #28]	; (b6020 <_Z16_fetch_usbserialv+0x44>)
   b6004:	f7ff ffca 	bl	b5f9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6008:	4620      	mov	r0, r4
   b600a:	f7fe f84f 	bl	b40ac <__cxa_guard_release>
   b600e:	4805      	ldr	r0, [pc, #20]	; (b6024 <_Z16_fetch_usbserialv+0x48>)
   b6010:	f000 ff8c 	bl	b6f2c <atexit>
	return _usbserial;
}
   b6014:	4802      	ldr	r0, [pc, #8]	; (b6020 <_Z16_fetch_usbserialv+0x44>)
   b6016:	b008      	add	sp, #32
   b6018:	bd10      	pop	{r4, pc}
   b601a:	bf00      	nop
   b601c:	2003e6f4 	.word	0x2003e6f4
   b6020:	2003e6f8 	.word	0x2003e6f8
   b6024:	000b5f25 	.word	0x000b5f25

000b6028 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6028:	2200      	movs	r2, #0
   b602a:	6840      	ldr	r0, [r0, #4]
   b602c:	4611      	mov	r1, r2
   b602e:	f7ff b859 	b.w	b50e4 <network_ready>

000b6032 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6032:	2200      	movs	r2, #0
   b6034:	6840      	ldr	r0, [r0, #4]
   b6036:	4611      	mov	r1, r2
   b6038:	f7ff b874 	b.w	b5124 <network_listening>

000b603c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b603c:	2200      	movs	r2, #0
   b603e:	6840      	ldr	r0, [r0, #4]
   b6040:	4611      	mov	r1, r2
   b6042:	f7ff b87f 	b.w	b5144 <network_get_listen_timeout>

000b6046 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6046:	6840      	ldr	r0, [r0, #4]
   b6048:	2200      	movs	r2, #0
   b604a:	f7ff b873 	b.w	b5134 <network_set_listen_timeout>

000b604e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b604e:	6840      	ldr	r0, [r0, #4]
   b6050:	2200      	movs	r2, #0
   b6052:	f081 0101 	eor.w	r1, r1, #1
   b6056:	f7ff b85d 	b.w	b5114 <network_listen>

000b605a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b605a:	2300      	movs	r3, #0
   b605c:	6840      	ldr	r0, [r0, #4]
   b605e:	461a      	mov	r2, r3
   b6060:	4619      	mov	r1, r3
   b6062:	f7ff b84f 	b.w	b5104 <network_off>

000b6066 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6066:	2300      	movs	r3, #0
   b6068:	6840      	ldr	r0, [r0, #4]
   b606a:	461a      	mov	r2, r3
   b606c:	4619      	mov	r1, r3
   b606e:	f7ff b841 	b.w	b50f4 <network_on>

000b6072 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6072:	2200      	movs	r2, #0
   b6074:	6840      	ldr	r0, [r0, #4]
   b6076:	4611      	mov	r1, r2
   b6078:	f7ff b824 	b.w	b50c4 <network_connecting>

000b607c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b607c:	6840      	ldr	r0, [r0, #4]
   b607e:	2200      	movs	r2, #0
   b6080:	2102      	movs	r1, #2
   b6082:	f7ff b827 	b.w	b50d4 <network_disconnect>

000b6086 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6086:	2300      	movs	r3, #0
   b6088:	6840      	ldr	r0, [r0, #4]
   b608a:	461a      	mov	r2, r3
   b608c:	f7ff b812 	b.w	b50b4 <network_connect>

000b6090 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6090:	4b02      	ldr	r3, [pc, #8]	; (b609c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6092:	2204      	movs	r2, #4
   b6094:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6096:	4a02      	ldr	r2, [pc, #8]	; (b60a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6098:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b609a:	4770      	bx	lr
   b609c:	2003e70c 	.word	0x2003e70c
   b60a0:	000b747c 	.word	0x000b747c

000b60a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b60a4:	4b01      	ldr	r3, [pc, #4]	; (b60ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b60a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b60a8:	4770      	bx	lr
   b60aa:	bf00      	nop
   b60ac:	2003e5a0 	.word	0x2003e5a0

000b60b0 <serialEventRun>:
{
   b60b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b60b2:	4b0b      	ldr	r3, [pc, #44]	; (b60e0 <serialEventRun+0x30>)
   b60b4:	b143      	cbz	r3, b60c8 <serialEventRun+0x18>
   b60b6:	f7ff ff91 	bl	b5fdc <_Z16_fetch_usbserialv>
   b60ba:	6803      	ldr	r3, [r0, #0]
   b60bc:	691b      	ldr	r3, [r3, #16]
   b60be:	4798      	blx	r3
   b60c0:	2800      	cmp	r0, #0
   b60c2:	dd01      	ble.n	b60c8 <serialEventRun+0x18>
        serialEvent();
   b60c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b60c8:	4b06      	ldr	r3, [pc, #24]	; (b60e4 <serialEventRun+0x34>)
   b60ca:	b143      	cbz	r3, b60de <serialEventRun+0x2e>
   b60cc:	f000 f95c 	bl	b6388 <_Z22__fetch_global_Serial1v>
   b60d0:	6803      	ldr	r3, [r0, #0]
   b60d2:	691b      	ldr	r3, [r3, #16]
   b60d4:	4798      	blx	r3
   b60d6:	2800      	cmp	r0, #0
   b60d8:	dd01      	ble.n	b60de <serialEventRun+0x2e>
        serialEvent1();
   b60da:	f3af 8000 	nop.w
}
   b60de:	bd08      	pop	{r3, pc}
	...

000b60e8 <_post_loop>:
{
   b60e8:	b508      	push	{r3, lr}
	serialEventRun();
   b60ea:	f7ff ffe1 	bl	b60b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b60ee:	f7fe fe53 	bl	b4d98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b60f2:	4b01      	ldr	r3, [pc, #4]	; (b60f8 <_post_loop+0x10>)
   b60f4:	6018      	str	r0, [r3, #0]
}
   b60f6:	bd08      	pop	{r3, pc}
   b60f8:	2003e728 	.word	0x2003e728

000b60fc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b60fc:	4805      	ldr	r0, [pc, #20]	; (b6114 <_Z33system_initialize_user_backup_ramv+0x18>)
   b60fe:	4a06      	ldr	r2, [pc, #24]	; (b6118 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6100:	4906      	ldr	r1, [pc, #24]	; (b611c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6102:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6104:	1a12      	subs	r2, r2, r0
   b6106:	f000 ff17 	bl	b6f38 <memcpy>
    __backup_sram_signature = signature;
   b610a:	4b05      	ldr	r3, [pc, #20]	; (b6120 <_Z33system_initialize_user_backup_ramv+0x24>)
   b610c:	4a05      	ldr	r2, [pc, #20]	; (b6124 <_Z33system_initialize_user_backup_ramv+0x28>)
   b610e:	601a      	str	r2, [r3, #0]
}
   b6110:	bd08      	pop	{r3, pc}
   b6112:	bf00      	nop
   b6114:	2003f400 	.word	0x2003f400
   b6118:	2003f404 	.word	0x2003f404
   b611c:	000b757c 	.word	0x000b757c
   b6120:	2003f400 	.word	0x2003f400
   b6124:	9a271c1e 	.word	0x9a271c1e

000b6128 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6128:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b612a:	2300      	movs	r3, #0
   b612c:	9300      	str	r3, [sp, #0]
   b612e:	461a      	mov	r2, r3
   b6130:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6134:	f7fe ff82 	bl	b503c <system_ctrl_set_result>
}
   b6138:	b003      	add	sp, #12
   b613a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6140 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6140:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6142:	8843      	ldrh	r3, [r0, #2]
   b6144:	2b0a      	cmp	r3, #10
   b6146:	d008      	beq.n	b615a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6148:	2b50      	cmp	r3, #80	; 0x50
   b614a:	d10b      	bne.n	b6164 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b614c:	4b09      	ldr	r3, [pc, #36]	; (b6174 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b614e:	681b      	ldr	r3, [r3, #0]
   b6150:	b14b      	cbz	r3, b6166 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6152:	b003      	add	sp, #12
   b6154:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6158:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b615a:	f7ff ffe5 	bl	b6128 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b615e:	b003      	add	sp, #12
   b6160:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6164:	2300      	movs	r3, #0
   b6166:	9300      	str	r3, [sp, #0]
   b6168:	461a      	mov	r2, r3
   b616a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b616e:	f7fe ff65 	bl	b503c <system_ctrl_set_result>
}
   b6172:	e7f4      	b.n	b615e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6174:	2003e718 	.word	0x2003e718

000b6178 <module_user_init_hook>:
{
   b6178:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b617a:	4812      	ldr	r0, [pc, #72]	; (b61c4 <module_user_init_hook+0x4c>)
   b617c:	2100      	movs	r1, #0
   b617e:	f7ff f831 	bl	b51e4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6182:	4b11      	ldr	r3, [pc, #68]	; (b61c8 <module_user_init_hook+0x50>)
   b6184:	681a      	ldr	r2, [r3, #0]
   b6186:	4b11      	ldr	r3, [pc, #68]	; (b61cc <module_user_init_hook+0x54>)
   b6188:	429a      	cmp	r2, r3
   b618a:	4b11      	ldr	r3, [pc, #68]	; (b61d0 <module_user_init_hook+0x58>)
   b618c:	bf0c      	ite	eq
   b618e:	2201      	moveq	r2, #1
   b6190:	2200      	movne	r2, #0
   b6192:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6194:	d001      	beq.n	b619a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6196:	f7ff ffb1 	bl	b60fc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b619a:	f7fe fdf5 	bl	b4d88 <HAL_RNG_GetRandomNumber>
   b619e:	4604      	mov	r4, r0
    srand(seed);
   b61a0:	f000 fee0 	bl	b6f64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b61a4:	4b0b      	ldr	r3, [pc, #44]	; (b61d4 <module_user_init_hook+0x5c>)
   b61a6:	b113      	cbz	r3, b61ae <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b61a8:	4620      	mov	r0, r4
   b61aa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b61ae:	2100      	movs	r1, #0
   b61b0:	4808      	ldr	r0, [pc, #32]	; (b61d4 <module_user_init_hook+0x5c>)
   b61b2:	f7fe ff77 	bl	b50a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b61b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b61ba:	4807      	ldr	r0, [pc, #28]	; (b61d8 <module_user_init_hook+0x60>)
   b61bc:	2100      	movs	r1, #0
   b61be:	f7fe bf33 	b.w	b5028 <system_ctrl_set_app_request_handler>
   b61c2:	bf00      	nop
   b61c4:	000b60a5 	.word	0x000b60a5
   b61c8:	2003f400 	.word	0x2003f400
   b61cc:	9a271c1e 	.word	0x9a271c1e
   b61d0:	2003e714 	.word	0x2003e714
   b61d4:	00000000 	.word	0x00000000
   b61d8:	000b6141 	.word	0x000b6141

000b61dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b61dc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b61de:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b61e0:	d902      	bls.n	b61e8 <pinAvailable+0xc>
    return false;
   b61e2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b61e4:	b002      	add	sp, #8
   b61e6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b61e8:	f1a0 030b 	sub.w	r3, r0, #11
   b61ec:	2b02      	cmp	r3, #2
   b61ee:	d81a      	bhi.n	b6226 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b61f0:	4c17      	ldr	r4, [pc, #92]	; (b6250 <pinAvailable+0x74>)
   b61f2:	7821      	ldrb	r1, [r4, #0]
   b61f4:	f3bf 8f5b 	dmb	ish
   b61f8:	f011 0101 	ands.w	r1, r1, #1
   b61fc:	d10b      	bne.n	b6216 <pinAvailable+0x3a>
   b61fe:	4620      	mov	r0, r4
   b6200:	9101      	str	r1, [sp, #4]
   b6202:	f7fd ff4e 	bl	b40a2 <__cxa_guard_acquire>
   b6206:	9901      	ldr	r1, [sp, #4]
   b6208:	b128      	cbz	r0, b6216 <pinAvailable+0x3a>
   b620a:	4812      	ldr	r0, [pc, #72]	; (b6254 <pinAvailable+0x78>)
   b620c:	f7ff fd48 	bl	b5ca0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6210:	4620      	mov	r0, r4
   b6212:	f7fd ff4b 	bl	b40ac <__cxa_guard_release>
   b6216:	4b0f      	ldr	r3, [pc, #60]	; (b6254 <pinAvailable+0x78>)
   b6218:	7818      	ldrb	r0, [r3, #0]
   b621a:	f7fe fe65 	bl	b4ee8 <hal_spi_is_enabled>
   b621e:	2800      	cmp	r0, #0
   b6220:	d1df      	bne.n	b61e2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6222:	2001      	movs	r0, #1
   b6224:	e7de      	b.n	b61e4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6226:	2801      	cmp	r0, #1
   b6228:	d809      	bhi.n	b623e <pinAvailable+0x62>
   b622a:	f000 f86d 	bl	b6308 <_Z19__fetch_global_Wirev>
   b622e:	2100      	movs	r1, #0
   b6230:	7c00      	ldrb	r0, [r0, #16]
   b6232:	f7fe fe21 	bl	b4e78 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6236:	f080 0001 	eor.w	r0, r0, #1
   b623a:	b2c0      	uxtb	r0, r0
   b623c:	e7d2      	b.n	b61e4 <pinAvailable+0x8>
   b623e:	3809      	subs	r0, #9
   b6240:	2801      	cmp	r0, #1
   b6242:	d8ee      	bhi.n	b6222 <pinAvailable+0x46>
   b6244:	f000 f8a0 	bl	b6388 <_Z22__fetch_global_Serial1v>
   b6248:	7c00      	ldrb	r0, [r0, #16]
   b624a:	f7fe fe7d 	bl	b4f48 <hal_usart_is_enabled>
   b624e:	e7f2      	b.n	b6236 <pinAvailable+0x5a>
   b6250:	2003e71c 	.word	0x2003e71c
   b6254:	2003e720 	.word	0x2003e720

000b6258 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6258:	2823      	cmp	r0, #35	; 0x23
{
   b625a:	b538      	push	{r3, r4, r5, lr}
   b625c:	4604      	mov	r4, r0
   b625e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6260:	d80a      	bhi.n	b6278 <pinMode+0x20>
   b6262:	29ff      	cmp	r1, #255	; 0xff
   b6264:	d008      	beq.n	b6278 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6266:	f7ff ffb9 	bl	b61dc <pinAvailable>
   b626a:	b128      	cbz	r0, b6278 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b626c:	4629      	mov	r1, r5
   b626e:	4620      	mov	r0, r4
}
   b6270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6274:	f7fe bda0 	b.w	b4db8 <HAL_Pin_Mode>
}
   b6278:	bd38      	pop	{r3, r4, r5, pc}

000b627a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b627a:	b538      	push	{r3, r4, r5, lr}
   b627c:	4604      	mov	r4, r0
   b627e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6280:	f7fe fda2 	bl	b4dc8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6284:	28ff      	cmp	r0, #255	; 0xff
   b6286:	d010      	beq.n	b62aa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6288:	2806      	cmp	r0, #6
   b628a:	d804      	bhi.n	b6296 <digitalWrite+0x1c>
   b628c:	234d      	movs	r3, #77	; 0x4d
   b628e:	fa23 f000 	lsr.w	r0, r3, r0
   b6292:	07c3      	lsls	r3, r0, #31
   b6294:	d409      	bmi.n	b62aa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6296:	4620      	mov	r0, r4
   b6298:	f7ff ffa0 	bl	b61dc <pinAvailable>
   b629c:	b128      	cbz	r0, b62aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b629e:	4629      	mov	r1, r5
   b62a0:	4620      	mov	r0, r4
}
   b62a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b62a6:	f7fe bd97 	b.w	b4dd8 <HAL_GPIO_Write>
}
   b62aa:	bd38      	pop	{r3, r4, r5, pc}

000b62ac <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b62ac:	280d      	cmp	r0, #13
{
   b62ae:	b510      	push	{r4, lr}
   b62b0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b62b2:	bf9c      	itt	ls
   b62b4:	340e      	addls	r4, #14
   b62b6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b62b8:	4620      	mov	r0, r4
   b62ba:	f7ff ff8f 	bl	b61dc <pinAvailable>
   b62be:	b150      	cbz	r0, b62d6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b62c0:	2103      	movs	r1, #3
   b62c2:	4620      	mov	r0, r4
   b62c4:	f7fe fd70 	bl	b4da8 <HAL_Validate_Pin_Function>
   b62c8:	2803      	cmp	r0, #3
   b62ca:	d104      	bne.n	b62d6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b62cc:	4620      	mov	r0, r4
}
   b62ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b62d2:	f7fe bd89 	b.w	b4de8 <hal_adc_read>
}
   b62d6:	2000      	movs	r0, #0
   b62d8:	bd10      	pop	{r4, pc}

000b62da <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b62da:	4770      	bx	lr

000b62dc <_Z17acquireWireBufferv>:
{
   b62dc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b62de:	2520      	movs	r5, #32
   b62e0:	2314      	movs	r3, #20
{
   b62e2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b62e4:	6003      	str	r3, [r0, #0]
   b62e6:	6085      	str	r5, [r0, #8]
   b62e8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b62ea:	4906      	ldr	r1, [pc, #24]	; (b6304 <_Z17acquireWireBufferv+0x28>)
   b62ec:	4628      	mov	r0, r5
   b62ee:	f000 f86f 	bl	b63d0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b62f2:	4904      	ldr	r1, [pc, #16]	; (b6304 <_Z17acquireWireBufferv+0x28>)
	};
   b62f4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b62f6:	4628      	mov	r0, r5
   b62f8:	f000 f86a 	bl	b63d0 <_ZnajRKSt9nothrow_t>
	};
   b62fc:	60e0      	str	r0, [r4, #12]
}
   b62fe:	4620      	mov	r0, r4
   b6300:	bd38      	pop	{r3, r4, r5, pc}
   b6302:	bf00      	nop
   b6304:	000b74b0 	.word	0x000b74b0

000b6308 <_Z19__fetch_global_Wirev>:
{
   b6308:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b630a:	4d0e      	ldr	r5, [pc, #56]	; (b6344 <_Z19__fetch_global_Wirev+0x3c>)
   b630c:	7829      	ldrb	r1, [r5, #0]
   b630e:	f3bf 8f5b 	dmb	ish
   b6312:	f011 0401 	ands.w	r4, r1, #1
{
   b6316:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6318:	d111      	bne.n	b633e <_Z19__fetch_global_Wirev+0x36>
   b631a:	4628      	mov	r0, r5
   b631c:	f7fd fec1 	bl	b40a2 <__cxa_guard_acquire>
   b6320:	b168      	cbz	r0, b633e <_Z19__fetch_global_Wirev+0x36>
   b6322:	a801      	add	r0, sp, #4
   b6324:	f7ff ffda 	bl	b62dc <_Z17acquireWireBufferv>
   b6328:	aa01      	add	r2, sp, #4
   b632a:	4621      	mov	r1, r4
   b632c:	4806      	ldr	r0, [pc, #24]	; (b6348 <_Z19__fetch_global_Wirev+0x40>)
   b632e:	f7ff facf 	bl	b58d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6332:	4628      	mov	r0, r5
   b6334:	f7fd feba 	bl	b40ac <__cxa_guard_release>
   b6338:	4804      	ldr	r0, [pc, #16]	; (b634c <_Z19__fetch_global_Wirev+0x44>)
   b633a:	f000 fdf7 	bl	b6f2c <atexit>
	return wire;
}
   b633e:	4802      	ldr	r0, [pc, #8]	; (b6348 <_Z19__fetch_global_Wirev+0x40>)
   b6340:	b007      	add	sp, #28
   b6342:	bd30      	pop	{r4, r5, pc}
   b6344:	2003e72c 	.word	0x2003e72c
   b6348:	2003e730 	.word	0x2003e730
   b634c:	000b62db 	.word	0x000b62db

000b6350 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6350:	4770      	bx	lr
	...

000b6354 <_Z20acquireSerial1Bufferv>:
{
   b6354:	b538      	push	{r3, r4, r5, lr}
   b6356:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6358:	2514      	movs	r5, #20
   b635a:	462a      	mov	r2, r5
   b635c:	2100      	movs	r1, #0
   b635e:	f000 fdf9 	bl	b6f54 <memset>
   b6362:	8025      	strh	r5, [r4, #0]
   b6364:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6366:	4907      	ldr	r1, [pc, #28]	; (b6384 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6368:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b636a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b636c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b636e:	f000 f82f 	bl	b63d0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6372:	4904      	ldr	r1, [pc, #16]	; (b6384 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6374:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6376:	4628      	mov	r0, r5
   b6378:	f000 f82a 	bl	b63d0 <_ZnajRKSt9nothrow_t>
    };
   b637c:	60e0      	str	r0, [r4, #12]
}
   b637e:	4620      	mov	r0, r4
   b6380:	bd38      	pop	{r3, r4, r5, pc}
   b6382:	bf00      	nop
   b6384:	000b74b0 	.word	0x000b74b0

000b6388 <_Z22__fetch_global_Serial1v>:
{
   b6388:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b638a:	4d0e      	ldr	r5, [pc, #56]	; (b63c4 <_Z22__fetch_global_Serial1v+0x3c>)
   b638c:	7829      	ldrb	r1, [r5, #0]
   b638e:	f3bf 8f5b 	dmb	ish
   b6392:	f011 0401 	ands.w	r4, r1, #1
{
   b6396:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6398:	d111      	bne.n	b63be <_Z22__fetch_global_Serial1v+0x36>
   b639a:	4628      	mov	r0, r5
   b639c:	f7fd fe81 	bl	b40a2 <__cxa_guard_acquire>
   b63a0:	b168      	cbz	r0, b63be <_Z22__fetch_global_Serial1v+0x36>
   b63a2:	a801      	add	r0, sp, #4
   b63a4:	f7ff ffd6 	bl	b6354 <_Z20acquireSerial1Bufferv>
   b63a8:	aa01      	add	r2, sp, #4
   b63aa:	4621      	mov	r1, r4
   b63ac:	4806      	ldr	r0, [pc, #24]	; (b63c8 <_Z22__fetch_global_Serial1v+0x40>)
   b63ae:	f7ff fda3 	bl	b5ef8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b63b2:	4628      	mov	r0, r5
   b63b4:	f7fd fe7a 	bl	b40ac <__cxa_guard_release>
   b63b8:	4804      	ldr	r0, [pc, #16]	; (b63cc <_Z22__fetch_global_Serial1v+0x44>)
   b63ba:	f000 fdb7 	bl	b6f2c <atexit>
    return serial1;
}
   b63be:	4802      	ldr	r0, [pc, #8]	; (b63c8 <_Z22__fetch_global_Serial1v+0x40>)
   b63c0:	b007      	add	sp, #28
   b63c2:	bd30      	pop	{r4, r5, pc}
   b63c4:	2003e744 	.word	0x2003e744
   b63c8:	2003e748 	.word	0x2003e748
   b63cc:	000b6351 	.word	0x000b6351

000b63d0 <_ZnajRKSt9nothrow_t>:
   b63d0:	f7fd be63 	b.w	b409a <_Znaj>

000b63d4 <_ZSt25__throw_bad_function_callv>:
   b63d4:	b508      	push	{r3, lr}
   b63d6:	f7fe feed 	bl	b51b4 <abort>
	...

000b63dc <__aeabi_drsub>:
   b63dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b63e0:	e002      	b.n	b63e8 <__adddf3>
   b63e2:	bf00      	nop

000b63e4 <__aeabi_dsub>:
   b63e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b63e8 <__adddf3>:
   b63e8:	b530      	push	{r4, r5, lr}
   b63ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b63ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b63f2:	ea94 0f05 	teq	r4, r5
   b63f6:	bf08      	it	eq
   b63f8:	ea90 0f02 	teqeq	r0, r2
   b63fc:	bf1f      	itttt	ne
   b63fe:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6402:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6406:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b640a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b640e:	f000 80e2 	beq.w	b65d6 <__adddf3+0x1ee>
   b6412:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6416:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b641a:	bfb8      	it	lt
   b641c:	426d      	neglt	r5, r5
   b641e:	dd0c      	ble.n	b643a <__adddf3+0x52>
   b6420:	442c      	add	r4, r5
   b6422:	ea80 0202 	eor.w	r2, r0, r2
   b6426:	ea81 0303 	eor.w	r3, r1, r3
   b642a:	ea82 0000 	eor.w	r0, r2, r0
   b642e:	ea83 0101 	eor.w	r1, r3, r1
   b6432:	ea80 0202 	eor.w	r2, r0, r2
   b6436:	ea81 0303 	eor.w	r3, r1, r3
   b643a:	2d36      	cmp	r5, #54	; 0x36
   b643c:	bf88      	it	hi
   b643e:	bd30      	pophi	{r4, r5, pc}
   b6440:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6444:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6448:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b644c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6450:	d002      	beq.n	b6458 <__adddf3+0x70>
   b6452:	4240      	negs	r0, r0
   b6454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6458:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b645c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6460:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6464:	d002      	beq.n	b646c <__adddf3+0x84>
   b6466:	4252      	negs	r2, r2
   b6468:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b646c:	ea94 0f05 	teq	r4, r5
   b6470:	f000 80a7 	beq.w	b65c2 <__adddf3+0x1da>
   b6474:	f1a4 0401 	sub.w	r4, r4, #1
   b6478:	f1d5 0e20 	rsbs	lr, r5, #32
   b647c:	db0d      	blt.n	b649a <__adddf3+0xb2>
   b647e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6482:	fa22 f205 	lsr.w	r2, r2, r5
   b6486:	1880      	adds	r0, r0, r2
   b6488:	f141 0100 	adc.w	r1, r1, #0
   b648c:	fa03 f20e 	lsl.w	r2, r3, lr
   b6490:	1880      	adds	r0, r0, r2
   b6492:	fa43 f305 	asr.w	r3, r3, r5
   b6496:	4159      	adcs	r1, r3
   b6498:	e00e      	b.n	b64b8 <__adddf3+0xd0>
   b649a:	f1a5 0520 	sub.w	r5, r5, #32
   b649e:	f10e 0e20 	add.w	lr, lr, #32
   b64a2:	2a01      	cmp	r2, #1
   b64a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b64a8:	bf28      	it	cs
   b64aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   b64ae:	fa43 f305 	asr.w	r3, r3, r5
   b64b2:	18c0      	adds	r0, r0, r3
   b64b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b64b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b64bc:	d507      	bpl.n	b64ce <__adddf3+0xe6>
   b64be:	f04f 0e00 	mov.w	lr, #0
   b64c2:	f1dc 0c00 	rsbs	ip, ip, #0
   b64c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b64ca:	eb6e 0101 	sbc.w	r1, lr, r1
   b64ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b64d2:	d31b      	bcc.n	b650c <__adddf3+0x124>
   b64d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b64d8:	d30c      	bcc.n	b64f4 <__adddf3+0x10c>
   b64da:	0849      	lsrs	r1, r1, #1
   b64dc:	ea5f 0030 	movs.w	r0, r0, rrx
   b64e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b64e4:	f104 0401 	add.w	r4, r4, #1
   b64e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b64ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b64f0:	f080 809a 	bcs.w	b6628 <__adddf3+0x240>
   b64f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b64f8:	bf08      	it	eq
   b64fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b64fe:	f150 0000 	adcs.w	r0, r0, #0
   b6502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6506:	ea41 0105 	orr.w	r1, r1, r5
   b650a:	bd30      	pop	{r4, r5, pc}
   b650c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6510:	4140      	adcs	r0, r0
   b6512:	eb41 0101 	adc.w	r1, r1, r1
   b6516:	3c01      	subs	r4, #1
   b6518:	bf28      	it	cs
   b651a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b651e:	d2e9      	bcs.n	b64f4 <__adddf3+0x10c>
   b6520:	f091 0f00 	teq	r1, #0
   b6524:	bf04      	itt	eq
   b6526:	4601      	moveq	r1, r0
   b6528:	2000      	moveq	r0, #0
   b652a:	fab1 f381 	clz	r3, r1
   b652e:	bf08      	it	eq
   b6530:	3320      	addeq	r3, #32
   b6532:	f1a3 030b 	sub.w	r3, r3, #11
   b6536:	f1b3 0220 	subs.w	r2, r3, #32
   b653a:	da0c      	bge.n	b6556 <__adddf3+0x16e>
   b653c:	320c      	adds	r2, #12
   b653e:	dd08      	ble.n	b6552 <__adddf3+0x16a>
   b6540:	f102 0c14 	add.w	ip, r2, #20
   b6544:	f1c2 020c 	rsb	r2, r2, #12
   b6548:	fa01 f00c 	lsl.w	r0, r1, ip
   b654c:	fa21 f102 	lsr.w	r1, r1, r2
   b6550:	e00c      	b.n	b656c <__adddf3+0x184>
   b6552:	f102 0214 	add.w	r2, r2, #20
   b6556:	bfd8      	it	le
   b6558:	f1c2 0c20 	rsble	ip, r2, #32
   b655c:	fa01 f102 	lsl.w	r1, r1, r2
   b6560:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6564:	bfdc      	itt	le
   b6566:	ea41 010c 	orrle.w	r1, r1, ip
   b656a:	4090      	lslle	r0, r2
   b656c:	1ae4      	subs	r4, r4, r3
   b656e:	bfa2      	ittt	ge
   b6570:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6574:	4329      	orrge	r1, r5
   b6576:	bd30      	popge	{r4, r5, pc}
   b6578:	ea6f 0404 	mvn.w	r4, r4
   b657c:	3c1f      	subs	r4, #31
   b657e:	da1c      	bge.n	b65ba <__adddf3+0x1d2>
   b6580:	340c      	adds	r4, #12
   b6582:	dc0e      	bgt.n	b65a2 <__adddf3+0x1ba>
   b6584:	f104 0414 	add.w	r4, r4, #20
   b6588:	f1c4 0220 	rsb	r2, r4, #32
   b658c:	fa20 f004 	lsr.w	r0, r0, r4
   b6590:	fa01 f302 	lsl.w	r3, r1, r2
   b6594:	ea40 0003 	orr.w	r0, r0, r3
   b6598:	fa21 f304 	lsr.w	r3, r1, r4
   b659c:	ea45 0103 	orr.w	r1, r5, r3
   b65a0:	bd30      	pop	{r4, r5, pc}
   b65a2:	f1c4 040c 	rsb	r4, r4, #12
   b65a6:	f1c4 0220 	rsb	r2, r4, #32
   b65aa:	fa20 f002 	lsr.w	r0, r0, r2
   b65ae:	fa01 f304 	lsl.w	r3, r1, r4
   b65b2:	ea40 0003 	orr.w	r0, r0, r3
   b65b6:	4629      	mov	r1, r5
   b65b8:	bd30      	pop	{r4, r5, pc}
   b65ba:	fa21 f004 	lsr.w	r0, r1, r4
   b65be:	4629      	mov	r1, r5
   b65c0:	bd30      	pop	{r4, r5, pc}
   b65c2:	f094 0f00 	teq	r4, #0
   b65c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b65ca:	bf06      	itte	eq
   b65cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b65d0:	3401      	addeq	r4, #1
   b65d2:	3d01      	subne	r5, #1
   b65d4:	e74e      	b.n	b6474 <__adddf3+0x8c>
   b65d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b65da:	bf18      	it	ne
   b65dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b65e0:	d029      	beq.n	b6636 <__adddf3+0x24e>
   b65e2:	ea94 0f05 	teq	r4, r5
   b65e6:	bf08      	it	eq
   b65e8:	ea90 0f02 	teqeq	r0, r2
   b65ec:	d005      	beq.n	b65fa <__adddf3+0x212>
   b65ee:	ea54 0c00 	orrs.w	ip, r4, r0
   b65f2:	bf04      	itt	eq
   b65f4:	4619      	moveq	r1, r3
   b65f6:	4610      	moveq	r0, r2
   b65f8:	bd30      	pop	{r4, r5, pc}
   b65fa:	ea91 0f03 	teq	r1, r3
   b65fe:	bf1e      	ittt	ne
   b6600:	2100      	movne	r1, #0
   b6602:	2000      	movne	r0, #0
   b6604:	bd30      	popne	{r4, r5, pc}
   b6606:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b660a:	d105      	bne.n	b6618 <__adddf3+0x230>
   b660c:	0040      	lsls	r0, r0, #1
   b660e:	4149      	adcs	r1, r1
   b6610:	bf28      	it	cs
   b6612:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6616:	bd30      	pop	{r4, r5, pc}
   b6618:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b661c:	bf3c      	itt	cc
   b661e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6622:	bd30      	popcc	{r4, r5, pc}
   b6624:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6628:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b662c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6630:	f04f 0000 	mov.w	r0, #0
   b6634:	bd30      	pop	{r4, r5, pc}
   b6636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b663a:	bf1a      	itte	ne
   b663c:	4619      	movne	r1, r3
   b663e:	4610      	movne	r0, r2
   b6640:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6644:	bf1c      	itt	ne
   b6646:	460b      	movne	r3, r1
   b6648:	4602      	movne	r2, r0
   b664a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b664e:	bf06      	itte	eq
   b6650:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6654:	ea91 0f03 	teqeq	r1, r3
   b6658:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b665c:	bd30      	pop	{r4, r5, pc}
   b665e:	bf00      	nop

000b6660 <__aeabi_ui2d>:
   b6660:	f090 0f00 	teq	r0, #0
   b6664:	bf04      	itt	eq
   b6666:	2100      	moveq	r1, #0
   b6668:	4770      	bxeq	lr
   b666a:	b530      	push	{r4, r5, lr}
   b666c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6670:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6674:	f04f 0500 	mov.w	r5, #0
   b6678:	f04f 0100 	mov.w	r1, #0
   b667c:	e750      	b.n	b6520 <__adddf3+0x138>
   b667e:	bf00      	nop

000b6680 <__aeabi_i2d>:
   b6680:	f090 0f00 	teq	r0, #0
   b6684:	bf04      	itt	eq
   b6686:	2100      	moveq	r1, #0
   b6688:	4770      	bxeq	lr
   b668a:	b530      	push	{r4, r5, lr}
   b668c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6690:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6694:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6698:	bf48      	it	mi
   b669a:	4240      	negmi	r0, r0
   b669c:	f04f 0100 	mov.w	r1, #0
   b66a0:	e73e      	b.n	b6520 <__adddf3+0x138>
   b66a2:	bf00      	nop

000b66a4 <__aeabi_f2d>:
   b66a4:	0042      	lsls	r2, r0, #1
   b66a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b66aa:	ea4f 0131 	mov.w	r1, r1, rrx
   b66ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b66b2:	bf1f      	itttt	ne
   b66b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b66b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b66bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b66c0:	4770      	bxne	lr
   b66c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b66c6:	bf08      	it	eq
   b66c8:	4770      	bxeq	lr
   b66ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b66ce:	bf04      	itt	eq
   b66d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b66d4:	4770      	bxeq	lr
   b66d6:	b530      	push	{r4, r5, lr}
   b66d8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b66dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b66e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b66e4:	e71c      	b.n	b6520 <__adddf3+0x138>
   b66e6:	bf00      	nop

000b66e8 <__aeabi_ul2d>:
   b66e8:	ea50 0201 	orrs.w	r2, r0, r1
   b66ec:	bf08      	it	eq
   b66ee:	4770      	bxeq	lr
   b66f0:	b530      	push	{r4, r5, lr}
   b66f2:	f04f 0500 	mov.w	r5, #0
   b66f6:	e00a      	b.n	b670e <__aeabi_l2d+0x16>

000b66f8 <__aeabi_l2d>:
   b66f8:	ea50 0201 	orrs.w	r2, r0, r1
   b66fc:	bf08      	it	eq
   b66fe:	4770      	bxeq	lr
   b6700:	b530      	push	{r4, r5, lr}
   b6702:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6706:	d502      	bpl.n	b670e <__aeabi_l2d+0x16>
   b6708:	4240      	negs	r0, r0
   b670a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b670e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6712:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6716:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b671a:	f43f aed8 	beq.w	b64ce <__adddf3+0xe6>
   b671e:	f04f 0203 	mov.w	r2, #3
   b6722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6726:	bf18      	it	ne
   b6728:	3203      	addne	r2, #3
   b672a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b672e:	bf18      	it	ne
   b6730:	3203      	addne	r2, #3
   b6732:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6736:	f1c2 0320 	rsb	r3, r2, #32
   b673a:	fa00 fc03 	lsl.w	ip, r0, r3
   b673e:	fa20 f002 	lsr.w	r0, r0, r2
   b6742:	fa01 fe03 	lsl.w	lr, r1, r3
   b6746:	ea40 000e 	orr.w	r0, r0, lr
   b674a:	fa21 f102 	lsr.w	r1, r1, r2
   b674e:	4414      	add	r4, r2
   b6750:	e6bd      	b.n	b64ce <__adddf3+0xe6>
   b6752:	bf00      	nop

000b6754 <__aeabi_dmul>:
   b6754:	b570      	push	{r4, r5, r6, lr}
   b6756:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b675a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b675e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6762:	bf1d      	ittte	ne
   b6764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6768:	ea94 0f0c 	teqne	r4, ip
   b676c:	ea95 0f0c 	teqne	r5, ip
   b6770:	f000 f8de 	bleq	b6930 <__aeabi_dmul+0x1dc>
   b6774:	442c      	add	r4, r5
   b6776:	ea81 0603 	eor.w	r6, r1, r3
   b677a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b677e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6782:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6786:	bf18      	it	ne
   b6788:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b678c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6794:	d038      	beq.n	b6808 <__aeabi_dmul+0xb4>
   b6796:	fba0 ce02 	umull	ip, lr, r0, r2
   b679a:	f04f 0500 	mov.w	r5, #0
   b679e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b67a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b67a6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b67aa:	f04f 0600 	mov.w	r6, #0
   b67ae:	fbe1 5603 	umlal	r5, r6, r1, r3
   b67b2:	f09c 0f00 	teq	ip, #0
   b67b6:	bf18      	it	ne
   b67b8:	f04e 0e01 	orrne.w	lr, lr, #1
   b67bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b67c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b67c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b67c8:	d204      	bcs.n	b67d4 <__aeabi_dmul+0x80>
   b67ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b67ce:	416d      	adcs	r5, r5
   b67d0:	eb46 0606 	adc.w	r6, r6, r6
   b67d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b67d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b67dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b67e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b67e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b67e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b67ec:	bf88      	it	hi
   b67ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b67f2:	d81e      	bhi.n	b6832 <__aeabi_dmul+0xde>
   b67f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b67f8:	bf08      	it	eq
   b67fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b67fe:	f150 0000 	adcs.w	r0, r0, #0
   b6802:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6806:	bd70      	pop	{r4, r5, r6, pc}
   b6808:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b680c:	ea46 0101 	orr.w	r1, r6, r1
   b6810:	ea40 0002 	orr.w	r0, r0, r2
   b6814:	ea81 0103 	eor.w	r1, r1, r3
   b6818:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b681c:	bfc2      	ittt	gt
   b681e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6826:	bd70      	popgt	{r4, r5, r6, pc}
   b6828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b682c:	f04f 0e00 	mov.w	lr, #0
   b6830:	3c01      	subs	r4, #1
   b6832:	f300 80ab 	bgt.w	b698c <__aeabi_dmul+0x238>
   b6836:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b683a:	bfde      	ittt	le
   b683c:	2000      	movle	r0, #0
   b683e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6842:	bd70      	pople	{r4, r5, r6, pc}
   b6844:	f1c4 0400 	rsb	r4, r4, #0
   b6848:	3c20      	subs	r4, #32
   b684a:	da35      	bge.n	b68b8 <__aeabi_dmul+0x164>
   b684c:	340c      	adds	r4, #12
   b684e:	dc1b      	bgt.n	b6888 <__aeabi_dmul+0x134>
   b6850:	f104 0414 	add.w	r4, r4, #20
   b6854:	f1c4 0520 	rsb	r5, r4, #32
   b6858:	fa00 f305 	lsl.w	r3, r0, r5
   b685c:	fa20 f004 	lsr.w	r0, r0, r4
   b6860:	fa01 f205 	lsl.w	r2, r1, r5
   b6864:	ea40 0002 	orr.w	r0, r0, r2
   b6868:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b686c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6874:	fa21 f604 	lsr.w	r6, r1, r4
   b6878:	eb42 0106 	adc.w	r1, r2, r6
   b687c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6880:	bf08      	it	eq
   b6882:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6886:	bd70      	pop	{r4, r5, r6, pc}
   b6888:	f1c4 040c 	rsb	r4, r4, #12
   b688c:	f1c4 0520 	rsb	r5, r4, #32
   b6890:	fa00 f304 	lsl.w	r3, r0, r4
   b6894:	fa20 f005 	lsr.w	r0, r0, r5
   b6898:	fa01 f204 	lsl.w	r2, r1, r4
   b689c:	ea40 0002 	orr.w	r0, r0, r2
   b68a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b68a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b68a8:	f141 0100 	adc.w	r1, r1, #0
   b68ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b68b0:	bf08      	it	eq
   b68b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b68b6:	bd70      	pop	{r4, r5, r6, pc}
   b68b8:	f1c4 0520 	rsb	r5, r4, #32
   b68bc:	fa00 f205 	lsl.w	r2, r0, r5
   b68c0:	ea4e 0e02 	orr.w	lr, lr, r2
   b68c4:	fa20 f304 	lsr.w	r3, r0, r4
   b68c8:	fa01 f205 	lsl.w	r2, r1, r5
   b68cc:	ea43 0302 	orr.w	r3, r3, r2
   b68d0:	fa21 f004 	lsr.w	r0, r1, r4
   b68d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b68d8:	fa21 f204 	lsr.w	r2, r1, r4
   b68dc:	ea20 0002 	bic.w	r0, r0, r2
   b68e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b68e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b68e8:	bf08      	it	eq
   b68ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b68ee:	bd70      	pop	{r4, r5, r6, pc}
   b68f0:	f094 0f00 	teq	r4, #0
   b68f4:	d10f      	bne.n	b6916 <__aeabi_dmul+0x1c2>
   b68f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b68fa:	0040      	lsls	r0, r0, #1
   b68fc:	eb41 0101 	adc.w	r1, r1, r1
   b6900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6904:	bf08      	it	eq
   b6906:	3c01      	subeq	r4, #1
   b6908:	d0f7      	beq.n	b68fa <__aeabi_dmul+0x1a6>
   b690a:	ea41 0106 	orr.w	r1, r1, r6
   b690e:	f095 0f00 	teq	r5, #0
   b6912:	bf18      	it	ne
   b6914:	4770      	bxne	lr
   b6916:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b691a:	0052      	lsls	r2, r2, #1
   b691c:	eb43 0303 	adc.w	r3, r3, r3
   b6920:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6924:	bf08      	it	eq
   b6926:	3d01      	subeq	r5, #1
   b6928:	d0f7      	beq.n	b691a <__aeabi_dmul+0x1c6>
   b692a:	ea43 0306 	orr.w	r3, r3, r6
   b692e:	4770      	bx	lr
   b6930:	ea94 0f0c 	teq	r4, ip
   b6934:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6938:	bf18      	it	ne
   b693a:	ea95 0f0c 	teqne	r5, ip
   b693e:	d00c      	beq.n	b695a <__aeabi_dmul+0x206>
   b6940:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6944:	bf18      	it	ne
   b6946:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b694a:	d1d1      	bne.n	b68f0 <__aeabi_dmul+0x19c>
   b694c:	ea81 0103 	eor.w	r1, r1, r3
   b6950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6954:	f04f 0000 	mov.w	r0, #0
   b6958:	bd70      	pop	{r4, r5, r6, pc}
   b695a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b695e:	bf06      	itte	eq
   b6960:	4610      	moveq	r0, r2
   b6962:	4619      	moveq	r1, r3
   b6964:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6968:	d019      	beq.n	b699e <__aeabi_dmul+0x24a>
   b696a:	ea94 0f0c 	teq	r4, ip
   b696e:	d102      	bne.n	b6976 <__aeabi_dmul+0x222>
   b6970:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6974:	d113      	bne.n	b699e <__aeabi_dmul+0x24a>
   b6976:	ea95 0f0c 	teq	r5, ip
   b697a:	d105      	bne.n	b6988 <__aeabi_dmul+0x234>
   b697c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6980:	bf1c      	itt	ne
   b6982:	4610      	movne	r0, r2
   b6984:	4619      	movne	r1, r3
   b6986:	d10a      	bne.n	b699e <__aeabi_dmul+0x24a>
   b6988:	ea81 0103 	eor.w	r1, r1, r3
   b698c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6990:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6994:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6998:	f04f 0000 	mov.w	r0, #0
   b699c:	bd70      	pop	{r4, r5, r6, pc}
   b699e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b69a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b69a6:	bd70      	pop	{r4, r5, r6, pc}

000b69a8 <__aeabi_ddiv>:
   b69a8:	b570      	push	{r4, r5, r6, lr}
   b69aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b69ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b69b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b69b6:	bf1d      	ittte	ne
   b69b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b69bc:	ea94 0f0c 	teqne	r4, ip
   b69c0:	ea95 0f0c 	teqne	r5, ip
   b69c4:	f000 f8a7 	bleq	b6b16 <__aeabi_ddiv+0x16e>
   b69c8:	eba4 0405 	sub.w	r4, r4, r5
   b69cc:	ea81 0e03 	eor.w	lr, r1, r3
   b69d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b69d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b69d8:	f000 8088 	beq.w	b6aec <__aeabi_ddiv+0x144>
   b69dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b69e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b69e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b69e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b69ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b69f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b69f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b69f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b69fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6a00:	429d      	cmp	r5, r3
   b6a02:	bf08      	it	eq
   b6a04:	4296      	cmpeq	r6, r2
   b6a06:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6a0a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6a0e:	d202      	bcs.n	b6a16 <__aeabi_ddiv+0x6e>
   b6a10:	085b      	lsrs	r3, r3, #1
   b6a12:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a16:	1ab6      	subs	r6, r6, r2
   b6a18:	eb65 0503 	sbc.w	r5, r5, r3
   b6a1c:	085b      	lsrs	r3, r3, #1
   b6a1e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6a26:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6a2a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a32:	bf22      	ittt	cs
   b6a34:	1ab6      	subcs	r6, r6, r2
   b6a36:	4675      	movcs	r5, lr
   b6a38:	ea40 000c 	orrcs.w	r0, r0, ip
   b6a3c:	085b      	lsrs	r3, r3, #1
   b6a3e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a42:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a46:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a4a:	bf22      	ittt	cs
   b6a4c:	1ab6      	subcs	r6, r6, r2
   b6a4e:	4675      	movcs	r5, lr
   b6a50:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6a54:	085b      	lsrs	r3, r3, #1
   b6a56:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a5a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a62:	bf22      	ittt	cs
   b6a64:	1ab6      	subcs	r6, r6, r2
   b6a66:	4675      	movcs	r5, lr
   b6a68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6a6c:	085b      	lsrs	r3, r3, #1
   b6a6e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a72:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a76:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a7a:	bf22      	ittt	cs
   b6a7c:	1ab6      	subcs	r6, r6, r2
   b6a7e:	4675      	movcs	r5, lr
   b6a80:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6a84:	ea55 0e06 	orrs.w	lr, r5, r6
   b6a88:	d018      	beq.n	b6abc <__aeabi_ddiv+0x114>
   b6a8a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6a8e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6a92:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6a96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6a9a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6a9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6aa2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6aa6:	d1c0      	bne.n	b6a2a <__aeabi_ddiv+0x82>
   b6aa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6aac:	d10b      	bne.n	b6ac6 <__aeabi_ddiv+0x11e>
   b6aae:	ea41 0100 	orr.w	r1, r1, r0
   b6ab2:	f04f 0000 	mov.w	r0, #0
   b6ab6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6aba:	e7b6      	b.n	b6a2a <__aeabi_ddiv+0x82>
   b6abc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6ac0:	bf04      	itt	eq
   b6ac2:	4301      	orreq	r1, r0
   b6ac4:	2000      	moveq	r0, #0
   b6ac6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6aca:	bf88      	it	hi
   b6acc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6ad0:	f63f aeaf 	bhi.w	b6832 <__aeabi_dmul+0xde>
   b6ad4:	ebb5 0c03 	subs.w	ip, r5, r3
   b6ad8:	bf04      	itt	eq
   b6ada:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6ade:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6ae2:	f150 0000 	adcs.w	r0, r0, #0
   b6ae6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6aea:	bd70      	pop	{r4, r5, r6, pc}
   b6aec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6af0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6af4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6af8:	bfc2      	ittt	gt
   b6afa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6afe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6b02:	bd70      	popgt	{r4, r5, r6, pc}
   b6b04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6b08:	f04f 0e00 	mov.w	lr, #0
   b6b0c:	3c01      	subs	r4, #1
   b6b0e:	e690      	b.n	b6832 <__aeabi_dmul+0xde>
   b6b10:	ea45 0e06 	orr.w	lr, r5, r6
   b6b14:	e68d      	b.n	b6832 <__aeabi_dmul+0xde>
   b6b16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6b1a:	ea94 0f0c 	teq	r4, ip
   b6b1e:	bf08      	it	eq
   b6b20:	ea95 0f0c 	teqeq	r5, ip
   b6b24:	f43f af3b 	beq.w	b699e <__aeabi_dmul+0x24a>
   b6b28:	ea94 0f0c 	teq	r4, ip
   b6b2c:	d10a      	bne.n	b6b44 <__aeabi_ddiv+0x19c>
   b6b2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6b32:	f47f af34 	bne.w	b699e <__aeabi_dmul+0x24a>
   b6b36:	ea95 0f0c 	teq	r5, ip
   b6b3a:	f47f af25 	bne.w	b6988 <__aeabi_dmul+0x234>
   b6b3e:	4610      	mov	r0, r2
   b6b40:	4619      	mov	r1, r3
   b6b42:	e72c      	b.n	b699e <__aeabi_dmul+0x24a>
   b6b44:	ea95 0f0c 	teq	r5, ip
   b6b48:	d106      	bne.n	b6b58 <__aeabi_ddiv+0x1b0>
   b6b4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6b4e:	f43f aefd 	beq.w	b694c <__aeabi_dmul+0x1f8>
   b6b52:	4610      	mov	r0, r2
   b6b54:	4619      	mov	r1, r3
   b6b56:	e722      	b.n	b699e <__aeabi_dmul+0x24a>
   b6b58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6b5c:	bf18      	it	ne
   b6b5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6b62:	f47f aec5 	bne.w	b68f0 <__aeabi_dmul+0x19c>
   b6b66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6b6a:	f47f af0d 	bne.w	b6988 <__aeabi_dmul+0x234>
   b6b6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6b72:	f47f aeeb 	bne.w	b694c <__aeabi_dmul+0x1f8>
   b6b76:	e712      	b.n	b699e <__aeabi_dmul+0x24a>

000b6b78 <__aeabi_d2uiz>:
   b6b78:	004a      	lsls	r2, r1, #1
   b6b7a:	d211      	bcs.n	b6ba0 <__aeabi_d2uiz+0x28>
   b6b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6b80:	d211      	bcs.n	b6ba6 <__aeabi_d2uiz+0x2e>
   b6b82:	d50d      	bpl.n	b6ba0 <__aeabi_d2uiz+0x28>
   b6b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6b8c:	d40e      	bmi.n	b6bac <__aeabi_d2uiz+0x34>
   b6b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6b9a:	fa23 f002 	lsr.w	r0, r3, r2
   b6b9e:	4770      	bx	lr
   b6ba0:	f04f 0000 	mov.w	r0, #0
   b6ba4:	4770      	bx	lr
   b6ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6baa:	d102      	bne.n	b6bb2 <__aeabi_d2uiz+0x3a>
   b6bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6bb0:	4770      	bx	lr
   b6bb2:	f04f 0000 	mov.w	r0, #0
   b6bb6:	4770      	bx	lr

000b6bb8 <__aeabi_ldivmod>:
   b6bb8:	b97b      	cbnz	r3, b6bda <__aeabi_ldivmod+0x22>
   b6bba:	b972      	cbnz	r2, b6bda <__aeabi_ldivmod+0x22>
   b6bbc:	2900      	cmp	r1, #0
   b6bbe:	bfbe      	ittt	lt
   b6bc0:	2000      	movlt	r0, #0
   b6bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b6bc6:	e006      	blt.n	b6bd6 <__aeabi_ldivmod+0x1e>
   b6bc8:	bf08      	it	eq
   b6bca:	2800      	cmpeq	r0, #0
   b6bcc:	bf1c      	itt	ne
   b6bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b6bd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b6bd6:	f000 b9a7 	b.w	b6f28 <__aeabi_idiv0>
   b6bda:	f1ad 0c08 	sub.w	ip, sp, #8
   b6bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b6be2:	2900      	cmp	r1, #0
   b6be4:	db09      	blt.n	b6bfa <__aeabi_ldivmod+0x42>
   b6be6:	2b00      	cmp	r3, #0
   b6be8:	db1a      	blt.n	b6c20 <__aeabi_ldivmod+0x68>
   b6bea:	f000 f835 	bl	b6c58 <__udivmoddi4>
   b6bee:	f8dd e004 	ldr.w	lr, [sp, #4]
   b6bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6bf6:	b004      	add	sp, #16
   b6bf8:	4770      	bx	lr
   b6bfa:	4240      	negs	r0, r0
   b6bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6c00:	2b00      	cmp	r3, #0
   b6c02:	db1b      	blt.n	b6c3c <__aeabi_ldivmod+0x84>
   b6c04:	f000 f828 	bl	b6c58 <__udivmoddi4>
   b6c08:	f8dd e004 	ldr.w	lr, [sp, #4]
   b6c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6c10:	b004      	add	sp, #16
   b6c12:	4240      	negs	r0, r0
   b6c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6c18:	4252      	negs	r2, r2
   b6c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6c1e:	4770      	bx	lr
   b6c20:	4252      	negs	r2, r2
   b6c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6c26:	f000 f817 	bl	b6c58 <__udivmoddi4>
   b6c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
   b6c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6c32:	b004      	add	sp, #16
   b6c34:	4240      	negs	r0, r0
   b6c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6c3a:	4770      	bx	lr
   b6c3c:	4252      	negs	r2, r2
   b6c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6c42:	f000 f809 	bl	b6c58 <__udivmoddi4>
   b6c46:	f8dd e004 	ldr.w	lr, [sp, #4]
   b6c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6c4e:	b004      	add	sp, #16
   b6c50:	4252      	negs	r2, r2
   b6c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6c56:	4770      	bx	lr

000b6c58 <__udivmoddi4>:
   b6c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6c5c:	9d08      	ldr	r5, [sp, #32]
   b6c5e:	4604      	mov	r4, r0
   b6c60:	468e      	mov	lr, r1
   b6c62:	2b00      	cmp	r3, #0
   b6c64:	d14d      	bne.n	b6d02 <__udivmoddi4+0xaa>
   b6c66:	428a      	cmp	r2, r1
   b6c68:	4694      	mov	ip, r2
   b6c6a:	d969      	bls.n	b6d40 <__udivmoddi4+0xe8>
   b6c6c:	fab2 f282 	clz	r2, r2
   b6c70:	b152      	cbz	r2, b6c88 <__udivmoddi4+0x30>
   b6c72:	fa01 f302 	lsl.w	r3, r1, r2
   b6c76:	f1c2 0120 	rsb	r1, r2, #32
   b6c7a:	fa20 f101 	lsr.w	r1, r0, r1
   b6c7e:	fa0c fc02 	lsl.w	ip, ip, r2
   b6c82:	ea41 0e03 	orr.w	lr, r1, r3
   b6c86:	4094      	lsls	r4, r2
   b6c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b6c8c:	0c21      	lsrs	r1, r4, #16
   b6c8e:	fbbe f6f8 	udiv	r6, lr, r8
   b6c92:	fa1f f78c 	uxth.w	r7, ip
   b6c96:	fb08 e316 	mls	r3, r8, r6, lr
   b6c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b6c9e:	fb06 f107 	mul.w	r1, r6, r7
   b6ca2:	4299      	cmp	r1, r3
   b6ca4:	d90a      	bls.n	b6cbc <__udivmoddi4+0x64>
   b6ca6:	eb1c 0303 	adds.w	r3, ip, r3
   b6caa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b6cae:	f080 811f 	bcs.w	b6ef0 <__udivmoddi4+0x298>
   b6cb2:	4299      	cmp	r1, r3
   b6cb4:	f240 811c 	bls.w	b6ef0 <__udivmoddi4+0x298>
   b6cb8:	3e02      	subs	r6, #2
   b6cba:	4463      	add	r3, ip
   b6cbc:	1a5b      	subs	r3, r3, r1
   b6cbe:	b2a4      	uxth	r4, r4
   b6cc0:	fbb3 f0f8 	udiv	r0, r3, r8
   b6cc4:	fb08 3310 	mls	r3, r8, r0, r3
   b6cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b6ccc:	fb00 f707 	mul.w	r7, r0, r7
   b6cd0:	42a7      	cmp	r7, r4
   b6cd2:	d90a      	bls.n	b6cea <__udivmoddi4+0x92>
   b6cd4:	eb1c 0404 	adds.w	r4, ip, r4
   b6cd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6cdc:	f080 810a 	bcs.w	b6ef4 <__udivmoddi4+0x29c>
   b6ce0:	42a7      	cmp	r7, r4
   b6ce2:	f240 8107 	bls.w	b6ef4 <__udivmoddi4+0x29c>
   b6ce6:	4464      	add	r4, ip
   b6ce8:	3802      	subs	r0, #2
   b6cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b6cee:	1be4      	subs	r4, r4, r7
   b6cf0:	2600      	movs	r6, #0
   b6cf2:	b11d      	cbz	r5, b6cfc <__udivmoddi4+0xa4>
   b6cf4:	40d4      	lsrs	r4, r2
   b6cf6:	2300      	movs	r3, #0
   b6cf8:	e9c5 4300 	strd	r4, r3, [r5]
   b6cfc:	4631      	mov	r1, r6
   b6cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6d02:	428b      	cmp	r3, r1
   b6d04:	d909      	bls.n	b6d1a <__udivmoddi4+0xc2>
   b6d06:	2d00      	cmp	r5, #0
   b6d08:	f000 80ef 	beq.w	b6eea <__udivmoddi4+0x292>
   b6d0c:	2600      	movs	r6, #0
   b6d0e:	e9c5 0100 	strd	r0, r1, [r5]
   b6d12:	4630      	mov	r0, r6
   b6d14:	4631      	mov	r1, r6
   b6d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6d1a:	fab3 f683 	clz	r6, r3
   b6d1e:	2e00      	cmp	r6, #0
   b6d20:	d14a      	bne.n	b6db8 <__udivmoddi4+0x160>
   b6d22:	428b      	cmp	r3, r1
   b6d24:	d302      	bcc.n	b6d2c <__udivmoddi4+0xd4>
   b6d26:	4282      	cmp	r2, r0
   b6d28:	f200 80f9 	bhi.w	b6f1e <__udivmoddi4+0x2c6>
   b6d2c:	1a84      	subs	r4, r0, r2
   b6d2e:	eb61 0303 	sbc.w	r3, r1, r3
   b6d32:	2001      	movs	r0, #1
   b6d34:	469e      	mov	lr, r3
   b6d36:	2d00      	cmp	r5, #0
   b6d38:	d0e0      	beq.n	b6cfc <__udivmoddi4+0xa4>
   b6d3a:	e9c5 4e00 	strd	r4, lr, [r5]
   b6d3e:	e7dd      	b.n	b6cfc <__udivmoddi4+0xa4>
   b6d40:	b902      	cbnz	r2, b6d44 <__udivmoddi4+0xec>
   b6d42:	deff      	udf	#255	; 0xff
   b6d44:	fab2 f282 	clz	r2, r2
   b6d48:	2a00      	cmp	r2, #0
   b6d4a:	f040 8092 	bne.w	b6e72 <__udivmoddi4+0x21a>
   b6d4e:	eba1 010c 	sub.w	r1, r1, ip
   b6d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b6d56:	fa1f fe8c 	uxth.w	lr, ip
   b6d5a:	2601      	movs	r6, #1
   b6d5c:	0c20      	lsrs	r0, r4, #16
   b6d5e:	fbb1 f3f7 	udiv	r3, r1, r7
   b6d62:	fb07 1113 	mls	r1, r7, r3, r1
   b6d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b6d6a:	fb0e f003 	mul.w	r0, lr, r3
   b6d6e:	4288      	cmp	r0, r1
   b6d70:	d908      	bls.n	b6d84 <__udivmoddi4+0x12c>
   b6d72:	eb1c 0101 	adds.w	r1, ip, r1
   b6d76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b6d7a:	d202      	bcs.n	b6d82 <__udivmoddi4+0x12a>
   b6d7c:	4288      	cmp	r0, r1
   b6d7e:	f200 80cb 	bhi.w	b6f18 <__udivmoddi4+0x2c0>
   b6d82:	4643      	mov	r3, r8
   b6d84:	1a09      	subs	r1, r1, r0
   b6d86:	b2a4      	uxth	r4, r4
   b6d88:	fbb1 f0f7 	udiv	r0, r1, r7
   b6d8c:	fb07 1110 	mls	r1, r7, r0, r1
   b6d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b6d94:	fb0e fe00 	mul.w	lr, lr, r0
   b6d98:	45a6      	cmp	lr, r4
   b6d9a:	d908      	bls.n	b6dae <__udivmoddi4+0x156>
   b6d9c:	eb1c 0404 	adds.w	r4, ip, r4
   b6da0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b6da4:	d202      	bcs.n	b6dac <__udivmoddi4+0x154>
   b6da6:	45a6      	cmp	lr, r4
   b6da8:	f200 80bb 	bhi.w	b6f22 <__udivmoddi4+0x2ca>
   b6dac:	4608      	mov	r0, r1
   b6dae:	eba4 040e 	sub.w	r4, r4, lr
   b6db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b6db6:	e79c      	b.n	b6cf2 <__udivmoddi4+0x9a>
   b6db8:	f1c6 0720 	rsb	r7, r6, #32
   b6dbc:	40b3      	lsls	r3, r6
   b6dbe:	fa22 fc07 	lsr.w	ip, r2, r7
   b6dc2:	ea4c 0c03 	orr.w	ip, ip, r3
   b6dc6:	fa20 f407 	lsr.w	r4, r0, r7
   b6dca:	fa01 f306 	lsl.w	r3, r1, r6
   b6dce:	431c      	orrs	r4, r3
   b6dd0:	40f9      	lsrs	r1, r7
   b6dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b6dd6:	fa00 f306 	lsl.w	r3, r0, r6
   b6dda:	fbb1 f8f9 	udiv	r8, r1, r9
   b6dde:	0c20      	lsrs	r0, r4, #16
   b6de0:	fa1f fe8c 	uxth.w	lr, ip
   b6de4:	fb09 1118 	mls	r1, r9, r8, r1
   b6de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b6dec:	fb08 f00e 	mul.w	r0, r8, lr
   b6df0:	4288      	cmp	r0, r1
   b6df2:	fa02 f206 	lsl.w	r2, r2, r6
   b6df6:	d90b      	bls.n	b6e10 <__udivmoddi4+0x1b8>
   b6df8:	eb1c 0101 	adds.w	r1, ip, r1
   b6dfc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b6e00:	f080 8088 	bcs.w	b6f14 <__udivmoddi4+0x2bc>
   b6e04:	4288      	cmp	r0, r1
   b6e06:	f240 8085 	bls.w	b6f14 <__udivmoddi4+0x2bc>
   b6e0a:	f1a8 0802 	sub.w	r8, r8, #2
   b6e0e:	4461      	add	r1, ip
   b6e10:	1a09      	subs	r1, r1, r0
   b6e12:	b2a4      	uxth	r4, r4
   b6e14:	fbb1 f0f9 	udiv	r0, r1, r9
   b6e18:	fb09 1110 	mls	r1, r9, r0, r1
   b6e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b6e20:	fb00 fe0e 	mul.w	lr, r0, lr
   b6e24:	458e      	cmp	lr, r1
   b6e26:	d908      	bls.n	b6e3a <__udivmoddi4+0x1e2>
   b6e28:	eb1c 0101 	adds.w	r1, ip, r1
   b6e2c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b6e30:	d26c      	bcs.n	b6f0c <__udivmoddi4+0x2b4>
   b6e32:	458e      	cmp	lr, r1
   b6e34:	d96a      	bls.n	b6f0c <__udivmoddi4+0x2b4>
   b6e36:	3802      	subs	r0, #2
   b6e38:	4461      	add	r1, ip
   b6e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b6e3e:	fba0 9402 	umull	r9, r4, r0, r2
   b6e42:	eba1 010e 	sub.w	r1, r1, lr
   b6e46:	42a1      	cmp	r1, r4
   b6e48:	46c8      	mov	r8, r9
   b6e4a:	46a6      	mov	lr, r4
   b6e4c:	d356      	bcc.n	b6efc <__udivmoddi4+0x2a4>
   b6e4e:	d053      	beq.n	b6ef8 <__udivmoddi4+0x2a0>
   b6e50:	b15d      	cbz	r5, b6e6a <__udivmoddi4+0x212>
   b6e52:	ebb3 0208 	subs.w	r2, r3, r8
   b6e56:	eb61 010e 	sbc.w	r1, r1, lr
   b6e5a:	fa01 f707 	lsl.w	r7, r1, r7
   b6e5e:	fa22 f306 	lsr.w	r3, r2, r6
   b6e62:	40f1      	lsrs	r1, r6
   b6e64:	431f      	orrs	r7, r3
   b6e66:	e9c5 7100 	strd	r7, r1, [r5]
   b6e6a:	2600      	movs	r6, #0
   b6e6c:	4631      	mov	r1, r6
   b6e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6e72:	f1c2 0320 	rsb	r3, r2, #32
   b6e76:	40d8      	lsrs	r0, r3
   b6e78:	fa0c fc02 	lsl.w	ip, ip, r2
   b6e7c:	fa21 f303 	lsr.w	r3, r1, r3
   b6e80:	4091      	lsls	r1, r2
   b6e82:	4301      	orrs	r1, r0
   b6e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b6e88:	fa1f fe8c 	uxth.w	lr, ip
   b6e8c:	fbb3 f0f7 	udiv	r0, r3, r7
   b6e90:	fb07 3610 	mls	r6, r7, r0, r3
   b6e94:	0c0b      	lsrs	r3, r1, #16
   b6e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b6e9a:	fb00 f60e 	mul.w	r6, r0, lr
   b6e9e:	429e      	cmp	r6, r3
   b6ea0:	fa04 f402 	lsl.w	r4, r4, r2
   b6ea4:	d908      	bls.n	b6eb8 <__udivmoddi4+0x260>
   b6ea6:	eb1c 0303 	adds.w	r3, ip, r3
   b6eaa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b6eae:	d22f      	bcs.n	b6f10 <__udivmoddi4+0x2b8>
   b6eb0:	429e      	cmp	r6, r3
   b6eb2:	d92d      	bls.n	b6f10 <__udivmoddi4+0x2b8>
   b6eb4:	3802      	subs	r0, #2
   b6eb6:	4463      	add	r3, ip
   b6eb8:	1b9b      	subs	r3, r3, r6
   b6eba:	b289      	uxth	r1, r1
   b6ebc:	fbb3 f6f7 	udiv	r6, r3, r7
   b6ec0:	fb07 3316 	mls	r3, r7, r6, r3
   b6ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b6ec8:	fb06 f30e 	mul.w	r3, r6, lr
   b6ecc:	428b      	cmp	r3, r1
   b6ece:	d908      	bls.n	b6ee2 <__udivmoddi4+0x28a>
   b6ed0:	eb1c 0101 	adds.w	r1, ip, r1
   b6ed4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b6ed8:	d216      	bcs.n	b6f08 <__udivmoddi4+0x2b0>
   b6eda:	428b      	cmp	r3, r1
   b6edc:	d914      	bls.n	b6f08 <__udivmoddi4+0x2b0>
   b6ede:	3e02      	subs	r6, #2
   b6ee0:	4461      	add	r1, ip
   b6ee2:	1ac9      	subs	r1, r1, r3
   b6ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b6ee8:	e738      	b.n	b6d5c <__udivmoddi4+0x104>
   b6eea:	462e      	mov	r6, r5
   b6eec:	4628      	mov	r0, r5
   b6eee:	e705      	b.n	b6cfc <__udivmoddi4+0xa4>
   b6ef0:	4606      	mov	r6, r0
   b6ef2:	e6e3      	b.n	b6cbc <__udivmoddi4+0x64>
   b6ef4:	4618      	mov	r0, r3
   b6ef6:	e6f8      	b.n	b6cea <__udivmoddi4+0x92>
   b6ef8:	454b      	cmp	r3, r9
   b6efa:	d2a9      	bcs.n	b6e50 <__udivmoddi4+0x1f8>
   b6efc:	ebb9 0802 	subs.w	r8, r9, r2
   b6f00:	eb64 0e0c 	sbc.w	lr, r4, ip
   b6f04:	3801      	subs	r0, #1
   b6f06:	e7a3      	b.n	b6e50 <__udivmoddi4+0x1f8>
   b6f08:	4646      	mov	r6, r8
   b6f0a:	e7ea      	b.n	b6ee2 <__udivmoddi4+0x28a>
   b6f0c:	4620      	mov	r0, r4
   b6f0e:	e794      	b.n	b6e3a <__udivmoddi4+0x1e2>
   b6f10:	4640      	mov	r0, r8
   b6f12:	e7d1      	b.n	b6eb8 <__udivmoddi4+0x260>
   b6f14:	46d0      	mov	r8, sl
   b6f16:	e77b      	b.n	b6e10 <__udivmoddi4+0x1b8>
   b6f18:	3b02      	subs	r3, #2
   b6f1a:	4461      	add	r1, ip
   b6f1c:	e732      	b.n	b6d84 <__udivmoddi4+0x12c>
   b6f1e:	4630      	mov	r0, r6
   b6f20:	e709      	b.n	b6d36 <__udivmoddi4+0xde>
   b6f22:	4464      	add	r4, ip
   b6f24:	3802      	subs	r0, #2
   b6f26:	e742      	b.n	b6dae <__udivmoddi4+0x156>

000b6f28 <__aeabi_idiv0>:
   b6f28:	4770      	bx	lr
   b6f2a:	bf00      	nop

000b6f2c <atexit>:
   b6f2c:	2300      	movs	r3, #0
   b6f2e:	4601      	mov	r1, r0
   b6f30:	461a      	mov	r2, r3
   b6f32:	4618      	mov	r0, r3
   b6f34:	f000 b874 	b.w	b7020 <__register_exitproc>

000b6f38 <memcpy>:
   b6f38:	440a      	add	r2, r1
   b6f3a:	4291      	cmp	r1, r2
   b6f3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6f40:	d100      	bne.n	b6f44 <memcpy+0xc>
   b6f42:	4770      	bx	lr
   b6f44:	b510      	push	{r4, lr}
   b6f46:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6f4e:	4291      	cmp	r1, r2
   b6f50:	d1f9      	bne.n	b6f46 <memcpy+0xe>
   b6f52:	bd10      	pop	{r4, pc}

000b6f54 <memset>:
   b6f54:	4402      	add	r2, r0
   b6f56:	4603      	mov	r3, r0
   b6f58:	4293      	cmp	r3, r2
   b6f5a:	d100      	bne.n	b6f5e <memset+0xa>
   b6f5c:	4770      	bx	lr
   b6f5e:	f803 1b01 	strb.w	r1, [r3], #1
   b6f62:	e7f9      	b.n	b6f58 <memset+0x4>

000b6f64 <srand>:
   b6f64:	b538      	push	{r3, r4, r5, lr}
   b6f66:	4b10      	ldr	r3, [pc, #64]	; (b6fa8 <srand+0x44>)
   b6f68:	681d      	ldr	r5, [r3, #0]
   b6f6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6f6c:	4604      	mov	r4, r0
   b6f6e:	b9b3      	cbnz	r3, b6f9e <srand+0x3a>
   b6f70:	2018      	movs	r0, #24
   b6f72:	f7fe f8ff 	bl	b5174 <malloc>
   b6f76:	4602      	mov	r2, r0
   b6f78:	63a8      	str	r0, [r5, #56]	; 0x38
   b6f7a:	b920      	cbnz	r0, b6f86 <srand+0x22>
   b6f7c:	4b0b      	ldr	r3, [pc, #44]	; (b6fac <srand+0x48>)
   b6f7e:	480c      	ldr	r0, [pc, #48]	; (b6fb0 <srand+0x4c>)
   b6f80:	2142      	movs	r1, #66	; 0x42
   b6f82:	f7fe f927 	bl	b51d4 <__assert_func>
   b6f86:	490b      	ldr	r1, [pc, #44]	; (b6fb4 <srand+0x50>)
   b6f88:	4b0b      	ldr	r3, [pc, #44]	; (b6fb8 <srand+0x54>)
   b6f8a:	e9c0 1300 	strd	r1, r3, [r0]
   b6f8e:	4b0b      	ldr	r3, [pc, #44]	; (b6fbc <srand+0x58>)
   b6f90:	6083      	str	r3, [r0, #8]
   b6f92:	230b      	movs	r3, #11
   b6f94:	8183      	strh	r3, [r0, #12]
   b6f96:	2100      	movs	r1, #0
   b6f98:	2001      	movs	r0, #1
   b6f9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6f9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6fa0:	2200      	movs	r2, #0
   b6fa2:	611c      	str	r4, [r3, #16]
   b6fa4:	615a      	str	r2, [r3, #20]
   b6fa6:	bd38      	pop	{r3, r4, r5, pc}
   b6fa8:	2003e5a0 	.word	0x2003e5a0
   b6fac:	000b74b1 	.word	0x000b74b1
   b6fb0:	000b74c8 	.word	0x000b74c8
   b6fb4:	abcd330e 	.word	0xabcd330e
   b6fb8:	e66d1234 	.word	0xe66d1234
   b6fbc:	0005deec 	.word	0x0005deec

000b6fc0 <strcmp>:
   b6fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6fc8:	2a01      	cmp	r2, #1
   b6fca:	bf28      	it	cs
   b6fcc:	429a      	cmpcs	r2, r3
   b6fce:	d0f7      	beq.n	b6fc0 <strcmp>
   b6fd0:	1ad0      	subs	r0, r2, r3
   b6fd2:	4770      	bx	lr

000b6fd4 <strdup>:
   b6fd4:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <strdup+0xc>)
   b6fd6:	4601      	mov	r1, r0
   b6fd8:	6818      	ldr	r0, [r3, #0]
   b6fda:	f000 b803 	b.w	b6fe4 <_strdup_r>
   b6fde:	bf00      	nop
   b6fe0:	2003e5a0 	.word	0x2003e5a0

000b6fe4 <_strdup_r>:
   b6fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6fe6:	4604      	mov	r4, r0
   b6fe8:	4608      	mov	r0, r1
   b6fea:	460d      	mov	r5, r1
   b6fec:	f000 f80f 	bl	b700e <strlen>
   b6ff0:	1c42      	adds	r2, r0, #1
   b6ff2:	4611      	mov	r1, r2
   b6ff4:	4620      	mov	r0, r4
   b6ff6:	9201      	str	r2, [sp, #4]
   b6ff8:	f7fe f8e4 	bl	b51c4 <_malloc_r>
   b6ffc:	4604      	mov	r4, r0
   b6ffe:	b118      	cbz	r0, b7008 <_strdup_r+0x24>
   b7000:	9a01      	ldr	r2, [sp, #4]
   b7002:	4629      	mov	r1, r5
   b7004:	f7ff ff98 	bl	b6f38 <memcpy>
   b7008:	4620      	mov	r0, r4
   b700a:	b003      	add	sp, #12
   b700c:	bd30      	pop	{r4, r5, pc}

000b700e <strlen>:
   b700e:	4603      	mov	r3, r0
   b7010:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7014:	2a00      	cmp	r2, #0
   b7016:	d1fb      	bne.n	b7010 <strlen+0x2>
   b7018:	1a18      	subs	r0, r3, r0
   b701a:	3801      	subs	r0, #1
   b701c:	4770      	bx	lr
	...

000b7020 <__register_exitproc>:
   b7020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7024:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b70e0 <__register_exitproc+0xc0>
   b7028:	4606      	mov	r6, r0
   b702a:	f8d8 0000 	ldr.w	r0, [r8]
   b702e:	461f      	mov	r7, r3
   b7030:	460d      	mov	r5, r1
   b7032:	4691      	mov	r9, r2
   b7034:	f000 f856 	bl	b70e4 <__retarget_lock_acquire_recursive>
   b7038:	4b25      	ldr	r3, [pc, #148]	; (b70d0 <__register_exitproc+0xb0>)
   b703a:	681c      	ldr	r4, [r3, #0]
   b703c:	b934      	cbnz	r4, b704c <__register_exitproc+0x2c>
   b703e:	4c25      	ldr	r4, [pc, #148]	; (b70d4 <__register_exitproc+0xb4>)
   b7040:	601c      	str	r4, [r3, #0]
   b7042:	4b25      	ldr	r3, [pc, #148]	; (b70d8 <__register_exitproc+0xb8>)
   b7044:	b113      	cbz	r3, b704c <__register_exitproc+0x2c>
   b7046:	681b      	ldr	r3, [r3, #0]
   b7048:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b704c:	6863      	ldr	r3, [r4, #4]
   b704e:	2b1f      	cmp	r3, #31
   b7050:	dd07      	ble.n	b7062 <__register_exitproc+0x42>
   b7052:	f8d8 0000 	ldr.w	r0, [r8]
   b7056:	f000 f847 	bl	b70e8 <__retarget_lock_release_recursive>
   b705a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b705e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7062:	b34e      	cbz	r6, b70b8 <__register_exitproc+0x98>
   b7064:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7068:	b988      	cbnz	r0, b708e <__register_exitproc+0x6e>
   b706a:	4b1c      	ldr	r3, [pc, #112]	; (b70dc <__register_exitproc+0xbc>)
   b706c:	b923      	cbnz	r3, b7078 <__register_exitproc+0x58>
   b706e:	f8d8 0000 	ldr.w	r0, [r8]
   b7072:	f000 f838 	bl	b70e6 <__retarget_lock_release>
   b7076:	e7f0      	b.n	b705a <__register_exitproc+0x3a>
   b7078:	f44f 7084 	mov.w	r0, #264	; 0x108
   b707c:	f7fe f87a 	bl	b5174 <malloc>
   b7080:	2800      	cmp	r0, #0
   b7082:	d0f4      	beq.n	b706e <__register_exitproc+0x4e>
   b7084:	2300      	movs	r3, #0
   b7086:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b708a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b708e:	6863      	ldr	r3, [r4, #4]
   b7090:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7094:	2201      	movs	r2, #1
   b7096:	409a      	lsls	r2, r3
   b7098:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b709c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b70a0:	4313      	orrs	r3, r2
   b70a2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b70a6:	2e02      	cmp	r6, #2
   b70a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b70ac:	bf02      	ittt	eq
   b70ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b70b2:	4313      	orreq	r3, r2
   b70b4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b70b8:	6863      	ldr	r3, [r4, #4]
   b70ba:	f8d8 0000 	ldr.w	r0, [r8]
   b70be:	1c5a      	adds	r2, r3, #1
   b70c0:	3302      	adds	r3, #2
   b70c2:	6062      	str	r2, [r4, #4]
   b70c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b70c8:	f000 f80e 	bl	b70e8 <__retarget_lock_release_recursive>
   b70cc:	2000      	movs	r0, #0
   b70ce:	e7c6      	b.n	b705e <__register_exitproc+0x3e>
   b70d0:	2003e7e8 	.word	0x2003e7e8
   b70d4:	2003e75c 	.word	0x2003e75c
   b70d8:	00000000 	.word	0x00000000
   b70dc:	000b5175 	.word	0x000b5175
   b70e0:	2003e604 	.word	0x2003e604

000b70e4 <__retarget_lock_acquire_recursive>:
   b70e4:	4770      	bx	lr

000b70e6 <__retarget_lock_release>:
   b70e6:	4770      	bx	lr

000b70e8 <__retarget_lock_release_recursive>:
   b70e8:	4770      	bx	lr

000b70ea <link_code_end>:
	...

000b70ec <dynalib_user>:
   b70ec:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b70fc:	0000 0000 7274 6575 7700 7461 7265 6e69     ....true.waterin
   b710c:	5367 6174 6574 6843 6e61 6567 0064 6157     gStateChanged.Wa
   b711c:	6574 6972 676e 7320 7379 6574 206d 7574     tering system tu
   b712c:	6e72 6465 6f20 216e 6600 6c61 6573 5700     rned on!.false.W
   b713c:	7461 7265 6e69 2067 7973 7473 6d65 7420     atering system t
   b714c:	7275 656e 2064 666f 2166 4900 766e 6c61     urned off!.Inval
   b715c:	6469 6320 6d6f 616d 646e 6620 726f 6620     id command for f
   b716c:	6e75 7463 6f69 206e 6573 5774 7461 7265     unction setWater
   b717c:	6e69 2167 2500 312e 0066 6f73 6c69 315f     ing!.%.1f.soil_1
   b718c:	725f 0068 6f73 6c69 325f 725f 0068 6f73     _rh.soil_2_rh.so
   b719c:	6c69 335f 725f 0068 6f73 6c69 345f 725f     il_3_rh.soil_4_r
   b71ac:	0068 6f73 6c69 355f 725f 0068 6574 706d     h.soil_5_rh.temp
   b71bc:	7265 7461 7275 0065 7568 696d 6964 7974     erature.humidity
   b71cc:	6200 7261 6d6f 7465 6972 5f63 7270 7365     .barometric_pres
   b71dc:	7573 6572 6500 4f43 0032 5654 434f 4100     sure.eCO2.TVOC.A
   b71ec:	4951 5700 6c65 6f63 656d 7420 206f 6874     QI.Welcome to th
   b71fc:	2065 615a 6566 2072 6d53 7261 2074 7247     e Zafer Smart Gr
   b720c:	6565 686e 756f 6573 5020 6f72 656a 7463     eenhouse Project
   b721c:	2021 6f43 7275 6574 7973 6f20 2066 4249     ! Courtesy of IB
   b722c:	4320 616c 7373 6f20 2066 3332 3a20 0029      Class of 23 :).
   b723c:	4d42 3245 3038 6920 696e 6974 6c61 7a69     BME280 initializ
   b724c:	7461 6f69 206e 6166 6c69 6465 2021 6957     ation failed! Wi
   b725c:	6c6c 7220 7365 6174 7472 6920 206e 3033     ll restart in 30
   b726c:	7320 6365 6e6f 7364 4200 454d 3832 2030      seconds.BME280 
   b727c:	6e69 7469 6169 696c 617a 6974 6e6f 7320     initialization s
   b728c:	6375 6563 7373 7566 216c 4500 534e 3631     uccessful!.ENS16
   b729c:	2030 6e69 7469 6169 696c 617a 6974 6e6f     0 initialization
   b72ac:	6620 6961 656c 2164 5720 6c69 206c 6572      failed! Will re
   b72bc:	7473 7261 2074 6e69 3320 2030 6573 6f63     start in 30 seco
   b72cc:	646e 0073 4e45 3153 3036 6920 696e 6974     nds.ENS160 initi
   b72dc:	6c61 7a69 7461 6f69 206e 7573 6363 7365     alization succes
   b72ec:	6673 6c75 0021 6573 5774 7461 7265 6e69     sful!.setWaterin
   b72fc:	0067 0000                                   g...

000b7300 <_ZTV18DFRobot_BME280_IIC>:
	...
   b7308:	4621 000b 4667 000b                         !F..gF..

000b7310 <_ZTV18DFRobot_ENS160_I2C>:
	...
   b7318:	4c7f 000b 4b75 000b 4bad 000b               .L..uK...K..

000b7324 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b732c:	5281 000b 5287 000b 52c5 000b 5295 000b     .R...R...R...R..
   b733c:	5283 000b                                   .R..

000b7340 <_ZTVN5spark13EthernetClassE>:
	...
   b7348:	585b 000b 5851 000b 5847 000b 583d 000b     [X..QX..GX..=X..
   b7358:	5831 000b 5825 000b 5ab1 000b 5ab9 000b     1X..%X...Z...Z..
   b7368:	5819 000b 5811 000b 5807 000b 57fd 000b     .X...X...X...W..
   b7378:	5ae9 000b                                   .Z..

000b737c <_ZTV7TwoWire>:
	...
   b7384:	5879 000b 58c3 000b 589b 000b 587b 000b     yX...X...X..{X..
   b7394:	58a3 000b 58ab 000b 58b3 000b 58bb 000b     .X...X...X...X..

000b73a4 <_ZTV9IPAddress>:
	...
   b73ac:	597f 000b 596f 000b 5971 000b 7061 0070     .Y..oY..qY..app.

000b73bc <_ZTVN5spark12NetworkClassE>:
	...
   b73c4:	5a71 000b 5a7b 000b 5a85 000b 5a8f 000b     qZ..{Z...Z...Z..
   b73d4:	5a99 000b 5aa5 000b 5ab1 000b 5ab9 000b     .Z...Z...Z...Z..
   b73e4:	5ac1 000b 5acd 000b 5ad5 000b 5adf 000b     .Z...Z...Z...Z..
   b73f4:	5ae9 000b 5925 252d 2d6d 6425 2554 3a48     .Z..%Y-%m-%dT%H:
   b7404:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7414 <_ZTV11USARTSerial>:
	...
   b741c:	5e7d 000b 5ee9 000b 5ec1 000b 5bd5 000b     }^...^...^...[..
   b742c:	5e91 000b 5ead 000b 5e9f 000b 5ebb 000b     .^...^...^...^..
   b743c:	5e7f 000b 5e83 000b                         .^...^..

000b7444 <_ZTV9USBSerial>:
	...
   b744c:	5f27 000b 5f8f 000b 5f65 000b 5bd5 000b     '_..._..e_...[..
   b745c:	5f57 000b 5f29 000b 5f39 000b 5f89 000b     W_..)_..9_..._..
   b746c:	5f49 000b 5f21 000b                         I_..!_..

000b7474 <_ZTVN5spark9WiFiClassE>:
	...
   b747c:	6087 000b 607d 000b 6073 000b 6029 000b     .`..}`..s`..)`..
   b748c:	6067 000b 605b 000b 5ab1 000b 5ab9 000b     g`..[`...Z...Z..
   b749c:	604f 000b 6047 000b 603d 000b 6033 000b     O`..G`..=`..3`..
   b74ac:	5ae9 000b                                   .Z..

000b74b0 <_ZSt7nothrow>:
   b74b0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b74c0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b74d0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b74e0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b74f0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7500:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7510:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7521 <link_const_variable_data_end>:
   b7521:	00          	.byte	0x00
	...

000b7524 <link_constructors_location>:
   b7524:	000b4511 	.word	0x000b4511
   b7528:	000b5271 	.word	0x000b5271
   b752c:	000b5865 	.word	0x000b5865
   b7530:	000b5a61 	.word	0x000b5a61
   b7534:	000b5bc1 	.word	0x000b5bc1
   b7538:	000b5c95 	.word	0x000b5c95
   b753c:	000b5e45 	.word	0x000b5e45
   b7540:	000b5e69 	.word	0x000b5e69
   b7544:	000b6091 	.word	0x000b6091

000b7548 <link_constructors_end>:
	...
