
/Users/bertan/Developer/GitRepositories/Zafer-Greenhouse/ZG_Particle_Firmware/target/4.0.0/argon/ZG_Particle_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000025e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6600  000b6600  00006600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6624  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e59c  000b6628  0001e59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e8  2003e608  2003e608  0002e608  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b6694  000b6694  00026694  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b66bc  000b66bc  000266bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00124a2f  00000000  00000000  000266c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000130e2  00000000  00000000  0014b0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003a3b2  00000000  00000000  0015e1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc0  00000000  00000000  00198583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a420  00000000  00000000  0019b143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039c23  00000000  00000000  001a5563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f4bc  00000000  00000000  001df186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138bb9  00000000  00000000  0021e642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007c00  00000000  00000000  003571fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 f811 	bl	b6058 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 f819 	bl	b6074 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e59c 	.word	0x2003e59c
   b404c:	000b6628 	.word	0x000b6628
   b4050:	2003e608 	.word	0x2003e608
   b4054:	2003e608 	.word	0x2003e608
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 faed 	bl	b5640 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b65dc 	.word	0x000b65dc
   b4080:	000b6600 	.word	0x000b6600

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b894 	b.w	b41b0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f84d 	bl	b4128 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 ba8d 	b.w	b55b0 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 bde3 	b.w	b4c60 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bde9 	b.w	b4c70 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <_Z11setWatering6String>:
    int soil_rh = map(soil_value, soil_dry, soil_wet, 0, 100);
    return soil_rh;
}

// Function to turn the watering system on and off
int setWatering(String is_on) {
   b40b0:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b40b2:	4915      	ldr	r1, [pc, #84]	; (b4108 <_Z11setWatering6String+0x58>)
   b40b4:	4605      	mov	r5, r0
   b40b6:	f001 f904 	bl	b52c2 <_ZNK6String6equalsEPKc>
  if (is_on == "true") {
   b40ba:	4604      	mov	r4, r0
   b40bc:	b168      	cbz	r0, b40da <_Z11setWatering6String+0x2a>
    digitalWrite(water_valve, HIGH);
   b40be:	2101      	movs	r1, #1
   b40c0:	2006      	movs	r0, #6
   b40c2:	f001 fb3e 	bl	b5742 <digitalWrite>
    is_watering = true;
   b40c6:	4b11      	ldr	r3, [pc, #68]	; (b410c <_Z11setWatering6String+0x5c>)
   b40c8:	2201      	movs	r2, #1
   b40ca:	701a      	strb	r2, [r3, #0]
    Serial.println("Watering system turned on!");
   b40cc:	f001 f9ea 	bl	b54a4 <_Z16_fetch_usbserialv>
   b40d0:	490f      	ldr	r1, [pc, #60]	; (b4110 <_Z11setWatering6String+0x60>)
   b40d2:	f001 f844 	bl	b515e <_ZN5Print7printlnEPKc>
    Serial.println("Watering system turned off!");
  }else {
    Serial.println("Invalid command for function setWatering!");
    return -1;
  }
  return 0;
   b40d6:	2000      	movs	r0, #0
}
   b40d8:	bd38      	pop	{r3, r4, r5, pc}
   b40da:	490e      	ldr	r1, [pc, #56]	; (b4114 <_Z11setWatering6String+0x64>)
   b40dc:	4628      	mov	r0, r5
   b40de:	f001 f8f0 	bl	b52c2 <_ZNK6String6equalsEPKc>
  } else if (is_on == "false") {
   b40e2:	b148      	cbz	r0, b40f8 <_Z11setWatering6String+0x48>
    digitalWrite(water_valve, LOW);
   b40e4:	4621      	mov	r1, r4
   b40e6:	2006      	movs	r0, #6
   b40e8:	f001 fb2b 	bl	b5742 <digitalWrite>
    is_watering = false;
   b40ec:	4b07      	ldr	r3, [pc, #28]	; (b410c <_Z11setWatering6String+0x5c>)
   b40ee:	701c      	strb	r4, [r3, #0]
    Serial.println("Watering system turned off!");
   b40f0:	f001 f9d8 	bl	b54a4 <_Z16_fetch_usbserialv>
   b40f4:	4908      	ldr	r1, [pc, #32]	; (b4118 <_Z11setWatering6String+0x68>)
   b40f6:	e7ec      	b.n	b40d2 <_Z11setWatering6String+0x22>
    Serial.println("Invalid command for function setWatering!");
   b40f8:	f001 f9d4 	bl	b54a4 <_Z16_fetch_usbserialv>
   b40fc:	4907      	ldr	r1, [pc, #28]	; (b411c <_Z11setWatering6String+0x6c>)
   b40fe:	f001 f82e 	bl	b515e <_ZN5Print7printlnEPKc>
    return -1;
   b4102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4106:	e7e7      	b.n	b40d8 <_Z11setWatering6String+0x28>
   b4108:	000b61e4 	.word	0x000b61e4
   b410c:	2003e680 	.word	0x2003e680
   b4110:	000b61e9 	.word	0x000b61e9
   b4114:	000b6204 	.word	0x000b6204
   b4118:	000b620a 	.word	0x000b620a
   b411c:	000b6226 	.word	0x000b6226

000b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4120:	2300      	movs	r3, #0
   b4122:	2209      	movs	r2, #9
   b4124:	f000 bd1c 	b.w	b4b60 <spark_variable>

000b4128 <loop>:
  TVOC = ens160.getTVOC();
  AQI = ens160.getAQI();
  return 0;
}

void loop() {
   b4128:	b570      	push	{r4, r5, r6, lr}
  // Periodically calibrate the ENS160 sensor according to the current conditions
  ens160.setTempAndHum(bme280.getTemperature(), bme280.getHumidity());
   b412a:	4812      	ldr	r0, [pc, #72]	; (b4174 <loop+0x4c>)
    for (uint32_t ms = millis(); millis() - ms < duration; Particle.process());
   b412c:	4e12      	ldr	r6, [pc, #72]	; (b4178 <loop+0x50>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b412e:	4d13      	ldr	r5, [pc, #76]	; (b417c <loop+0x54>)
void loop() {
   b4130:	ed2d 8b02 	vpush	{d8}
  ens160.setTempAndHum(bme280.getTemperature(), bme280.getHumidity());
   b4134:	f000 f9ca 	bl	b44cc <_ZN14DFRobot_BME28014getTemperatureEv>
   b4138:	480e      	ldr	r0, [pc, #56]	; (b4174 <loop+0x4c>)
   b413a:	eeb0 8a40 	vmov.f32	s16, s0
   b413e:	f000 fa01 	bl	b4544 <_ZN14DFRobot_BME28011getHumidityEv>
   b4142:	480f      	ldr	r0, [pc, #60]	; (b4180 <loop+0x58>)
   b4144:	eef0 0a40 	vmov.f32	s1, s0
   b4148:	eeb0 0a48 	vmov.f32	s0, s16
   b414c:	f000 fb68 	bl	b4820 <_ZN14DFRobot_ENS16013setTempAndHumEff>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4150:	f000 fbc0 	bl	b48d4 <HAL_Timer_Get_Milli_Seconds>
   b4154:	4604      	mov	r4, r0
   b4156:	f000 fbbd 	bl	b48d4 <HAL_Timer_Get_Milli_Seconds>
    for (uint32_t ms = millis(); millis() - ms < duration; Particle.process());
   b415a:	1b00      	subs	r0, r0, r4
   b415c:	42b0      	cmp	r0, r6
   b415e:	d805      	bhi.n	b416c <loop+0x44>
		return HAL_Timer_Get_Milli_Seconds();
   b4160:	f000 fbb8 	bl	b48d4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b4164:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b4166:	f000 fd0b 	bl	b4b80 <spark_process>
    }
   b416a:	e7f4      	b.n	b4156 <loop+0x2e>
  softDelay(MEASUREMENT_INTERVAL*1000);
   b416c:	ecbd 8b02 	vpop	{d8}
   b4170:	bd70      	pop	{r4, r5, r6, pc}
   b4172:	bf00      	nop
   b4174:	2003e620 	.word	0x2003e620
   b4178:	000493df 	.word	0x000493df
   b417c:	2003e728 	.word	0x2003e728
   b4180:	2003e668 	.word	0x2003e668

000b4184 <_GLOBAL__sub_I_bme280>:
   b4184:	b508      	push	{r3, lr}
DFRobot_BME280_IIC bme280(&Wire, 0x76);
   b4186:	f001 fb0d 	bl	b57a4 <_Z19__fetch_global_Wirev>
   b418a:	2276      	movs	r2, #118	; 0x76
   b418c:	4601      	mov	r1, r0
   b418e:	4806      	ldr	r0, [pc, #24]	; (b41a8 <_GLOBAL__sub_I_bme280+0x24>)
   b4190:	f000 faaa 	bl	b46e8 <_ZN18DFRobot_BME280_IICC1EP7TwoWireh>
DFRobot_ENS160_I2C ens160(&Wire, 0x53);
   b4194:	f001 fb06 	bl	b57a4 <_Z19__fetch_global_Wirev>
   b4198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
DFRobot_ENS160_I2C ens160(&Wire, 0x53);
   b419c:	4601      	mov	r1, r0
   b419e:	2253      	movs	r2, #83	; 0x53
   b41a0:	4802      	ldr	r0, [pc, #8]	; (b41ac <_GLOBAL__sub_I_bme280+0x28>)
   b41a2:	f000 bb7d 	b.w	b48a0 <_ZN18DFRobot_ENS160_I2CC1EP7TwoWireh>
   b41a6:	bf00      	nop
   b41a8:	2003e620 	.word	0x2003e620
   b41ac:	2003e668 	.word	0x2003e668

000b41b0 <setup>:
void setup() {
   b41b0:	b508      	push	{r3, lr}
  Serial.begin(115200);
   b41b2:	f001 f977 	bl	b54a4 <_Z16_fetch_usbserialv>
   b41b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b41ba:	f001 f967 	bl	b548c <_ZN9USBSerial5beginEl>
  Serial.println("Welcome to the Zafer Smart Greenhouse Project! Courtesy of IB Class of 23 :)");
   b41be:	f001 f971 	bl	b54a4 <_Z16_fetch_usbserialv>
   b41c2:	4942      	ldr	r1, [pc, #264]	; (b42cc <setup+0x11c>)
   b41c4:	f000 ffcb 	bl	b515e <_ZN5Print7printlnEPKc>
  pinMode(soil_1, INPUT);
   b41c8:	2100      	movs	r1, #0
   b41ca:	2013      	movs	r0, #19
   b41cc:	f001 faa8 	bl	b5720 <pinMode>
  pinMode(soil_2, INPUT);
   b41d0:	2100      	movs	r1, #0
   b41d2:	2012      	movs	r0, #18
   b41d4:	f001 faa4 	bl	b5720 <pinMode>
  pinMode(soil_3, INPUT);
   b41d8:	2100      	movs	r1, #0
   b41da:	2011      	movs	r0, #17
   b41dc:	f001 faa0 	bl	b5720 <pinMode>
  pinMode(soil_4, INPUT);
   b41e0:	2100      	movs	r1, #0
   b41e2:	2010      	movs	r0, #16
   b41e4:	f001 fa9c 	bl	b5720 <pinMode>
  pinMode(soil_5, INPUT);
   b41e8:	2100      	movs	r1, #0
   b41ea:	200f      	movs	r0, #15
   b41ec:	f001 fa98 	bl	b5720 <pinMode>
  pinMode(water_valve, OUTPUT);
   b41f0:	2006      	movs	r0, #6
   b41f2:	2101      	movs	r1, #1
   b41f4:	f001 fa94 	bl	b5720 <pinMode>
  if (!bme280.begin()) {
   b41f8:	4835      	ldr	r0, [pc, #212]	; (b42d0 <setup+0x120>)
   b41fa:	f000 fa45 	bl	b4688 <_ZN14DFRobot_BME2805beginEv>
   b41fe:	2800      	cmp	r0, #0
   b4200:	d157      	bne.n	b42b2 <setup+0x102>
    Serial.println("BME280 initialization failed! Will restart in 30 seconds");
   b4202:	f001 f94f 	bl	b54a4 <_Z16_fetch_usbserialv>
   b4206:	4933      	ldr	r1, [pc, #204]	; (b42d4 <setup+0x124>)
   b4208:	f000 ffa9 	bl	b515e <_ZN5Print7printlnEPKc>
    delay(30000);
   b420c:	f247 5030 	movw	r0, #30000	; 0x7530
   b4210:	f000 fd4e 	bl	b4cb0 <delay>
    System.reset();
   b4214:	f001 f877 	bl	b5306 <_ZN11SystemClass5resetEv>
  if (!ens160.begin()) {
   b4218:	482f      	ldr	r0, [pc, #188]	; (b42d8 <setup+0x128>)
   b421a:	f000 faf4 	bl	b4806 <_ZN18DFRobot_ENS160_I2C5beginEv>
   b421e:	2800      	cmp	r0, #0
   b4220:	d14d      	bne.n	b42be <setup+0x10e>
    Serial.println("ENS160 initialization failed! Will restart in 30 seconds");
   b4222:	f001 f93f 	bl	b54a4 <_Z16_fetch_usbserialv>
   b4226:	492d      	ldr	r1, [pc, #180]	; (b42dc <setup+0x12c>)
   b4228:	f000 ff99 	bl	b515e <_ZN5Print7printlnEPKc>
    delay(30000);
   b422c:	f247 5030 	movw	r0, #30000	; 0x7530
   b4230:	f000 fd3e 	bl	b4cb0 <delay>
    System.reset();
   b4234:	f001 f867 	bl	b5306 <_ZN11SystemClass5resetEv>
  ens160.setPWRMode(ENS160_STANDARD_MODE);
   b4238:	4827      	ldr	r0, [pc, #156]	; (b42d8 <setup+0x128>)
   b423a:	2102      	movs	r1, #2
   b423c:	f000 faa4 	bl	b4788 <_ZN14DFRobot_ENS16010setPWRModeEh>
        return _variable(name, std::forward<ArgsT>(args)...);
   b4240:	4927      	ldr	r1, [pc, #156]	; (b42e0 <setup+0x130>)
   b4242:	4828      	ldr	r0, [pc, #160]	; (b42e4 <setup+0x134>)
   b4244:	f7ff ff6c 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
   b4248:	4927      	ldr	r1, [pc, #156]	; (b42e8 <setup+0x138>)
   b424a:	4828      	ldr	r0, [pc, #160]	; (b42ec <setup+0x13c>)
   b424c:	f7ff ff68 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
   b4250:	4927      	ldr	r1, [pc, #156]	; (b42f0 <setup+0x140>)
   b4252:	4828      	ldr	r0, [pc, #160]	; (b42f4 <setup+0x144>)
   b4254:	f7ff ff64 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
   b4258:	4927      	ldr	r1, [pc, #156]	; (b42f8 <setup+0x148>)
   b425a:	4828      	ldr	r0, [pc, #160]	; (b42fc <setup+0x14c>)
   b425c:	f7ff ff60 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
   b4260:	4927      	ldr	r1, [pc, #156]	; (b4300 <setup+0x150>)
   b4262:	4828      	ldr	r0, [pc, #160]	; (b4304 <setup+0x154>)
   b4264:	f7ff ff5c 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4268:	4a27      	ldr	r2, [pc, #156]	; (b4308 <setup+0x158>)
   b426a:	4928      	ldr	r1, [pc, #160]	; (b430c <setup+0x15c>)
   b426c:	4828      	ldr	r0, [pc, #160]	; (b4310 <setup+0x160>)
   b426e:	f000 fd41 	bl	b4cf4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4272:	2300      	movs	r3, #0
   b4274:	2201      	movs	r2, #1
   b4276:	4927      	ldr	r1, [pc, #156]	; (b4314 <setup+0x164>)
   b4278:	4827      	ldr	r0, [pc, #156]	; (b4318 <setup+0x168>)
   b427a:	f000 fc71 	bl	b4b60 <spark_variable>
        return _variable(name, std::forward<ArgsT>(args)...);
   b427e:	4927      	ldr	r1, [pc, #156]	; (b431c <setup+0x16c>)
   b4280:	4827      	ldr	r0, [pc, #156]	; (b4320 <setup+0x170>)
   b4282:	f7ff ff4d 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
   b4286:	4927      	ldr	r1, [pc, #156]	; (b4324 <setup+0x174>)
   b4288:	4827      	ldr	r0, [pc, #156]	; (b4328 <setup+0x178>)
   b428a:	f7ff ff49 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
   b428e:	4927      	ldr	r1, [pc, #156]	; (b432c <setup+0x17c>)
   b4290:	4827      	ldr	r0, [pc, #156]	; (b4330 <setup+0x180>)
   b4292:	f7ff ff45 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
   b4296:	4927      	ldr	r1, [pc, #156]	; (b4334 <setup+0x184>)
   b4298:	4827      	ldr	r0, [pc, #156]	; (b4338 <setup+0x188>)
   b429a:	f7ff ff41 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
   b429e:	4927      	ldr	r1, [pc, #156]	; (b433c <setup+0x18c>)
   b42a0:	4827      	ldr	r0, [pc, #156]	; (b4340 <setup+0x190>)
   b42a2:	f7ff ff3d 	bl	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
}
   b42a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b42aa:	4926      	ldr	r1, [pc, #152]	; (b4344 <setup+0x194>)
   b42ac:	4826      	ldr	r0, [pc, #152]	; (b4348 <setup+0x198>)
   b42ae:	f7ff bf37 	b.w	b4120 <_ZN10CloudClass9_variableEPKcRKd.isra.0>
    Serial.println("BME280 initialization successful!");
   b42b2:	f001 f8f7 	bl	b54a4 <_Z16_fetch_usbserialv>
   b42b6:	4925      	ldr	r1, [pc, #148]	; (b434c <setup+0x19c>)
   b42b8:	f000 ff51 	bl	b515e <_ZN5Print7printlnEPKc>
   b42bc:	e7ac      	b.n	b4218 <setup+0x68>
    Serial.println("ENS160 initialization successful!");
   b42be:	f001 f8f1 	bl	b54a4 <_Z16_fetch_usbserialv>
   b42c2:	4923      	ldr	r1, [pc, #140]	; (b4350 <setup+0x1a0>)
   b42c4:	f000 ff4b 	bl	b515e <_ZN5Print7printlnEPKc>
   b42c8:	e7b6      	b.n	b4238 <setup+0x88>
   b42ca:	bf00      	nop
   b42cc:	000b6250 	.word	0x000b6250
   b42d0:	2003e620 	.word	0x2003e620
   b42d4:	000b629d 	.word	0x000b629d
   b42d8:	2003e668 	.word	0x2003e668
   b42dc:	000b62f8 	.word	0x000b62f8
   b42e0:	2003e688 	.word	0x2003e688
   b42e4:	000b6353 	.word	0x000b6353
   b42e8:	2003e690 	.word	0x2003e690
   b42ec:	000b635d 	.word	0x000b635d
   b42f0:	2003e698 	.word	0x2003e698
   b42f4:	000b6367 	.word	0x000b6367
   b42f8:	2003e6a0 	.word	0x2003e6a0
   b42fc:	000b6371 	.word	0x000b6371
   b4300:	2003e6a8 	.word	0x2003e6a8
   b4304:	000b637b 	.word	0x000b637b
   b4308:	000b6385 	.word	0x000b6385
   b430c:	000b40b1 	.word	0x000b40b1
   b4310:	000b4cc9 	.word	0x000b4cc9
   b4314:	2003e680 	.word	0x2003e680
   b4318:	000b6391 	.word	0x000b6391
   b431c:	2003e6b0 	.word	0x2003e6b0
   b4320:	000b639c 	.word	0x000b639c
   b4324:	2003e678 	.word	0x2003e678
   b4328:	000b63a8 	.word	0x000b63a8
   b432c:	2003e618 	.word	0x2003e618
   b4330:	000b63b1 	.word	0x000b63b1
   b4334:	2003e660 	.word	0x2003e660
   b4338:	000b63c5 	.word	0x000b63c5
   b433c:	2003e610 	.word	0x2003e610
   b4340:	000b63ca 	.word	0x000b63ca
   b4344:	2003e608 	.word	0x2003e608
   b4348:	000b63cf 	.word	0x000b63cf
   b434c:	000b62d6 	.word	0x000b62d6
   b4350:	000b6331 	.word	0x000b6331

000b4354 <_ZN18DFRobot_BME280_IIC8writeRegEhPht>:
    pBuf[i] = _pWire->read();
  lastOperateStatus = eStatusOK;
}

void DFRobot_BME280_IIC::writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
   b4354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4356:	4604      	mov	r4, r0
   b4358:	461e      	mov	r6, r3
  lastOperateStatus = eStatusErrDeviceNotDetected;
   b435a:	2302      	movs	r3, #2
   b435c:	7103      	strb	r3, [r0, #4]
  _pWire->begin();
   b435e:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
   b4360:	4615      	mov	r5, r2
   b4362:	460f      	mov	r7, r1
  _pWire->begin();
   b4364:	f000 fd54 	bl	b4e10 <_ZN7TwoWire5beginEv>
  _pWire->beginTransmission(_addr);
   b4368:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   b436c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b436e:	f000 fd81 	bl	b4e74 <_ZN7TwoWire17beginTransmissionEh>
  _pWire->write(reg);
   b4372:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b4374:	6803      	ldr	r3, [r0, #0]
   b4376:	4639      	mov	r1, r7
   b4378:	689b      	ldr	r3, [r3, #8]
   b437a:	4798      	blx	r3
  for(uint16_t i = 0; i < len; i ++)
   b437c:	442e      	add	r6, r5
   b437e:	42b5      	cmp	r5, r6
    _pWire->write(pBuf[i]);
   b4380:	6b60      	ldr	r0, [r4, #52]	; 0x34
  for(uint16_t i = 0; i < len; i ++)
   b4382:	d005      	beq.n	b4390 <_ZN18DFRobot_BME280_IIC8writeRegEhPht+0x3c>
    _pWire->write(pBuf[i]);
   b4384:	6803      	ldr	r3, [r0, #0]
   b4386:	f815 1b01 	ldrb.w	r1, [r5], #1
   b438a:	689b      	ldr	r3, [r3, #8]
   b438c:	4798      	blx	r3
  for(uint16_t i = 0; i < len; i ++)
   b438e:	e7f6      	b.n	b437e <_ZN18DFRobot_BME280_IIC8writeRegEhPht+0x2a>
  if(_pWire->endTransmission() != 0)
   b4390:	f000 fd78 	bl	b4e84 <_ZN7TwoWire15endTransmissionEv>
   b4394:	b900      	cbnz	r0, b4398 <_ZN18DFRobot_BME280_IIC8writeRegEhPht+0x44>
    return;
  lastOperateStatus = eStatusOK;
   b4396:	7120      	strb	r0, [r4, #4]
}
   b4398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b439a <_ZN18DFRobot_BME280_IIC7readRegEhPht>:
{
   b439a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b439c:	4604      	mov	r4, r0
   b439e:	461e      	mov	r6, r3
  lastOperateStatus = eStatusErrDeviceNotDetected;
   b43a0:	2302      	movs	r3, #2
   b43a2:	7103      	strb	r3, [r0, #4]
  _pWire->begin();
   b43a4:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
   b43a6:	460f      	mov	r7, r1
   b43a8:	4615      	mov	r5, r2
  _pWire->begin();
   b43aa:	f000 fd31 	bl	b4e10 <_ZN7TwoWire5beginEv>
  _pWire->beginTransmission(_addr);
   b43ae:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   b43b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b43b4:	f000 fd5e 	bl	b4e74 <_ZN7TwoWire17beginTransmissionEh>
  _pWire->write(reg);
   b43b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b43ba:	6803      	ldr	r3, [r0, #0]
   b43bc:	4639      	mov	r1, r7
   b43be:	689b      	ldr	r3, [r3, #8]
   b43c0:	4798      	blx	r3
  if(_pWire->endTransmission() != 0)
   b43c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b43c4:	f000 fd5e 	bl	b4e84 <_ZN7TwoWire15endTransmissionEv>
   b43c8:	b988      	cbnz	r0, b43ee <_ZN18DFRobot_BME280_IIC7readRegEhPht+0x54>
  _pWire->requestFrom(_addr, (uint8_t)len);
   b43ca:	b2f2      	uxtb	r2, r6
   b43cc:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   b43d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b43d2:	f000 fd4c 	bl	b4e6e <_ZN7TwoWire11requestFromEhj>
  for(uint16_t i = 0; i < len; i ++)
   b43d6:	442e      	add	r6, r5
   b43d8:	42b5      	cmp	r5, r6
   b43da:	d006      	beq.n	b43ea <_ZN18DFRobot_BME280_IIC7readRegEhPht+0x50>
    pBuf[i] = _pWire->read();
   b43dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
   b43de:	6803      	ldr	r3, [r0, #0]
   b43e0:	695b      	ldr	r3, [r3, #20]
   b43e2:	4798      	blx	r3
   b43e4:	f805 0b01 	strb.w	r0, [r5], #1
  for(uint16_t i = 0; i < len; i ++)
   b43e8:	e7f6      	b.n	b43d8 <_ZN18DFRobot_BME280_IIC7readRegEhPht+0x3e>
  lastOperateStatus = eStatusOK;
   b43ea:	2300      	movs	r3, #0
   b43ec:	7123      	strb	r3, [r4, #4]
}
   b43ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b43f0 <_ZN14DFRobot_BME2805resetEv>:
{
   b43f0:	b513      	push	{r0, r1, r4, lr}
  uint8_t   temp = 0xb6;
   b43f2:	23b6      	movs	r3, #182	; 0xb6
   b43f4:	f88d 3007 	strb.w	r3, [sp, #7]
  writeReg(regOffset(&_sRegs.reset), (uint8_t*) &temp, sizeof(temp));
   b43f8:	6803      	ldr	r3, [r0, #0]
   b43fa:	f10d 0207 	add.w	r2, sp, #7
   b43fe:	681c      	ldr	r4, [r3, #0]
   b4400:	21e0      	movs	r1, #224	; 0xe0
   b4402:	2301      	movs	r3, #1
   b4404:	47a0      	blx	r4
  delay(100);
   b4406:	2064      	movs	r0, #100	; 0x64
   b4408:	f000 fc52 	bl	b4cb0 <delay>
}
   b440c:	b002      	add	sp, #8
   b440e:	bd10      	pop	{r4, pc}

000b4410 <_ZN14DFRobot_BME28012getCalibrateEv>:
{
   b4410:	b538      	push	{r3, r4, r5, lr}
  readReg(regOffset(&_sRegs.calib), (uint8_t*) &_sCalib, sizeof(_sCalib));
   b4412:	4602      	mov	r2, r0
{
   b4414:	4604      	mov	r4, r0
  readReg(regOffset(&_sRegs.calib), (uint8_t*) &_sCalib, sizeof(_sCalib));
   b4416:	f852 3b0c 	ldr.w	r3, [r2], #12
   b441a:	2188      	movs	r1, #136	; 0x88
   b441c:	685d      	ldr	r5, [r3, #4]
   b441e:	231a      	movs	r3, #26
   b4420:	47a8      	blx	r5
  readReg(regOffset(&_sRegs.calib) + sizeof(_sCalib) - 1, (uint8_t*) &_sCalibHumi.h1, sizeof(_sCalibHumi.h1));
   b4422:	4622      	mov	r2, r4
   b4424:	21a1      	movs	r1, #161	; 0xa1
   b4426:	f852 3b26 	ldr.w	r3, [r2], #38
   b442a:	4620      	mov	r0, r4
   b442c:	685d      	ldr	r5, [r3, #4]
   b442e:	2301      	movs	r3, #1
   b4430:	47a8      	blx	r5
  readReg(0xe1, (uint8_t*) &_sCalibHumi.h2, sizeof(_sCalibHumi.h2));    // fxxk discontinuous address
   b4432:	4622      	mov	r2, r4
   b4434:	21e1      	movs	r1, #225	; 0xe1
   b4436:	f852 3b28 	ldr.w	r3, [r2], #40
   b443a:	4620      	mov	r0, r4
   b443c:	685d      	ldr	r5, [r3, #4]
   b443e:	2302      	movs	r3, #2
   b4440:	47a8      	blx	r5
  readReg(0xe3, (uint8_t*) &_sCalibHumi.h3, sizeof(_sCalibHumi.h3));
   b4442:	4622      	mov	r2, r4
   b4444:	21e3      	movs	r1, #227	; 0xe3
   b4446:	f852 3b2a 	ldr.w	r3, [r2], #42
   b444a:	4620      	mov	r0, r4
   b444c:	685d      	ldr	r5, [r3, #4]
   b444e:	2301      	movs	r3, #1
   b4450:	47a8      	blx	r5
  readReg(0xe4, (uint8_t*) &_sCalibHumi.h4, sizeof(_sCalibHumi.h4));
   b4452:	4622      	mov	r2, r4
   b4454:	21e4      	movs	r1, #228	; 0xe4
   b4456:	f852 3b2c 	ldr.w	r3, [r2], #44
   b445a:	4620      	mov	r0, r4
   b445c:	685d      	ldr	r5, [r3, #4]
   b445e:	2302      	movs	r3, #2
   b4460:	47a8      	blx	r5
  readReg(0xe5, (uint8_t*) &_sCalibHumi.h5, sizeof(_sCalibHumi.h5));
   b4462:	4622      	mov	r2, r4
   b4464:	21e5      	movs	r1, #229	; 0xe5
   b4466:	f852 3b2e 	ldr.w	r3, [r2], #46
   b446a:	4620      	mov	r0, r4
   b446c:	685d      	ldr	r5, [r3, #4]
   b446e:	2302      	movs	r3, #2
   b4470:	47a8      	blx	r5
  readReg(0xe7, (uint8_t*) &_sCalibHumi.h6, sizeof(_sCalibHumi.h6));
   b4472:	4622      	mov	r2, r4
   b4474:	21e7      	movs	r1, #231	; 0xe7
   b4476:	f852 3b30 	ldr.w	r3, [r2], #48
   b447a:	4620      	mov	r0, r4
   b447c:	685d      	ldr	r5, [r3, #4]
   b447e:	2301      	movs	r3, #1
   b4480:	47a8      	blx	r5
  _sCalibHumi.h4 = ((_sCalibHumi.h4 >> 8) & 0x0f) | ((_sCalibHumi.h4 & 0x00ff) << 4);
   b4482:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   b4484:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   b4488:	0112      	lsls	r2, r2, #4
   b448a:	f003 030f 	and.w	r3, r3, #15
   b448e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   b4492:	4313      	orrs	r3, r2
   b4494:	85a3      	strh	r3, [r4, #44]	; 0x2c
  _sCalibHumi.h5 = ((_sCalibHumi.h5 & 0xff00) >> 4) | ((_sCalibHumi.h5 & 0x00f0) >> 4);   // fxxk fxxk fxxk very strange arrangement
   b4496:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   b449a:	f3c3 130b 	ubfx	r3, r3, #4, #12
   b449e:	85e3      	strh	r3, [r4, #46]	; 0x2e
}
   b44a0:	bd38      	pop	{r3, r4, r5, pc}

000b44a2 <_ZN14DFRobot_BME28017getTemperatureRawEv>:
{
   b44a2:	b513      	push	{r0, r1, r4, lr}
  readReg(regOffset(&_sRegs.temp), (uint8_t*) &sReg, sizeof(sReg));
   b44a4:	6803      	ldr	r3, [r0, #0]
   b44a6:	aa01      	add	r2, sp, #4
   b44a8:	685c      	ldr	r4, [r3, #4]
   b44aa:	21fa      	movs	r1, #250	; 0xfa
   b44ac:	2303      	movs	r3, #3
   b44ae:	47a0      	blx	r4
  return (((uint32_t) sReg.msb << 12) | ((uint32_t) sReg.lsb << 4) | ((uint32_t) sReg.xlsb));
   b44b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b44b4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b44b8:	011b      	lsls	r3, r3, #4
   b44ba:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
   b44be:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b44c2:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
   b44c6:	b002      	add	sp, #8
   b44c8:	bd10      	pop	{r4, pc}
	...

000b44cc <_ZN14DFRobot_BME28014getTemperatureEv>:
{
   b44cc:	b510      	push	{r4, lr}
   b44ce:	4604      	mov	r4, r0
  int32_t   raw = getTemperatureRaw();
   b44d0:	f7ff ffe7 	bl	b44a2 <_ZN14DFRobot_BME28017getTemperatureRawEv>
  if(lastOperateStatus == eStatusOK) {
   b44d4:	7923      	ldrb	r3, [r4, #4]
   b44d6:	b9fb      	cbnz	r3, b4518 <_ZN14DFRobot_BME28014getTemperatureEv+0x4c>
    v1 = ((((raw >> 3) - ((int32_t) _sCalib.t1 << 1))) * ((int32_t) _sCalib.t2)) >> 11;
   b44d8:	89a1      	ldrh	r1, [r4, #12]
    return (rslt / 100);
   b44da:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4520 <_ZN14DFRobot_BME28014getTemperatureEv+0x54>
    v1 = ((((raw >> 3) - ((int32_t) _sCalib.t1 << 1))) * ((int32_t) _sCalib.t2)) >> 11;
   b44de:	004b      	lsls	r3, r1, #1
    v2 = (((((raw >> 4) - ((int32_t) _sCalib.t1)) * ((raw >> 4) - ((int32_t) _sCalib.t1))) >> 12) * ((int32_t) _sCalib.t3)) >> 14;
   b44e0:	ebc1 1220 	rsb	r2, r1, r0, asr #4
    v1 = ((((raw >> 3) - ((int32_t) _sCalib.t1 << 1))) * ((int32_t) _sCalib.t2)) >> 11;
   b44e4:	ebc3 01e0 	rsb	r1, r3, r0, asr #3
   b44e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   b44ec:	4359      	muls	r1, r3
    v2 = (((((raw >> 4) - ((int32_t) _sCalib.t1)) * ((raw >> 4) - ((int32_t) _sCalib.t1))) >> 12) * ((int32_t) _sCalib.t3)) >> 14;
   b44ee:	fb02 f302 	mul.w	r3, r2, r2
   b44f2:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
   b44f6:	131b      	asrs	r3, r3, #12
   b44f8:	4353      	muls	r3, r2
   b44fa:	139b      	asrs	r3, r3, #14
    _t_fine = v1 + v2;
   b44fc:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4500:	60a3      	str	r3, [r4, #8]
    rslt = (_t_fine * 5 + 128) >> 8;
   b4502:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4506:	3380      	adds	r3, #128	; 0x80
   b4508:	121b      	asrs	r3, r3, #8
   b450a:	ee07 3a90 	vmov	s15, r3
   b450e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return (rslt / 100);
   b4512:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4516:	bd10      	pop	{r4, pc}
  return 0;
   b4518:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4524 <_ZN14DFRobot_BME28014getTemperatureEv+0x58>
   b451c:	e7fb      	b.n	b4516 <_ZN14DFRobot_BME28014getTemperatureEv+0x4a>
   b451e:	bf00      	nop
   b4520:	42c80000 	.word	0x42c80000
   b4524:	00000000 	.word	0x00000000

000b4528 <_ZN14DFRobot_BME28014getHumidityRawEv>:
{
   b4528:	b513      	push	{r0, r1, r4, lr}
  readReg(regOffset(&_sRegs.humi), (uint8_t*) &sReg, sizeof(sReg));
   b452a:	6803      	ldr	r3, [r0, #0]
   b452c:	aa01      	add	r2, sp, #4
   b452e:	685c      	ldr	r4, [r3, #4]
   b4530:	21fd      	movs	r1, #253	; 0xfd
   b4532:	2302      	movs	r3, #2
   b4534:	47a0      	blx	r4
  return (((int32_t) sReg.msb << 8) | (int32_t) sReg.lsb);
   b4536:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b453a:	ba40      	rev16	r0, r0
}
   b453c:	b280      	uxth	r0, r0
   b453e:	b002      	add	sp, #8
   b4540:	bd10      	pop	{r4, pc}
	...

000b4544 <_ZN14DFRobot_BME28011getHumidityEv>:
{
   b4544:	b538      	push	{r3, r4, r5, lr}
   b4546:	4604      	mov	r4, r0
  getTemperature();   // update _t_fine
   b4548:	f7ff ffc0 	bl	b44cc <_ZN14DFRobot_BME28014getTemperatureEv>
  int32_t   raw = getHumidityRaw();
   b454c:	4620      	mov	r0, r4
   b454e:	f7ff ffeb 	bl	b4528 <_ZN14DFRobot_BME28014getHumidityRawEv>
  if(lastOperateStatus == eStatusOK) {
   b4552:	7923      	ldrb	r3, [r4, #4]
   b4554:	bbc3      	cbnz	r3, b45c8 <_ZN14DFRobot_BME28011getHumidityEv+0x84>
    v1 = (_t_fine - ((int32_t) 76800));
   b4556:	68a1      	ldr	r1, [r4, #8]
    v1 = (((((raw <<14) - (((int32_t) _sCalibHumi.h4) << 20) - (((int32_t) _sCalibHumi.h5) * v1)) +
   b4558:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
    v1 = (_t_fine - ((int32_t) 76800));
   b455c:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v1 = (((((raw <<14) - (((int32_t) _sCalibHumi.h4) << 20) - (((int32_t) _sCalibHumi.h5) * v1)) +
   b4560:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   b4564:	0509      	lsls	r1, r1, #20
   b4566:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b456a:	fb05 3312 	mls	r3, r5, r2, r3
   b456e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
         ((int32_t) 16384)) >> 15) * (((((((v1 * ((int32_t) _sCalibHumi.h6)) >> 10) * (((v1 *
   b4572:	13da      	asrs	r2, r3, #15
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b4574:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
         ((int32_t) 16384)) >> 15) * (((((((v1 * ((int32_t) _sCalibHumi.h6)) >> 10) * (((v1 *
   b4578:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b457c:	436b      	muls	r3, r5
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b457e:	12db      	asrs	r3, r3, #11
         ((int32_t) 16384)) >> 15) * (((((((v1 * ((int32_t) _sCalibHumi.h6)) >> 10) * (((v1 *
   b4580:	4369      	muls	r1, r5
   b4582:	1289      	asrs	r1, r1, #10
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b4584:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
         ((int32_t) 16384)) >> 15) * (((((((v1 * ((int32_t) _sCalibHumi.h6)) >> 10) * (((v1 *
   b4588:	434b      	muls	r3, r1
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b458a:	129b      	asrs	r3, r3, #10
         ((int32_t) _sCalibHumi.h2) + 8192) >> 14));
   b458c:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
         ((int32_t) _sCalibHumi.h3)) >> 11) + ((int32_t) 32768))) >> 10) + ((int32_t) 2097152)) *
   b4590:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   b4594:	434b      	muls	r3, r1
         ((int32_t) _sCalibHumi.h2) + 8192) >> 14));
   b4596:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b459a:	139b      	asrs	r3, r3, #14
    v1 = (((((raw <<14) - (((int32_t) _sCalibHumi.h4) << 20) - (((int32_t) _sCalibHumi.h5) * v1)) +
   b459c:	4353      	muls	r3, r2
    v1 = (v1 - (((((v1 >> 15) * (v1 >> 15)) >> 7) * ((int32_t) _sCalibHumi.h1)) >> 4));
   b459e:	13da      	asrs	r2, r3, #15
   b45a0:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   b45a4:	4352      	muls	r2, r2
   b45a6:	11d2      	asrs	r2, r2, #7
   b45a8:	434a      	muls	r2, r1
   b45aa:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v1 = (v1 < 0 ? 0 : v1);
   b45ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v1 = (v1 > 419430400 ? 419430400 : v1);
   b45b2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b45b6:	bfa8      	it	ge
   b45b8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    return ((float) (v1 >> 12)) / 1024.0f;
   b45bc:	131b      	asrs	r3, r3, #12
   b45be:	ee00 3a10 	vmov	s0, r3
   b45c2:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b45c6:	bd38      	pop	{r3, r4, r5, pc}
  return 0;
   b45c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; b45d0 <_ZN14DFRobot_BME28011getHumidityEv+0x8c>
   b45cc:	e7fb      	b.n	b45c6 <_ZN14DFRobot_BME28011getHumidityEv+0x82>
   b45ce:	bf00      	nop
   b45d0:	00000000 	.word	0x00000000

000b45d4 <_ZN14DFRobot_BME2806getRegEh>:
{
   b45d4:	b513      	push	{r0, r1, r4, lr}
  readReg(reg, (uint8_t*) &temp, sizeof(temp));
   b45d6:	6803      	ldr	r3, [r0, #0]
   b45d8:	f10d 0207 	add.w	r2, sp, #7
   b45dc:	685c      	ldr	r4, [r3, #4]
   b45de:	2301      	movs	r3, #1
   b45e0:	47a0      	blx	r4
}
   b45e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b45e6:	b002      	add	sp, #8
   b45e8:	bd10      	pop	{r4, pc}

000b45ea <_ZN14DFRobot_BME28012writeRegBitsEhhh>:
{
   b45ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b45ee:	461d      	mov	r5, r3
  readReg(reg, (uint8_t*) &temp, sizeof(temp));
   b45f0:	6803      	ldr	r3, [r0, #0]
{
   b45f2:	4617      	mov	r7, r2
  readReg(reg, (uint8_t*) &temp, sizeof(temp));
   b45f4:	f8d3 8004 	ldr.w	r8, [r3, #4]
   b45f8:	f10d 0207 	add.w	r2, sp, #7
   b45fc:	2301      	movs	r3, #1
{
   b45fe:	4604      	mov	r4, r0
   b4600:	460e      	mov	r6, r1
  readReg(reg, (uint8_t*) &temp, sizeof(temp));
   b4602:	47c0      	blx	r8
  temp &= ~field;
   b4604:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4608:	ea21 0307 	bic.w	r3, r1, r7
  temp |= val;
   b460c:	431d      	orrs	r5, r3
  writeReg(reg, (uint8_t*) &temp, sizeof(temp));
   b460e:	6823      	ldr	r3, [r4, #0]
  temp |= val;
   b4610:	f88d 5007 	strb.w	r5, [sp, #7]
  writeReg(reg, (uint8_t*) &temp, sizeof(temp));
   b4614:	681d      	ldr	r5, [r3, #0]
   b4616:	f10d 0207 	add.w	r2, sp, #7
   b461a:	2301      	movs	r3, #1
   b461c:	4631      	mov	r1, r6
   b461e:	4620      	mov	r0, r4
   b4620:	47a8      	blx	r5
}
   b4622:	b002      	add	sp, #8
   b4624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4628 <_ZN14DFRobot_BME28015setCtrlMeasModeENS_15eCtrlMeasMode_tE>:
  writeRegBitsHelper(_sRegs.ctrl_meas, sRegFlied, sRegVal);
   b4628:	f001 0303 	and.w	r3, r1, #3
   b462c:	2203      	movs	r2, #3
   b462e:	21f4      	movs	r1, #244	; 0xf4
   b4630:	f7ff bfdb 	b.w	b45ea <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4634 <_ZN14DFRobot_BME28023setCtrlMeasSamplingTempENS_11eSampling_tE>:
  sRegCtrlMeas_t    sRegFlied = {0}, sRegVal = {0};
   b4634:	f04f 0300 	mov.w	r3, #0
  sRegFlied.osrs_t = 0xff; sRegVal.osrs_t = eSampling;
   b4638:	f361 1347 	bfi	r3, r1, #5, #3
  writeRegBitsHelper(_sRegs.ctrl_meas, sRegFlied, sRegVal);
   b463c:	b2db      	uxtb	r3, r3
   b463e:	22e0      	movs	r2, #224	; 0xe0
   b4640:	21f4      	movs	r1, #244	; 0xf4
   b4642:	f7ff bfd2 	b.w	b45ea <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4646 <_ZN14DFRobot_BME28024setCtrlMeasSamplingPressENS_11eSampling_tE>:
  sRegCtrlMeas_t    sRegFlied = {0}, sRegVal = {0};
   b4646:	f04f 0300 	mov.w	r3, #0
  sRegFlied.osrs_p = 0xff; sRegVal.osrs_p = eSampling;
   b464a:	f361 0384 	bfi	r3, r1, #2, #3
  writeRegBitsHelper(_sRegs.ctrl_meas, sRegFlied, sRegVal);
   b464e:	b2db      	uxtb	r3, r3
   b4650:	221c      	movs	r2, #28
   b4652:	21f4      	movs	r1, #244	; 0xf4
   b4654:	f7ff bfc9 	b.w	b45ea <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4658 <_ZN14DFRobot_BME28019setCtrlHumiSamplingENS_11eSampling_tE>:
  writeRegBitsHelper(_sRegs.ctrl_hum, sRegFlied, sRegVal);
   b4658:	f001 0307 	and.w	r3, r1, #7
   b465c:	2207      	movs	r2, #7
   b465e:	21f2      	movs	r1, #242	; 0xf2
   b4660:	f7ff bfc3 	b.w	b45ea <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4664 <_ZN14DFRobot_BME28015setConfigFilterENS_15eConfigFilter_tE>:
  sRegConfig_t    sRegFlied = {0}, sRegVal = {0};
   b4664:	f04f 0300 	mov.w	r3, #0
  sRegFlied.filter = 0xff; sRegVal.filter = eFilter;
   b4668:	f361 0384 	bfi	r3, r1, #2, #3
  writeRegBitsHelper(_sRegs.config, sRegFlied, sRegVal);
   b466c:	b2db      	uxtb	r3, r3
   b466e:	221c      	movs	r2, #28
   b4670:	21f5      	movs	r1, #245	; 0xf5
   b4672:	f7ff bfba 	b.w	b45ea <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4676 <_ZN14DFRobot_BME28017setConfigTStandbyENS_17eConfigTStandby_tE>:
  sRegConfig_t    sRegFlied = {0}, sRegVal = {0};
   b4676:	f04f 0300 	mov.w	r3, #0
  sRegFlied.t_sb = 0xff; sRegVal.t_sb = eT;
   b467a:	f361 1347 	bfi	r3, r1, #5, #3
  writeRegBitsHelper(_sRegs.config, sRegFlied, sRegVal);
   b467e:	b2db      	uxtb	r3, r3
   b4680:	22e0      	movs	r2, #224	; 0xe0
   b4682:	21f5      	movs	r1, #245	; 0xf5
   b4684:	f7ff bfb1 	b.w	b45ea <_ZN14DFRobot_BME28012writeRegBitsEhhh>

000b4688 <_ZN14DFRobot_BME2805beginEv>:
{
   b4688:	b538      	push	{r3, r4, r5, lr}
  uint8_t temp = getReg(regOffset(&_sRegs.chip_id));
   b468a:	21d0      	movs	r1, #208	; 0xd0
{
   b468c:	4604      	mov	r4, r0
  uint8_t temp = getReg(regOffset(&_sRegs.chip_id));
   b468e:	f7ff ffa1 	bl	b45d4 <_ZN14DFRobot_BME2806getRegEh>
  if((temp == BME280_REG_CHIP_ID_DEFAULT) && (lastOperateStatus == eStatusOK)) {
   b4692:	2860      	cmp	r0, #96	; 0x60
   b4694:	d125      	bne.n	b46e2 <_ZN14DFRobot_BME2805beginEv+0x5a>
   b4696:	7925      	ldrb	r5, [r4, #4]
   b4698:	bb1d      	cbnz	r5, b46e2 <_ZN14DFRobot_BME2805beginEv+0x5a>
    reset();
   b469a:	4620      	mov	r0, r4
   b469c:	f7ff fea8 	bl	b43f0 <_ZN14DFRobot_BME2805resetEv>
    delay(300);
   b46a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b46a4:	f000 fb04 	bl	b4cb0 <delay>
    getCalibrate();
   b46a8:	4620      	mov	r0, r4
   b46aa:	f7ff feb1 	bl	b4410 <_ZN14DFRobot_BME28012getCalibrateEv>
    setCtrlMeasSamplingPress(eSampling_X8);
   b46ae:	2104      	movs	r1, #4
   b46b0:	4620      	mov	r0, r4
   b46b2:	f7ff ffc8 	bl	b4646 <_ZN14DFRobot_BME28024setCtrlMeasSamplingPressENS_11eSampling_tE>
    setCtrlMeasSamplingTemp(eSampling_X8);
   b46b6:	2104      	movs	r1, #4
   b46b8:	4620      	mov	r0, r4
   b46ba:	f7ff ffbb 	bl	b4634 <_ZN14DFRobot_BME28023setCtrlMeasSamplingTempENS_11eSampling_tE>
    setCtrlHumiSampling(eSampling_X8);
   b46be:	2104      	movs	r1, #4
   b46c0:	4620      	mov	r0, r4
   b46c2:	f7ff ffc9 	bl	b4658 <_ZN14DFRobot_BME28019setCtrlHumiSamplingENS_11eSampling_tE>
    setConfigFilter(eConfigFilter_off);
   b46c6:	4629      	mov	r1, r5
   b46c8:	4620      	mov	r0, r4
   b46ca:	f7ff ffcb 	bl	b4664 <_ZN14DFRobot_BME28015setConfigFilterENS_15eConfigFilter_tE>
    setConfigTStandby(eConfigTStandby_125);
   b46ce:	2102      	movs	r1, #2
   b46d0:	4620      	mov	r0, r4
   b46d2:	f7ff ffd0 	bl	b4676 <_ZN14DFRobot_BME28017setConfigTStandbyENS_17eConfigTStandby_tE>
    setCtrlMeasMode(eCtrlMeasMode_normal);   // set control measurement mode to make these settings effective
   b46d6:	2103      	movs	r1, #3
   b46d8:	4620      	mov	r0, r4
   b46da:	f7ff ffa5 	bl	b4628 <_ZN14DFRobot_BME28015setCtrlMeasModeENS_15eCtrlMeasMode_tE>
}
   b46de:	7920      	ldrb	r0, [r4, #4]
   b46e0:	bd38      	pop	{r3, r4, r5, pc}
    lastOperateStatus = eStatusErrDeviceNotDetected;
   b46e2:	2302      	movs	r3, #2
   b46e4:	7123      	strb	r3, [r4, #4]
   b46e6:	e7fa      	b.n	b46de <_ZN14DFRobot_BME2805beginEv+0x56>

000b46e8 <_ZN18DFRobot_BME280_IICC1EP7TwoWireh>:
DFRobot_BME280_IIC::DFRobot_BME280_IIC(TwoWire *pWire, uint8_t addr)
   b46e8:	b510      	push	{r4, lr}
   b46ea:	4c03      	ldr	r4, [pc, #12]	; (b46f8 <_ZN18DFRobot_BME280_IICC1EP7TwoWireh+0x10>)
   b46ec:	6004      	str	r4, [r0, #0]
  _pWire = pWire;
   b46ee:	6341      	str	r1, [r0, #52]	; 0x34
  _addr = addr;
   b46f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
}
   b46f4:	bd10      	pop	{r4, pc}
   b46f6:	bf00      	nop
   b46f8:	000b63dc 	.word	0x000b63dc

000b46fc <_ZN18DFRobot_ENS160_I2C8writeRegEhPKvj>:
  _pWire->begin();   // Wire.h(I2C)library function initialize wire library
  return DFRobot_ENS160::begin();   // Use the initialization function of the parent class
}

void DFRobot_ENS160_I2C::writeReg(uint8_t reg, const void* pBuf, size_t size)
{
   b46fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b46fe:	4605      	mov	r5, r0
   b4700:	460f      	mov	r7, r1
  if(pBuf == NULL) {
    DBG("pBuf ERROR!! : null pointer");
  }
  uint8_t * _pBuf = (uint8_t *)pBuf;

  _pWire->beginTransmission(_deviceAddr);
   b4702:	7b01      	ldrb	r1, [r0, #12]
   b4704:	6880      	ldr	r0, [r0, #8]
{
   b4706:	4614      	mov	r4, r2
   b4708:	461e      	mov	r6, r3
  _pWire->beginTransmission(_deviceAddr);
   b470a:	f000 fbb3 	bl	b4e74 <_ZN7TwoWire17beginTransmissionEh>
  _pWire->write(reg);
   b470e:	68a8      	ldr	r0, [r5, #8]
   b4710:	6803      	ldr	r3, [r0, #0]
   b4712:	4639      	mov	r1, r7
   b4714:	689b      	ldr	r3, [r3, #8]
   b4716:	4798      	blx	r3

  for(size_t i = 0; i < size; i++) {
   b4718:	4426      	add	r6, r4
   b471a:	42b4      	cmp	r4, r6
    _pWire->write(_pBuf[i]);
   b471c:	68a8      	ldr	r0, [r5, #8]
  for(size_t i = 0; i < size; i++) {
   b471e:	d005      	beq.n	b472c <_ZN18DFRobot_ENS160_I2C8writeRegEhPKvj+0x30>
    _pWire->write(_pBuf[i]);
   b4720:	6803      	ldr	r3, [r0, #0]
   b4722:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4726:	689b      	ldr	r3, [r3, #8]
   b4728:	4798      	blx	r3
  for(size_t i = 0; i < size; i++) {
   b472a:	e7f6      	b.n	b471a <_ZN18DFRobot_ENS160_I2C8writeRegEhPKvj+0x1e>
  }
  _pWire->endTransmission();
}
   b472c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  _pWire->endTransmission();
   b4730:	f000 bba8 	b.w	b4e84 <_ZN7TwoWire15endTransmissionEv>

000b4734 <_ZN18DFRobot_ENS160_I2C7readRegEhPvj>:

size_t DFRobot_ENS160_I2C::readReg(uint8_t reg, void* pBuf, size_t size)
{
   b4734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4736:	4604      	mov	r4, r0
   b4738:	460f      	mov	r7, r1
  if(NULL == pBuf) {
    DBG("pBuf ERROR!! : null pointer");
  }
  uint8_t * _pBuf = (uint8_t*)pBuf;

  _pWire->beginTransmission(_deviceAddr);
   b473a:	7b01      	ldrb	r1, [r0, #12]
   b473c:	6880      	ldr	r0, [r0, #8]
{
   b473e:	4615      	mov	r5, r2
   b4740:	461e      	mov	r6, r3
  _pWire->beginTransmission(_deviceAddr);
   b4742:	f000 fb97 	bl	b4e74 <_ZN7TwoWire17beginTransmissionEh>
  _pWire -> write(reg);
   b4746:	68a0      	ldr	r0, [r4, #8]
   b4748:	6803      	ldr	r3, [r0, #0]
   b474a:	4639      	mov	r1, r7
   b474c:	689b      	ldr	r3, [r3, #8]
   b474e:	4798      	blx	r3
  if(0 != _pWire->endTransmission()) {   // Used Wire.endTransmission() to end a slave transmission started by beginTransmission() and arranged by write().
   b4750:	68a0      	ldr	r0, [r4, #8]
   b4752:	f000 fb97 	bl	b4e84 <_ZN7TwoWire15endTransmissionEv>
   b4756:	b9a0      	cbnz	r0, b4782 <_ZN18DFRobot_ENS160_I2C7readRegEhPvj+0x4e>
    DBG("endTransmission ERROR!!");
  } else {
    _pWire->requestFrom(_deviceAddr, (uint8_t)size);   // Master device requests size bytes from slave device, which can be accepted by master device with read() or available()
   b4758:	b2f2      	uxtb	r2, r6
   b475a:	7b21      	ldrb	r1, [r4, #12]
   b475c:	68a0      	ldr	r0, [r4, #8]
   b475e:	f000 fb86 	bl	b4e6e <_ZN7TwoWire11requestFromEhj>
   b4762:	1e6e      	subs	r6, r5, #1
   b4764:	f1c5 0501 	rsb	r5, r5, #1
    
    while (_pWire->available()) {
   b4768:	68a0      	ldr	r0, [r4, #8]
   b476a:	6803      	ldr	r3, [r0, #0]
   b476c:	691b      	ldr	r3, [r3, #16]
   b476e:	19af      	adds	r7, r5, r6
   b4770:	4798      	blx	r3
   b4772:	b138      	cbz	r0, b4784 <_ZN18DFRobot_ENS160_I2C7readRegEhPvj+0x50>
      _pBuf[count++] = _pWire->read();   // Use read() to receive and put into buf
   b4774:	68a0      	ldr	r0, [r4, #8]
   b4776:	6803      	ldr	r3, [r0, #0]
   b4778:	695b      	ldr	r3, [r3, #20]
   b477a:	4798      	blx	r3
   b477c:	f806 0f01 	strb.w	r0, [r6, #1]!
    while (_pWire->available()) {
   b4780:	e7f2      	b.n	b4768 <_ZN18DFRobot_ENS160_I2C7readRegEhPvj+0x34>
  size_t count = 0;
   b4782:	2700      	movs	r7, #0
    }
    // _pWire->endTransmission();
  }
  return count;
}
   b4784:	4638      	mov	r0, r7
   b4786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4788 <_ZN14DFRobot_ENS16010setPWRModeEh>:
{
   b4788:	b513      	push	{r0, r1, r4, lr}
  writeReg(ENS160_OPMODE_REG, &mode, sizeof(mode));
   b478a:	6803      	ldr	r3, [r0, #0]
{
   b478c:	f88d 1007 	strb.w	r1, [sp, #7]
  writeReg(ENS160_OPMODE_REG, &mode, sizeof(mode));
   b4790:	685c      	ldr	r4, [r3, #4]
   b4792:	f10d 0207 	add.w	r2, sp, #7
   b4796:	2301      	movs	r3, #1
   b4798:	2110      	movs	r1, #16
   b479a:	47a0      	blx	r4
  delay(20);   // Give it some time to switch mode
   b479c:	2014      	movs	r0, #20
   b479e:	f000 fa87 	bl	b4cb0 <delay>
}
   b47a2:	b002      	add	sp, #8
   b47a4:	bd10      	pop	{r4, pc}

000b47a6 <_ZN14DFRobot_ENS16010setINTModeEh>:
{
   b47a6:	b513      	push	{r0, r1, r4, lr}
  writeReg(ENS160_CONFIG_REG, &mode, sizeof(mode));
   b47a8:	6803      	ldr	r3, [r0, #0]
  mode |= (eINTDataDrdyEN | eIntGprDrdyDIS);
   b47aa:	f041 0102 	orr.w	r1, r1, #2
  writeReg(ENS160_CONFIG_REG, &mode, sizeof(mode));
   b47ae:	685c      	ldr	r4, [r3, #4]
  mode |= (eINTDataDrdyEN | eIntGprDrdyDIS);
   b47b0:	f88d 1007 	strb.w	r1, [sp, #7]
  writeReg(ENS160_CONFIG_REG, &mode, sizeof(mode));
   b47b4:	2301      	movs	r3, #1
   b47b6:	f10d 0207 	add.w	r2, sp, #7
   b47ba:	2111      	movs	r1, #17
   b47bc:	47a0      	blx	r4
  delay(20);   // Give it some time to switch mode
   b47be:	2014      	movs	r0, #20
   b47c0:	f000 fa76 	bl	b4cb0 <delay>
}
   b47c4:	b002      	add	sp, #8
   b47c6:	bd10      	pop	{r4, pc}

000b47c8 <_ZN14DFRobot_ENS1605beginEv>:
{
   b47c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(0 == readReg(ENS160_PART_ID_REG, idBuf, sizeof(idBuf)))   // Judge whether the data bus is successful
   b47ca:	6803      	ldr	r3, [r0, #0]
   b47cc:	aa01      	add	r2, sp, #4
   b47ce:	689d      	ldr	r5, [r3, #8]
   b47d0:	2100      	movs	r1, #0
   b47d2:	2302      	movs	r3, #2
{
   b47d4:	4604      	mov	r4, r0
  if(0 == readReg(ENS160_PART_ID_REG, idBuf, sizeof(idBuf)))   // Judge whether the data bus is successful
   b47d6:	47a8      	blx	r5
   b47d8:	b178      	cbz	r0, b47fa <_ZN14DFRobot_ENS1605beginEv+0x32>
  if(ENS160_PART_ID != ENS160_CONCAT_BYTES(idBuf[1], idBuf[0]))   // Judge whether the chip version matches
   b47da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b47de:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
   b47e2:	d10d      	bne.n	b4800 <_ZN14DFRobot_ENS1605beginEv+0x38>
  setPWRMode(ENS160_STANDARD_MODE);
   b47e4:	2102      	movs	r1, #2
   b47e6:	4620      	mov	r0, r4
   b47e8:	f7ff ffce 	bl	b4788 <_ZN14DFRobot_ENS16010setPWRModeEh>
  setINTMode(0x00);
   b47ec:	4620      	mov	r0, r4
   b47ee:	2100      	movs	r1, #0
   b47f0:	f7ff ffd9 	bl	b47a6 <_ZN14DFRobot_ENS16010setINTModeEh>
  return NO_ERR;
   b47f4:	2000      	movs	r0, #0
}
   b47f6:	b003      	add	sp, #12
   b47f8:	bd30      	pop	{r4, r5, pc}
    return ERR_DATA_BUS;
   b47fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b47fe:	e7fa      	b.n	b47f6 <_ZN14DFRobot_ENS1605beginEv+0x2e>
    return ERR_IC_VERSION;
   b4800:	f06f 0001 	mvn.w	r0, #1
   b4804:	e7f7      	b.n	b47f6 <_ZN14DFRobot_ENS1605beginEv+0x2e>

000b4806 <_ZN18DFRobot_ENS160_I2C5beginEv>:
{
   b4806:	b510      	push	{r4, lr}
   b4808:	4604      	mov	r4, r0
  _pWire->begin();   // Wire.h(I2C)library function initialize wire library
   b480a:	6880      	ldr	r0, [r0, #8]
   b480c:	f000 fb00 	bl	b4e10 <_ZN7TwoWire5beginEv>
  return DFRobot_ENS160::begin();   // Use the initialization function of the parent class
   b4810:	4620      	mov	r0, r4
}
   b4812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return DFRobot_ENS160::begin();   // Use the initialization function of the parent class
   b4816:	f7ff bfd7 	b.w	b47c8 <_ZN14DFRobot_ENS1605beginEv>
   b481a:	0000      	movs	r0, r0
   b481c:	0000      	movs	r0, r0
	...

000b4820 <_ZN14DFRobot_ENS16013setTempAndHumEff>:
{
   b4820:	b530      	push	{r4, r5, lr}
   b4822:	ed2d 8b02 	vpush	{d8}
   b4826:	4604      	mov	r4, r0
   b4828:	b083      	sub	sp, #12
   b482a:	ee10 0a10 	vmov	r0, s0
   b482e:	eeb0 8a60 	vmov.f32	s16, s1
  uint16_t temp = (ambientTemp + 273.15) * 64;
   b4832:	f001 f981 	bl	b5b38 <__aeabi_f2d>
   b4836:	a318      	add	r3, pc, #96	; (adr r3, b4898 <_ZN14DFRobot_ENS16013setTempAndHumEff+0x78>)
   b4838:	e9d3 2300 	ldrd	r2, r3, [r3]
   b483c:	f001 f81e 	bl	b587c <__adddf3>
   b4840:	4b13      	ldr	r3, [pc, #76]	; (b4890 <_ZN14DFRobot_ENS16013setTempAndHumEff+0x70>)
   b4842:	2200      	movs	r2, #0
   b4844:	f001 f9d0 	bl	b5be8 <__aeabi_dmul>
   b4848:	f001 fbe0 	bl	b600c <__aeabi_d2uiz>
  uint16_t rh = relativeHumidity * 512;
   b484c:	eddf 0a11 	vldr	s1, [pc, #68]	; b4894 <_ZN14DFRobot_ENS16013setTempAndHumEff+0x74>
   b4850:	ee28 8a20 	vmul.f32	s16, s16, s1
  uint16_t temp = (ambientTemp + 273.15) * 64;
   b4854:	b282      	uxth	r2, r0
  uint16_t rh = relativeHumidity * 512;
   b4856:	eebc 8ac8 	vcvt.u32.f32	s16, s16
  buf[0] = temp & 0xFF;
   b485a:	f88d 2004 	strb.w	r2, [sp, #4]
  uint16_t rh = relativeHumidity * 512;
   b485e:	ee18 3a10 	vmov	r3, s16
   b4862:	b29b      	uxth	r3, r3
  buf[2] = rh & 0xFF;
   b4864:	f88d 3006 	strb.w	r3, [sp, #6]
  buf[3] = (rh & 0xFF00) >> 8;
   b4868:	0a1b      	lsrs	r3, r3, #8
   b486a:	f88d 3007 	strb.w	r3, [sp, #7]
  writeReg(ENS160_TEMP_IN_REG, buf, sizeof(buf));
   b486e:	6823      	ldr	r3, [r4, #0]
  buf[1] = (temp & 0xFF00) >> 8;
   b4870:	0a12      	lsrs	r2, r2, #8
  writeReg(ENS160_TEMP_IN_REG, buf, sizeof(buf));
   b4872:	685d      	ldr	r5, [r3, #4]
  buf[1] = (temp & 0xFF00) >> 8;
   b4874:	f88d 2005 	strb.w	r2, [sp, #5]
  writeReg(ENS160_TEMP_IN_REG, buf, sizeof(buf));
   b4878:	2304      	movs	r3, #4
   b487a:	eb0d 0203 	add.w	r2, sp, r3
   b487e:	2113      	movs	r1, #19
   b4880:	4620      	mov	r0, r4
   b4882:	47a8      	blx	r5
}
   b4884:	b003      	add	sp, #12
   b4886:	ecbd 8b02 	vpop	{d8}
   b488a:	bd30      	pop	{r4, r5, pc}
   b488c:	f3af 8000 	nop.w
   b4890:	40500000 	.word	0x40500000
   b4894:	44000000 	.word	0x44000000
   b4898:	66666666 	.word	0x66666666
   b489c:	40711266 	.word	0x40711266

000b48a0 <_ZN18DFRobot_ENS160_I2CC1EP7TwoWireh>:
DFRobot_ENS160_I2C::DFRobot_ENS160_I2C(TwoWire *pWire, uint8_t i2cAddr)
   b48a0:	b510      	push	{r4, lr}
  misr = 0;   // Mirror of DATA_MISR (0 is hardware default)
   b48a2:	2400      	movs	r4, #0
   b48a4:	7144      	strb	r4, [r0, #5]
DFRobot_ENS160_I2C::DFRobot_ENS160_I2C(TwoWire *pWire, uint8_t i2cAddr)
   b48a6:	4c02      	ldr	r4, [pc, #8]	; (b48b0 <_ZN18DFRobot_ENS160_I2CC1EP7TwoWireh+0x10>)
   b48a8:	6004      	str	r4, [r0, #0]
  _deviceAddr = i2cAddr;
   b48aa:	7302      	strb	r2, [r0, #12]
  _pWire = pWire;
   b48ac:	6081      	str	r1, [r0, #8]
}
   b48ae:	bd10      	pop	{r4, pc}
   b48b0:	000b63ec 	.word	0x000b63ec

000b48b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <os_mutex_recursive_create+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	00030248 	.word	0x00030248

000b48c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <HAL_RNG_GetRandomNumber+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	685b      	ldr	r3, [r3, #4]
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	00030218 	.word	0x00030218

000b48d4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	695b      	ldr	r3, [r3, #20]
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	00030218 	.word	0x00030218

000b48e4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <HAL_Pin_Mode+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	689b      	ldr	r3, [r3, #8]
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	0003022c 	.word	0x0003022c

000b48f4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <HAL_Get_Pin_Mode+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	68db      	ldr	r3, [r3, #12]
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	0003022c 	.word	0x0003022c

000b4904 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <HAL_GPIO_Write+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	691b      	ldr	r3, [r3, #16]
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	0003022c 	.word	0x0003022c

000b4914 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <hal_i2c_begin+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	68db      	ldr	r3, [r3, #12]
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	00030228 	.word	0x00030228

000b4924 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <hal_i2c_begin_transmission+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	699b      	ldr	r3, [r3, #24]
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	00030228 	.word	0x00030228

000b4934 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <hal_i2c_end_transmission+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	69db      	ldr	r3, [r3, #28]
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	00030228 	.word	0x00030228

000b4944 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4944:	b508      	push	{r3, lr}
   b4946:	4b02      	ldr	r3, [pc, #8]	; (b4950 <hal_i2c_write+0xc>)
   b4948:	681b      	ldr	r3, [r3, #0]
   b494a:	6a1b      	ldr	r3, [r3, #32]
   b494c:	9301      	str	r3, [sp, #4]
   b494e:	bd08      	pop	{r3, pc}
   b4950:	00030228 	.word	0x00030228

000b4954 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4954:	b508      	push	{r3, lr}
   b4956:	4b02      	ldr	r3, [pc, #8]	; (b4960 <hal_i2c_available+0xc>)
   b4958:	681b      	ldr	r3, [r3, #0]
   b495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b495c:	9301      	str	r3, [sp, #4]
   b495e:	bd08      	pop	{r3, pc}
   b4960:	00030228 	.word	0x00030228

000b4964 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <hal_i2c_read+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	00030228 	.word	0x00030228

000b4974 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <hal_i2c_peek+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	00030228 	.word	0x00030228

000b4984 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <hal_i2c_flush+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	00030228 	.word	0x00030228

000b4994 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <hal_i2c_is_enabled+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	00030228 	.word	0x00030228

000b49a4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <hal_i2c_init+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	00030228 	.word	0x00030228

000b49b4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <hal_i2c_request_ex+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	00030228 	.word	0x00030228

000b49c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <inet_inet_ntop+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	695b      	ldr	r3, [r3, #20]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	00030264 	.word	0x00030264

000b49d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <netdb_freeaddrinfo+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	689b      	ldr	r3, [r3, #8]
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	00030268 	.word	0x00030268

000b49e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <netdb_getaddrinfo+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	68db      	ldr	r3, [r3, #12]
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	00030268 	.word	0x00030268

000b49f4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <hal_spi_init+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	69db      	ldr	r3, [r3, #28]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030230 	.word	0x00030230

000b4a04 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <hal_spi_is_enabled+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	6a1b      	ldr	r3, [r3, #32]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	00030230 	.word	0x00030230

000b4a14 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <hal_usart_write+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	68db      	ldr	r3, [r3, #12]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	0003023c 	.word	0x0003023c

000b4a24 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <hal_usart_available+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	691b      	ldr	r3, [r3, #16]
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	0003023c 	.word	0x0003023c

000b4a34 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <hal_usart_read+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	695b      	ldr	r3, [r3, #20]
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	0003023c 	.word	0x0003023c

000b4a44 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <hal_usart_peek+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	699b      	ldr	r3, [r3, #24]
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	0003023c 	.word	0x0003023c

000b4a54 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <hal_usart_flush+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	69db      	ldr	r3, [r3, #28]
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	0003023c 	.word	0x0003023c

000b4a64 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <hal_usart_is_enabled+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6a1b      	ldr	r3, [r3, #32]
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	0003023c 	.word	0x0003023c

000b4a74 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <hal_usart_available_data_for_write+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	0003023c 	.word	0x0003023c

000b4a84 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <hal_usart_init_ex+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	0003023c 	.word	0x0003023c

000b4a94 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <HAL_USB_USART_Init+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	681b      	ldr	r3, [r3, #0]
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	0003024c 	.word	0x0003024c

000b4aa4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <HAL_USB_USART_Begin+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	685b      	ldr	r3, [r3, #4]
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	0003024c 	.word	0x0003024c

000b4ab4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	4b02      	ldr	r3, [pc, #8]	; (b4ac0 <HAL_USB_USART_Available_Data+0xc>)
   b4ab8:	681b      	ldr	r3, [r3, #0]
   b4aba:	691b      	ldr	r3, [r3, #16]
   b4abc:	9301      	str	r3, [sp, #4]
   b4abe:	bd08      	pop	{r3, pc}
   b4ac0:	0003024c 	.word	0x0003024c

000b4ac4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ac4:	b508      	push	{r3, lr}
   b4ac6:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4ac8:	681b      	ldr	r3, [r3, #0]
   b4aca:	695b      	ldr	r3, [r3, #20]
   b4acc:	9301      	str	r3, [sp, #4]
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	0003024c 	.word	0x0003024c

000b4ad4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ad4:	b508      	push	{r3, lr}
   b4ad6:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <HAL_USB_USART_Receive_Data+0xc>)
   b4ad8:	681b      	ldr	r3, [r3, #0]
   b4ada:	699b      	ldr	r3, [r3, #24]
   b4adc:	9301      	str	r3, [sp, #4]
   b4ade:	bd08      	pop	{r3, pc}
   b4ae0:	0003024c 	.word	0x0003024c

000b4ae4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <HAL_USB_USART_Send_Data+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	69db      	ldr	r3, [r3, #28]
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	0003024c 	.word	0x0003024c

000b4af4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4af4:	b508      	push	{r3, lr}
   b4af6:	4b02      	ldr	r3, [pc, #8]	; (b4b00 <HAL_USB_USART_Flush_Data+0xc>)
   b4af8:	681b      	ldr	r3, [r3, #0]
   b4afa:	6a1b      	ldr	r3, [r3, #32]
   b4afc:	9301      	str	r3, [sp, #4]
   b4afe:	bd08      	pop	{r3, pc}
   b4b00:	0003024c 	.word	0x0003024c

000b4b04 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <set_system_mode+0xc>)
   b4b08:	681b      	ldr	r3, [r3, #0]
   b4b0a:	685b      	ldr	r3, [r3, #4]
   b4b0c:	9301      	str	r3, [sp, #4]
   b4b0e:	bd08      	pop	{r3, pc}
   b4b10:	00030220 	.word	0x00030220

000b4b14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b02      	ldr	r3, [pc, #8]	; (b4b20 <system_delay_ms+0xc>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	695b      	ldr	r3, [r3, #20]
   b4b1c:	9301      	str	r3, [sp, #4]
   b4b1e:	bd08      	pop	{r3, pc}
   b4b20:	00030220 	.word	0x00030220

000b4b24 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4b24:	b508      	push	{r3, lr}
   b4b26:	4b03      	ldr	r3, [pc, #12]	; (b4b34 <system_ctrl_set_app_request_handler+0x10>)
   b4b28:	681b      	ldr	r3, [r3, #0]
   b4b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b2e:	9301      	str	r3, [sp, #4]
   b4b30:	bd08      	pop	{r3, pc}
   b4b32:	0000      	.short	0x0000
   b4b34:	00030220 	.word	0x00030220

000b4b38 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b03      	ldr	r3, [pc, #12]	; (b4b48 <system_ctrl_set_result+0x10>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4b42:	9301      	str	r3, [sp, #4]
   b4b44:	bd08      	pop	{r3, pc}
   b4b46:	0000      	.short	0x0000
   b4b48:	00030220 	.word	0x00030220

000b4b4c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b03      	ldr	r3, [pc, #12]	; (b4b5c <system_reset+0x10>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b4b56:	9301      	str	r3, [sp, #4]
   b4b58:	bd08      	pop	{r3, pc}
   b4b5a:	0000      	.short	0x0000
   b4b5c:	00030220 	.word	0x00030220

000b4b60 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <spark_variable+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	681b      	ldr	r3, [r3, #0]
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	00030244 	.word	0x00030244

000b4b70 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <spark_function+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	685b      	ldr	r3, [r3, #4]
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	00030244 	.word	0x00030244

000b4b80 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <spark_process+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	689b      	ldr	r3, [r3, #8]
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	00030244 	.word	0x00030244

000b4b90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	00030244 	.word	0x00030244

000b4ba0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <network_connect+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	685b      	ldr	r3, [r3, #4]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	00030240 	.word	0x00030240

000b4bb0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <network_connecting+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	689b      	ldr	r3, [r3, #8]
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	00030240 	.word	0x00030240

000b4bc0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <network_disconnect+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	68db      	ldr	r3, [r3, #12]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	00030240 	.word	0x00030240

000b4bd0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <network_ready+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	691b      	ldr	r3, [r3, #16]
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	00030240 	.word	0x00030240

000b4be0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <network_on+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	695b      	ldr	r3, [r3, #20]
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	00030240 	.word	0x00030240

000b4bf0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <network_off+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	699b      	ldr	r3, [r3, #24]
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	00030240 	.word	0x00030240

000b4c00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <network_listen+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	69db      	ldr	r3, [r3, #28]
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	00030240 	.word	0x00030240

000b4c10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b02      	ldr	r3, [pc, #8]	; (b4c1c <network_listening+0xc>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	6a1b      	ldr	r3, [r3, #32]
   b4c18:	9301      	str	r3, [sp, #4]
   b4c1a:	bd08      	pop	{r3, pc}
   b4c1c:	00030240 	.word	0x00030240

000b4c20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4c20:	b508      	push	{r3, lr}
   b4c22:	4b02      	ldr	r3, [pc, #8]	; (b4c2c <network_set_listen_timeout+0xc>)
   b4c24:	681b      	ldr	r3, [r3, #0]
   b4c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c28:	9301      	str	r3, [sp, #4]
   b4c2a:	bd08      	pop	{r3, pc}
   b4c2c:	00030240 	.word	0x00030240

000b4c30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4c30:	b508      	push	{r3, lr}
   b4c32:	4b02      	ldr	r3, [pc, #8]	; (b4c3c <network_get_listen_timeout+0xc>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c38:	9301      	str	r3, [sp, #4]
   b4c3a:	bd08      	pop	{r3, pc}
   b4c3c:	00030240 	.word	0x00030240

000b4c40 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4c40:	b508      	push	{r3, lr}
   b4c42:	4b02      	ldr	r3, [pc, #8]	; (b4c4c <network_is_on+0xc>)
   b4c44:	681b      	ldr	r3, [r3, #0]
   b4c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c48:	9301      	str	r3, [sp, #4]
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	00030240 	.word	0x00030240

000b4c50 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <network_is_off+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	00030240 	.word	0x00030240

000b4c60 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <malloc+0xc>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	681b      	ldr	r3, [r3, #0]
   b4c68:	9301      	str	r3, [sp, #4]
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	0003021c 	.word	0x0003021c

000b4c70 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <free+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	685b      	ldr	r3, [r3, #4]
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	0003021c 	.word	0x0003021c

000b4c80 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <realloc+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	689b      	ldr	r3, [r3, #8]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	0003021c 	.word	0x0003021c

000b4c90 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <__assert_func+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	0003021c 	.word	0x0003021c

000b4ca0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <newlib_impure_ptr_callback+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	0003021c 	.word	0x0003021c

000b4cb0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4cb0:	2100      	movs	r1, #0
   b4cb2:	f7ff bf2f 	b.w	b4b14 <system_delay_ms>
	...

000b4cb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4cb8:	4802      	ldr	r0, [pc, #8]	; (b4cc4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4cba:	2300      	movs	r3, #0
   b4cbc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4cbe:	f7ff bdf9 	b.w	b48b4 <os_mutex_recursive_create>
   b4cc2:	bf00      	nop
   b4cc4:	2003e6b8 	.word	0x2003e6b8

000b4cc8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b4cc8:	b510      	push	{r4, lr}
   b4cca:	b088      	sub	sp, #32
   b4ccc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b4cce:	4668      	mov	r0, sp
   b4cd0:	f000 fac9 	bl	b5266 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b4cd4:	4669      	mov	r1, sp
   b4cd6:	a804      	add	r0, sp, #16
   b4cd8:	f000 fae8 	bl	b52ac <_ZN6StringC1ERKS_>
   b4cdc:	a804      	add	r0, sp, #16
   b4cde:	47a0      	blx	r4
   b4ce0:	4604      	mov	r4, r0
   b4ce2:	a804      	add	r0, sp, #16
   b4ce4:	f000 fa74 	bl	b51d0 <_ZN6StringD1Ev>
    String p(param);
   b4ce8:	4668      	mov	r0, sp
   b4cea:	f000 fa71 	bl	b51d0 <_ZN6StringD1Ev>
}
   b4cee:	4620      	mov	r0, r4
   b4cf0:	b008      	add	sp, #32
   b4cf2:	bd10      	pop	{r4, pc}

000b4cf4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b4cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b4cf6:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b4cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b4cfc:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b4cfe:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b4d00:	461a      	mov	r2, r3
   b4d02:	4669      	mov	r1, sp
   b4d04:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b4d06:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b4d0a:	f8ad 4000 	strh.w	r4, [sp]
   b4d0e:	f7ff ff2f 	bl	b4b70 <spark_function>
}
   b4d12:	b004      	add	sp, #16
   b4d14:	bd10      	pop	{r4, pc}

000b4d16 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d16:	2200      	movs	r2, #0
   b4d18:	6840      	ldr	r0, [r0, #4]
   b4d1a:	4611      	mov	r1, r2
   b4d1c:	f7ff bf78 	b.w	b4c10 <network_listening>

000b4d20 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d20:	2200      	movs	r2, #0
   b4d22:	6840      	ldr	r0, [r0, #4]
   b4d24:	4611      	mov	r1, r2
   b4d26:	f7ff bf83 	b.w	b4c30 <network_get_listen_timeout>

000b4d2a <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d2a:	6840      	ldr	r0, [r0, #4]
   b4d2c:	2200      	movs	r2, #0
   b4d2e:	f7ff bf77 	b.w	b4c20 <network_set_listen_timeout>

000b4d32 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d32:	6840      	ldr	r0, [r0, #4]
   b4d34:	2200      	movs	r2, #0
   b4d36:	f081 0101 	eor.w	r1, r1, #1
   b4d3a:	f7ff bf61 	b.w	b4c00 <network_listen>

000b4d3e <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d3e:	2300      	movs	r3, #0
   b4d40:	6840      	ldr	r0, [r0, #4]
   b4d42:	461a      	mov	r2, r3
   b4d44:	4619      	mov	r1, r3
   b4d46:	f7ff bf53 	b.w	b4bf0 <network_off>

000b4d4a <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d4a:	2300      	movs	r3, #0
   b4d4c:	6840      	ldr	r0, [r0, #4]
   b4d4e:	461a      	mov	r2, r3
   b4d50:	4619      	mov	r1, r3
   b4d52:	f7ff bf45 	b.w	b4be0 <network_on>

000b4d56 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4d56:	2200      	movs	r2, #0
   b4d58:	6840      	ldr	r0, [r0, #4]
   b4d5a:	4611      	mov	r1, r2
   b4d5c:	f7ff bf38 	b.w	b4bd0 <network_ready>

000b4d60 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4d60:	2200      	movs	r2, #0
   b4d62:	6840      	ldr	r0, [r0, #4]
   b4d64:	4611      	mov	r1, r2
   b4d66:	f7ff bf23 	b.w	b4bb0 <network_connecting>

000b4d6a <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4d6a:	6840      	ldr	r0, [r0, #4]
   b4d6c:	2200      	movs	r2, #0
   b4d6e:	2102      	movs	r1, #2
   b4d70:	f7ff bf26 	b.w	b4bc0 <network_disconnect>

000b4d74 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4d74:	2300      	movs	r3, #0
   b4d76:	6840      	ldr	r0, [r0, #4]
   b4d78:	461a      	mov	r2, r3
   b4d7a:	f7ff bf11 	b.w	b4ba0 <network_connect>
	...

000b4d80 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4d80:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4d82:	2203      	movs	r2, #3
   b4d84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4d86:	4a02      	ldr	r2, [pc, #8]	; (b4d90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4d88:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4d8a:	4770      	bx	lr
   b4d8c:	2003e6bc 	.word	0x2003e6bc
   b4d90:	000b6400 	.word	0x000b6400

000b4d94 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4d94:	4770      	bx	lr

000b4d96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d98:	4606      	mov	r6, r0
   b4d9a:	4615      	mov	r5, r2
   b4d9c:	460c      	mov	r4, r1
   b4d9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4da0:	42bc      	cmp	r4, r7
   b4da2:	d006      	beq.n	b4db2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4da4:	6833      	ldr	r3, [r6, #0]
   b4da6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4daa:	689b      	ldr	r3, [r3, #8]
   b4dac:	4630      	mov	r0, r6
   b4dae:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4db0:	e7f6      	b.n	b4da0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4db2:	4628      	mov	r0, r5
   b4db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4db6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4db6:	7c00      	ldrb	r0, [r0, #16]
   b4db8:	2200      	movs	r2, #0
   b4dba:	f7ff bdc3 	b.w	b4944 <hal_i2c_write>

000b4dbe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4dbe:	7c00      	ldrb	r0, [r0, #16]
   b4dc0:	2100      	movs	r1, #0
   b4dc2:	f7ff bdc7 	b.w	b4954 <hal_i2c_available>

000b4dc6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4dc6:	7c00      	ldrb	r0, [r0, #16]
   b4dc8:	2100      	movs	r1, #0
   b4dca:	f7ff bdcb 	b.w	b4964 <hal_i2c_read>

000b4dce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4dce:	7c00      	ldrb	r0, [r0, #16]
   b4dd0:	2100      	movs	r1, #0
   b4dd2:	f7ff bdcf 	b.w	b4974 <hal_i2c_peek>

000b4dd6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4dd6:	7c00      	ldrb	r0, [r0, #16]
   b4dd8:	2100      	movs	r1, #0
   b4dda:	f7ff bdd3 	b.w	b4984 <hal_i2c_flush>

000b4dde <_ZN7TwoWireD0Ev>:
   b4dde:	b510      	push	{r4, lr}
   b4de0:	2114      	movs	r1, #20
   b4de2:	4604      	mov	r4, r0
   b4de4:	f7ff f959 	bl	b409a <_ZdlPvj>
   b4de8:	4620      	mov	r0, r4
   b4dea:	bd10      	pop	{r4, pc}

000b4dec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4dec:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4df2:	4604      	mov	r4, r0
   b4df4:	4608      	mov	r0, r1
   b4df6:	2100      	movs	r1, #0
   b4df8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4dfc:	4b03      	ldr	r3, [pc, #12]	; (b4e0c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4dfe:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4e00:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4e02:	4611      	mov	r1, r2
   b4e04:	f7ff fdce 	bl	b49a4 <hal_i2c_init>
}
   b4e08:	4620      	mov	r0, r4
   b4e0a:	bd10      	pop	{r4, pc}
   b4e0c:	000b643c 	.word	0x000b643c

000b4e10 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b4e10:	2300      	movs	r3, #0
   b4e12:	7c00      	ldrb	r0, [r0, #16]
   b4e14:	461a      	mov	r2, r3
   b4e16:	4619      	mov	r1, r3
   b4e18:	f7ff bd7c 	b.w	b4914 <hal_i2c_begin>

000b4e1c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b4e1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b4e1e:	2200      	movs	r2, #0
   b4e20:	2314      	movs	r3, #20
   b4e22:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4e26:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b4e2a:	780b      	ldrb	r3, [r1, #0]
   b4e2c:	f88d 3008 	strb.w	r3, [sp, #8]
   b4e30:	684b      	ldr	r3, [r1, #4]
   b4e32:	9303      	str	r3, [sp, #12]
   b4e34:	68cb      	ldr	r3, [r1, #12]
   b4e36:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b4e38:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b4e3a:	7a0b      	ldrb	r3, [r1, #8]
   b4e3c:	9305      	str	r3, [sp, #20]
   b4e3e:	a901      	add	r1, sp, #4
   b4e40:	f7ff fdb8 	bl	b49b4 <hal_i2c_request_ex>
}
   b4e44:	b007      	add	sp, #28
   b4e46:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e4a <_ZN7TwoWire11requestFromEhjh>:
{
   b4e4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b4e4c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b4e4e:	f88d 1000 	strb.w	r1, [sp]
   b4e52:	f04f 0164 	mov.w	r1, #100	; 0x64
   b4e56:	9103      	str	r1, [sp, #12]
   b4e58:	bf18      	it	ne
   b4e5a:	2301      	movne	r3, #1
   b4e5c:	4669      	mov	r1, sp
    size_ = size;
   b4e5e:	9201      	str	r2, [sp, #4]
   b4e60:	f88d 3008 	strb.w	r3, [sp, #8]
   b4e64:	f7ff ffda 	bl	b4e1c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b4e68:	b005      	add	sp, #20
   b4e6a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e6e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b4e6e:	2301      	movs	r3, #1
   b4e70:	f7ff bfeb 	b.w	b4e4a <_ZN7TwoWire11requestFromEhjh>

000b4e74 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b4e74:	7c00      	ldrb	r0, [r0, #16]
   b4e76:	2200      	movs	r2, #0
   b4e78:	f7ff bd54 	b.w	b4924 <hal_i2c_begin_transmission>

000b4e7c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b4e7c:	7c00      	ldrb	r0, [r0, #16]
   b4e7e:	2200      	movs	r2, #0
   b4e80:	f7ff bd58 	b.w	b4934 <hal_i2c_end_transmission>

000b4e84 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b4e84:	2101      	movs	r1, #1
   b4e86:	f7ff bff9 	b.w	b4e7c <_ZN7TwoWire15endTransmissionEh>

000b4e8a <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e8a:	4770      	bx	lr

000b4e8c <_ZN9IPAddressD0Ev>:
   b4e8c:	b510      	push	{r4, lr}
   b4e8e:	2118      	movs	r1, #24
   b4e90:	4604      	mov	r4, r0
   b4e92:	f7ff f902 	bl	b409a <_ZdlPvj>
   b4e96:	4620      	mov	r0, r4
   b4e98:	bd10      	pop	{r4, pc}

000b4e9a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e9c:	7d03      	ldrb	r3, [r0, #20]
   b4e9e:	2b06      	cmp	r3, #6
{
   b4ea0:	b08d      	sub	sp, #52	; 0x34
   b4ea2:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ea4:	f100 0704 	add.w	r7, r0, #4
   b4ea8:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4eac:	d012      	beq.n	b4ed4 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4eae:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4eb2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4eb6:	220a      	movs	r2, #10
   b4eb8:	4630      	mov	r0, r6
   b4eba:	f000 f95a 	bl	b5172 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4ebe:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4ec0:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4ec2:	d019      	beq.n	b4ef8 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4ec4:	2c00      	cmp	r4, #0
   b4ec6:	d0f4      	beq.n	b4eb2 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4ec8:	212e      	movs	r1, #46	; 0x2e
   b4eca:	4630      	mov	r0, r6
   b4ecc:	f000 f938 	bl	b5140 <_ZN5Print5printEc>
   b4ed0:	4404      	add	r4, r0
   b4ed2:	e7ee      	b.n	b4eb2 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ed4:	232f      	movs	r3, #47	; 0x2f
   b4ed6:	466a      	mov	r2, sp
   b4ed8:	4639      	mov	r1, r7
   b4eda:	200a      	movs	r0, #10
		buf[0] = 0;
   b4edc:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ee0:	f7ff fd70 	bl	b49c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4ee4:	4668      	mov	r0, sp
   b4ee6:	f001 f905 	bl	b60f4 <strlen>
   b4eea:	6833      	ldr	r3, [r6, #0]
   b4eec:	4602      	mov	r2, r0
   b4eee:	68db      	ldr	r3, [r3, #12]
   b4ef0:	4669      	mov	r1, sp
   b4ef2:	4630      	mov	r0, r6
   b4ef4:	4798      	blx	r3
   b4ef6:	4604      	mov	r4, r0
    }
    return n;
}
   b4ef8:	4620      	mov	r0, r4
   b4efa:	b00d      	add	sp, #52	; 0x34
   b4efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b4f00 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4f00:	b510      	push	{r4, lr}
   b4f02:	4b05      	ldr	r3, [pc, #20]	; (b4f18 <_ZN9IPAddressC1Ev+0x18>)
   b4f04:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4f06:	2211      	movs	r2, #17
   b4f08:	f840 3b04 	str.w	r3, [r0], #4
   b4f0c:	2100      	movs	r1, #0
   b4f0e:	f001 f8b1 	bl	b6074 <memset>
}
   b4f12:	4620      	mov	r0, r4
   b4f14:	bd10      	pop	{r4, pc}
   b4f16:	bf00      	nop
   b4f18:	000b6464 	.word	0x000b6464

000b4f1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4f1c:	4603      	mov	r3, r0
   b4f1e:	4a07      	ldr	r2, [pc, #28]	; (b4f3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4f20:	b510      	push	{r4, lr}
   b4f22:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4f26:	f101 0210 	add.w	r2, r1, #16
   b4f2a:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f2e:	f843 4b04 	str.w	r4, [r3], #4
   b4f32:	4291      	cmp	r1, r2
   b4f34:	d1f9      	bne.n	b4f2a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4f36:	780a      	ldrb	r2, [r1, #0]
   b4f38:	701a      	strb	r2, [r3, #0]
}
   b4f3a:	bd10      	pop	{r4, pc}
   b4f3c:	000b6464 	.word	0x000b6464

000b4f40 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f40:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f42:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f46:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f4a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f4e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f52:	2304      	movs	r3, #4
   b4f54:	6041      	str	r1, [r0, #4]
   b4f56:	7503      	strb	r3, [r0, #20]
}
   b4f58:	bd10      	pop	{r4, pc}
	...

000b4f5c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f5c:	b507      	push	{r0, r1, r2, lr}
   b4f5e:	4b06      	ldr	r3, [pc, #24]	; (b4f78 <_ZN9IPAddressC1EPKh+0x1c>)
   b4f60:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f62:	78cb      	ldrb	r3, [r1, #3]
   b4f64:	9300      	str	r3, [sp, #0]
   b4f66:	788b      	ldrb	r3, [r1, #2]
   b4f68:	784a      	ldrb	r2, [r1, #1]
   b4f6a:	7809      	ldrb	r1, [r1, #0]
   b4f6c:	f7ff ffe8 	bl	b4f40 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f70:	b003      	add	sp, #12
   b4f72:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f76:	bf00      	nop
   b4f78:	000b6464 	.word	0x000b6464

000b4f7c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4f7c:	4b01      	ldr	r3, [pc, #4]	; (b4f84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4f7e:	4a02      	ldr	r2, [pc, #8]	; (b4f88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4f80:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4f82:	4770      	bx	lr
   b4f84:	2003e6c4 	.word	0x2003e6c4
   b4f88:	000b6470 	.word	0x000b6470

000b4f8c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4f8c:	2300      	movs	r3, #0
   b4f8e:	6840      	ldr	r0, [r0, #4]
   b4f90:	461a      	mov	r2, r3
   b4f92:	f7ff be05 	b.w	b4ba0 <network_connect>

000b4f96 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4f96:	6840      	ldr	r0, [r0, #4]
   b4f98:	2200      	movs	r2, #0
   b4f9a:	2102      	movs	r1, #2
   b4f9c:	f7ff be10 	b.w	b4bc0 <network_disconnect>

000b4fa0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4fa0:	2200      	movs	r2, #0
   b4fa2:	6840      	ldr	r0, [r0, #4]
   b4fa4:	4611      	mov	r1, r2
   b4fa6:	f7ff be03 	b.w	b4bb0 <network_connecting>

000b4faa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4faa:	2200      	movs	r2, #0
   b4fac:	6840      	ldr	r0, [r0, #4]
   b4fae:	4611      	mov	r1, r2
   b4fb0:	f7ff be0e 	b.w	b4bd0 <network_ready>

000b4fb4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4fb4:	2300      	movs	r3, #0
   b4fb6:	6840      	ldr	r0, [r0, #4]
   b4fb8:	461a      	mov	r2, r3
   b4fba:	4619      	mov	r1, r3
   b4fbc:	f7ff be10 	b.w	b4be0 <network_on>

000b4fc0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4fc0:	2300      	movs	r3, #0
   b4fc2:	6840      	ldr	r0, [r0, #4]
   b4fc4:	461a      	mov	r2, r3
   b4fc6:	4619      	mov	r1, r3
   b4fc8:	f7ff be12 	b.w	b4bf0 <network_off>

000b4fcc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4fcc:	6840      	ldr	r0, [r0, #4]
   b4fce:	2100      	movs	r1, #0
   b4fd0:	f7ff be36 	b.w	b4c40 <network_is_on>

000b4fd4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4fd4:	6840      	ldr	r0, [r0, #4]
   b4fd6:	2100      	movs	r1, #0
   b4fd8:	f7ff be3a 	b.w	b4c50 <network_is_off>

000b4fdc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4fdc:	6840      	ldr	r0, [r0, #4]
   b4fde:	2200      	movs	r2, #0
   b4fe0:	f081 0101 	eor.w	r1, r1, #1
   b4fe4:	f7ff be0c 	b.w	b4c00 <network_listen>

000b4fe8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4fe8:	6840      	ldr	r0, [r0, #4]
   b4fea:	2200      	movs	r2, #0
   b4fec:	f7ff be18 	b.w	b4c20 <network_set_listen_timeout>

000b4ff0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4ff0:	2200      	movs	r2, #0
   b4ff2:	6840      	ldr	r0, [r0, #4]
   b4ff4:	4611      	mov	r1, r2
   b4ff6:	f7ff be1b 	b.w	b4c30 <network_get_listen_timeout>

000b4ffa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4ffa:	2200      	movs	r2, #0
   b4ffc:	6840      	ldr	r0, [r0, #4]
   b4ffe:	4611      	mov	r1, r2
   b5000:	f7ff be06 	b.w	b4c10 <network_listening>

000b5004 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5008:	b095      	sub	sp, #84	; 0x54
   b500a:	4614      	mov	r4, r2
   b500c:	460d      	mov	r5, r1
   b500e:	4607      	mov	r7, r0
    IPAddress addr;
   b5010:	f7ff ff76 	bl	b4f00 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5014:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5016:	221c      	movs	r2, #28
   b5018:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b501a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b501c:	f001 f82a 	bl	b6074 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5020:	2340      	movs	r3, #64	; 0x40
   b5022:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5024:	4620      	mov	r0, r4
   b5026:	466b      	mov	r3, sp
   b5028:	aa0c      	add	r2, sp, #48	; 0x30
   b502a:	2100      	movs	r1, #0
   b502c:	f7ff fcda 	bl	b49e4 <netdb_getaddrinfo>
    if (!r) {
   b5030:	4604      	mov	r4, r0
   b5032:	2800      	cmp	r0, #0
   b5034:	d14b      	bne.n	b50ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5036:	4602      	mov	r2, r0
   b5038:	2101      	movs	r1, #1
   b503a:	6868      	ldr	r0, [r5, #4]
   b503c:	f7ff fdc8 	bl	b4bd0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5040:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5042:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5044:	4622      	mov	r2, r4
   b5046:	6868      	ldr	r0, [r5, #4]
   b5048:	f7ff fdc2 	bl	b4bd0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b504c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b504e:	4681      	mov	r9, r0
        bool ok = false;
   b5050:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5052:	2e00      	cmp	r6, #0
   b5054:	d03b      	beq.n	b50ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5056:	2900      	cmp	r1, #0
   b5058:	d139      	bne.n	b50ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b505a:	6873      	ldr	r3, [r6, #4]
   b505c:	2b02      	cmp	r3, #2
   b505e:	d003      	beq.n	b5068 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5060:	2b0a      	cmp	r3, #10
   b5062:	d011      	beq.n	b5088 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5064:	69f6      	ldr	r6, [r6, #28]
   b5066:	e7f4      	b.n	b5052 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5068:	f1b8 0f00 	cmp.w	r8, #0
   b506c:	d0fa      	beq.n	b5064 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b506e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5070:	a806      	add	r0, sp, #24
   b5072:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5074:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5076:	f7ff ff71 	bl	b4f5c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b507a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b507c:	1d3c      	adds	r4, r7, #4
   b507e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5080:	682b      	ldr	r3, [r5, #0]
   b5082:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5084:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5086:	e7ed      	b.n	b5064 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5088:	f1b9 0f00 	cmp.w	r9, #0
   b508c:	d0ea      	beq.n	b5064 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b508e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5090:	2210      	movs	r2, #16
   b5092:	a801      	add	r0, sp, #4
   b5094:	f000 ffee 	bl	b6074 <memset>
                    a.v = 6;
   b5098:	2306      	movs	r3, #6
   b509a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b509e:	ad01      	add	r5, sp, #4
   b50a0:	f104 0308 	add.w	r3, r4, #8
   b50a4:	3418      	adds	r4, #24
   b50a6:	6818      	ldr	r0, [r3, #0]
   b50a8:	6859      	ldr	r1, [r3, #4]
   b50aa:	462a      	mov	r2, r5
   b50ac:	c203      	stmia	r2!, {r0, r1}
   b50ae:	3308      	adds	r3, #8
   b50b0:	42a3      	cmp	r3, r4
   b50b2:	4615      	mov	r5, r2
   b50b4:	d1f7      	bne.n	b50a6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b50b6:	a901      	add	r1, sp, #4
   b50b8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b50ba:	ad07      	add	r5, sp, #28
   b50bc:	f7ff ff2e 	bl	b4f1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b50c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50c2:	1d3c      	adds	r4, r7, #4
   b50c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50c6:	682b      	ldr	r3, [r5, #0]
   b50c8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b50ca:	4649      	mov	r1, r9
   b50cc:	e7ca      	b.n	b5064 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b50ce:	9800      	ldr	r0, [sp, #0]
   b50d0:	f7ff fc80 	bl	b49d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b50d4:	4638      	mov	r0, r7
   b50d6:	b015      	add	sp, #84	; 0x54
   b50d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b50dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b50dc:	4b02      	ldr	r3, [pc, #8]	; (b50e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b50de:	4a03      	ldr	r2, [pc, #12]	; (b50ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b50e0:	601a      	str	r2, [r3, #0]
   b50e2:	2200      	movs	r2, #0
   b50e4:	605a      	str	r2, [r3, #4]

} // spark
   b50e6:	4770      	bx	lr
   b50e8:	2003e6c8 	.word	0x2003e6c8
   b50ec:	000b647c 	.word	0x000b647c

000b50f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b50f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b50f2:	4606      	mov	r6, r0
   b50f4:	460d      	mov	r5, r1
  size_t n = 0;
   b50f6:	188f      	adds	r7, r1, r2
   b50f8:	2400      	movs	r4, #0
  while (size--) {
   b50fa:	42bd      	cmp	r5, r7
   b50fc:	d00c      	beq.n	b5118 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b50fe:	6833      	ldr	r3, [r6, #0]
   b5100:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5104:	689b      	ldr	r3, [r3, #8]
   b5106:	4630      	mov	r0, r6
   b5108:	4798      	blx	r3
     if (chunk>=0)
   b510a:	1e03      	subs	r3, r0, #0
   b510c:	db01      	blt.n	b5112 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b510e:	441c      	add	r4, r3
  while (size--) {
   b5110:	e7f3      	b.n	b50fa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5112:	2c00      	cmp	r4, #0
   b5114:	bf08      	it	eq
   b5116:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5118:	4620      	mov	r0, r4
   b511a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b511c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b511c:	b513      	push	{r0, r1, r4, lr}
   b511e:	4604      	mov	r4, r0
    }
   b5120:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5122:	b159      	cbz	r1, b513c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5124:	9101      	str	r1, [sp, #4]
   b5126:	f000 ffe5 	bl	b60f4 <strlen>
   b512a:	6823      	ldr	r3, [r4, #0]
   b512c:	9901      	ldr	r1, [sp, #4]
   b512e:	68db      	ldr	r3, [r3, #12]
   b5130:	4602      	mov	r2, r0
   b5132:	4620      	mov	r0, r4
    }
   b5134:	b002      	add	sp, #8
   b5136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b513a:	4718      	bx	r3
    }
   b513c:	b002      	add	sp, #8
   b513e:	bd10      	pop	{r4, pc}

000b5140 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5140:	6803      	ldr	r3, [r0, #0]
   b5142:	689b      	ldr	r3, [r3, #8]
   b5144:	4718      	bx	r3

000b5146 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5146:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5148:	210d      	movs	r1, #13
{
   b514a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b514c:	f7ff fff8 	bl	b5140 <_ZN5Print5printEc>
  n += print('\n');
   b5150:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5152:	4604      	mov	r4, r0
  n += print('\n');
   b5154:	4628      	mov	r0, r5
   b5156:	f7ff fff3 	bl	b5140 <_ZN5Print5printEc>
  return n;
}
   b515a:	4420      	add	r0, r4
   b515c:	bd38      	pop	{r3, r4, r5, pc}

000b515e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b515e:	b538      	push	{r3, r4, r5, lr}
   b5160:	4605      	mov	r5, r0
  return write(str);
   b5162:	f7ff ffdb 	bl	b511c <_ZN5Print5writeEPKc>
   b5166:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5168:	4628      	mov	r0, r5
   b516a:	f7ff ffec 	bl	b5146 <_ZN5Print7printlnEv>
  return n;
}
   b516e:	4420      	add	r0, r4
   b5170:	bd38      	pop	{r3, r4, r5, pc}

000b5172 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5172:	b530      	push	{r4, r5, lr}
   b5174:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5176:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5178:	2a01      	cmp	r2, #1
  *str = '\0';
   b517a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b517e:	bf98      	it	ls
   b5180:	220a      	movls	r2, #10
   b5182:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5184:	460d      	mov	r5, r1
   b5186:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b518a:	fb01 5312 	mls	r3, r1, r2, r5
   b518e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5192:	2b09      	cmp	r3, #9
   b5194:	bf94      	ite	ls
   b5196:	3330      	addls	r3, #48	; 0x30
   b5198:	3337      	addhi	r3, #55	; 0x37
   b519a:	b2db      	uxtb	r3, r3
  } while(n);
   b519c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b519e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b51a2:	d9ef      	bls.n	b5184 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b51a4:	4621      	mov	r1, r4
   b51a6:	f7ff ffb9 	bl	b511c <_ZN5Print5writeEPKc>
}
   b51aa:	b00b      	add	sp, #44	; 0x2c
   b51ac:	bd30      	pop	{r4, r5, pc}
	...

000b51b0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b51b0:	4b01      	ldr	r3, [pc, #4]	; (b51b8 <_GLOBAL__sub_I_RGB+0x8>)
   b51b2:	2200      	movs	r2, #0
   b51b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b51b6:	4770      	bx	lr
   b51b8:	2003e6d0 	.word	0x2003e6d0

000b51bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b51bc:	b510      	push	{r4, lr}
   b51be:	4604      	mov	r4, r0
   b51c0:	4608      	mov	r0, r1
{
    _spi = spi;
   b51c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b51c4:	f7ff fc16 	bl	b49f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b51c8:	2300      	movs	r3, #0
   b51ca:	6063      	str	r3, [r4, #4]
}
   b51cc:	4620      	mov	r0, r4
   b51ce:	bd10      	pop	{r4, pc}

000b51d0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b51d0:	b510      	push	{r4, lr}
   b51d2:	4604      	mov	r4, r0
{
	free(buffer);
   b51d4:	6800      	ldr	r0, [r0, #0]
   b51d6:	f7ff fd4b 	bl	b4c70 <free>
}
   b51da:	4620      	mov	r0, r4
   b51dc:	bd10      	pop	{r4, pc}

000b51de <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b51de:	b510      	push	{r4, lr}
   b51e0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b51e2:	6800      	ldr	r0, [r0, #0]
   b51e4:	b108      	cbz	r0, b51ea <_ZN6String10invalidateEv+0xc>
   b51e6:	f7ff fd43 	bl	b4c70 <free>
	buffer = NULL;
   b51ea:	2300      	movs	r3, #0
	capacity = len = 0;
   b51ec:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b51f0:	6023      	str	r3, [r4, #0]
}
   b51f2:	bd10      	pop	{r4, pc}

000b51f4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b51f4:	b538      	push	{r3, r4, r5, lr}
   b51f6:	4604      	mov	r4, r0
   b51f8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b51fa:	6800      	ldr	r0, [r0, #0]
   b51fc:	3101      	adds	r1, #1
   b51fe:	f7ff fd3f 	bl	b4c80 <realloc>
	if (newbuffer) {
   b5202:	b110      	cbz	r0, b520a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5204:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5208:	2001      	movs	r0, #1
	}
	return 0;
}
   b520a:	bd38      	pop	{r3, r4, r5, pc}

000b520c <_ZN6String7reserveEj>:
{
   b520c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b520e:	6803      	ldr	r3, [r0, #0]
{
   b5210:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5212:	b123      	cbz	r3, b521e <_ZN6String7reserveEj+0x12>
   b5214:	6843      	ldr	r3, [r0, #4]
   b5216:	428b      	cmp	r3, r1
   b5218:	d301      	bcc.n	b521e <_ZN6String7reserveEj+0x12>
   b521a:	2001      	movs	r0, #1
}
   b521c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b521e:	4620      	mov	r0, r4
   b5220:	f7ff ffe8 	bl	b51f4 <_ZN6String12changeBufferEj>
   b5224:	2800      	cmp	r0, #0
   b5226:	d0f9      	beq.n	b521c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5228:	68a3      	ldr	r3, [r4, #8]
   b522a:	2b00      	cmp	r3, #0
   b522c:	d1f5      	bne.n	b521a <_ZN6String7reserveEj+0xe>
   b522e:	6822      	ldr	r2, [r4, #0]
   b5230:	7013      	strb	r3, [r2, #0]
   b5232:	e7f2      	b.n	b521a <_ZN6String7reserveEj+0xe>

000b5234 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5234:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5236:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5238:	4611      	mov	r1, r2
   b523a:	9201      	str	r2, [sp, #4]
{
   b523c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b523e:	f7ff ffe5 	bl	b520c <_ZN6String7reserveEj>
   b5242:	9a01      	ldr	r2, [sp, #4]
   b5244:	b928      	cbnz	r0, b5252 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5246:	4620      	mov	r0, r4
   b5248:	f7ff ffc9 	bl	b51de <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b524c:	4620      	mov	r0, r4
   b524e:	b003      	add	sp, #12
   b5250:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5252:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5254:	4629      	mov	r1, r5
   b5256:	6820      	ldr	r0, [r4, #0]
   b5258:	f000 fefe 	bl	b6058 <memcpy>
	buffer[len] = 0;
   b525c:	6822      	ldr	r2, [r4, #0]
   b525e:	68a3      	ldr	r3, [r4, #8]
   b5260:	2100      	movs	r1, #0
   b5262:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5264:	e7f2      	b.n	b524c <_ZN6String4copyEPKcj+0x18>

000b5266 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5266:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5268:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b526a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b526e:	4604      	mov	r4, r0
	len = 0;
   b5270:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5272:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5274:	b141      	cbz	r1, b5288 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5276:	4608      	mov	r0, r1
   b5278:	9101      	str	r1, [sp, #4]
   b527a:	f000 ff3b 	bl	b60f4 <strlen>
   b527e:	9901      	ldr	r1, [sp, #4]
   b5280:	4602      	mov	r2, r0
   b5282:	4620      	mov	r0, r4
   b5284:	f7ff ffd6 	bl	b5234 <_ZN6String4copyEPKcj>
}
   b5288:	4620      	mov	r0, r4
   b528a:	b002      	add	sp, #8
   b528c:	bd10      	pop	{r4, pc}

000b528e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b528e:	4288      	cmp	r0, r1
{
   b5290:	b510      	push	{r4, lr}
   b5292:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5294:	d005      	beq.n	b52a2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5296:	680b      	ldr	r3, [r1, #0]
   b5298:	b12b      	cbz	r3, b52a6 <_ZN6StringaSERKS_+0x18>
   b529a:	688a      	ldr	r2, [r1, #8]
   b529c:	4619      	mov	r1, r3
   b529e:	f7ff ffc9 	bl	b5234 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b52a2:	4620      	mov	r0, r4
   b52a4:	bd10      	pop	{r4, pc}
	else invalidate();
   b52a6:	f7ff ff9a 	bl	b51de <_ZN6String10invalidateEv>
   b52aa:	e7fa      	b.n	b52a2 <_ZN6StringaSERKS_+0x14>

000b52ac <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b52ac:	b510      	push	{r4, lr}
	buffer = NULL;
   b52ae:	2300      	movs	r3, #0
String::String(const String &value)
   b52b0:	4604      	mov	r4, r0
	capacity = 0;
   b52b2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b52b6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b52b8:	7303      	strb	r3, [r0, #12]
	*this = value;
   b52ba:	f7ff ffe8 	bl	b528e <_ZN6StringaSERKS_>
}
   b52be:	4620      	mov	r0, r4
   b52c0:	bd10      	pop	{r4, pc}

000b52c2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b52c2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b52c4:	6882      	ldr	r2, [r0, #8]
   b52c6:	b93a      	cbnz	r2, b52d8 <_ZNK6String6equalsEPKc+0x16>
   b52c8:	b121      	cbz	r1, b52d4 <_ZNK6String6equalsEPKc+0x12>
   b52ca:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b52cc:	fab0 f080 	clz	r0, r0
   b52d0:	0940      	lsrs	r0, r0, #5
   b52d2:	e000      	b.n	b52d6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b52d4:	2001      	movs	r0, #1
}
   b52d6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b52d8:	6800      	ldr	r0, [r0, #0]
   b52da:	b909      	cbnz	r1, b52e0 <_ZNK6String6equalsEPKc+0x1e>
   b52dc:	7800      	ldrb	r0, [r0, #0]
   b52de:	e7f5      	b.n	b52cc <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b52e0:	f000 fefe 	bl	b60e0 <strcmp>
   b52e4:	e7f2      	b.n	b52cc <_ZNK6String6equalsEPKc+0xa>

000b52e6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   b52e6:	b507      	push	{r0, r1, r2, lr}
   b52e8:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b52ea:	2100      	movs	r1, #0
{
   b52ec:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   b52ee:	9100      	str	r1, [sp, #0]
   b52f0:	2001      	movs	r0, #1
   b52f2:	218c      	movs	r1, #140	; 0x8c
   b52f4:	f7ff fc2a 	bl	b4b4c <system_reset>
}
   b52f8:	b003      	add	sp, #12
   b52fa:	f85d fb04 	ldr.w	pc, [sp], #4

000b52fe <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   b52fe:	4601      	mov	r1, r0
    reset(0, flags);
   b5300:	2000      	movs	r0, #0
   b5302:	f7ff bff0 	b.w	b52e6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000b5306 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   b5306:	2000      	movs	r0, #0
   b5308:	f7ff bff9 	b.w	b52fe <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000b530c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b530c:	4b05      	ldr	r3, [pc, #20]	; (b5324 <_GLOBAL__sub_I_System+0x18>)
   b530e:	2202      	movs	r2, #2
   b5310:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5312:	4b05      	ldr	r3, [pc, #20]	; (b5328 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5314:	4a05      	ldr	r2, [pc, #20]	; (b532c <_GLOBAL__sub_I_System+0x20>)
   b5316:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5318:	2000      	movs	r0, #0
   b531a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b531e:	f7ff bbf1 	b.w	b4b04 <set_system_mode>
   b5322:	bf00      	nop
   b5324:	2003e6ec 	.word	0x2003e6ec
   b5328:	2003e6e0 	.word	0x2003e6e0
   b532c:	ffff0000 	.word	0xffff0000

000b5330 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5330:	4b02      	ldr	r3, [pc, #8]	; (b533c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5332:	681a      	ldr	r2, [r3, #0]
   b5334:	4b02      	ldr	r3, [pc, #8]	; (b5340 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5336:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5338:	4770      	bx	lr
   b533a:	bf00      	nop
   b533c:	2003e59c 	.word	0x2003e59c
   b5340:	2003e6f0 	.word	0x2003e6f0

000b5344 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5344:	4770      	bx	lr

000b5346 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5346:	7441      	strb	r1, [r0, #17]
}
   b5348:	4770      	bx	lr

000b534a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b534a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b534c:	7c00      	ldrb	r0, [r0, #16]
   b534e:	f7ff fb91 	bl	b4a74 <hal_usart_available_data_for_write>
}
   b5352:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5356:	bd08      	pop	{r3, pc}

000b5358 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5358:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b535a:	7c00      	ldrb	r0, [r0, #16]
   b535c:	f7ff fb62 	bl	b4a24 <hal_usart_available>
}
   b5360:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5364:	bd08      	pop	{r3, pc}

000b5366 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5366:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5368:	7c00      	ldrb	r0, [r0, #16]
   b536a:	f7ff fb6b 	bl	b4a44 <hal_usart_peek>
}
   b536e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5372:	bd08      	pop	{r3, pc}

000b5374 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5374:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5376:	7c00      	ldrb	r0, [r0, #16]
   b5378:	f7ff fb5c 	bl	b4a34 <hal_usart_read>
}
   b537c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5380:	bd08      	pop	{r3, pc}

000b5382 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5382:	7c00      	ldrb	r0, [r0, #16]
   b5384:	f7ff bb66 	b.w	b4a54 <hal_usart_flush>

000b5388 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5388:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b538a:	7c45      	ldrb	r5, [r0, #17]
{
   b538c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b538e:	b12d      	cbz	r5, b539c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5390:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5392:	b003      	add	sp, #12
   b5394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5398:	f7ff bb3c 	b.w	b4a14 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b539c:	7c00      	ldrb	r0, [r0, #16]
   b539e:	9101      	str	r1, [sp, #4]
   b53a0:	f7ff fb68 	bl	b4a74 <hal_usart_available_data_for_write>
   b53a4:	2800      	cmp	r0, #0
   b53a6:	9901      	ldr	r1, [sp, #4]
   b53a8:	dcf2      	bgt.n	b5390 <_ZN11USARTSerial5writeEh+0x8>
}
   b53aa:	4628      	mov	r0, r5
   b53ac:	b003      	add	sp, #12
   b53ae:	bd30      	pop	{r4, r5, pc}

000b53b0 <_ZN11USARTSerialD0Ev>:
   b53b0:	b510      	push	{r4, lr}
   b53b2:	2114      	movs	r1, #20
   b53b4:	4604      	mov	r4, r0
   b53b6:	f7fe fe70 	bl	b409a <_ZdlPvj>
   b53ba:	4620      	mov	r0, r4
   b53bc:	bd10      	pop	{r4, pc}
	...

000b53c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b53c0:	b510      	push	{r4, lr}
   b53c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53c6:	4604      	mov	r4, r0
   b53c8:	4608      	mov	r0, r1
   b53ca:	4611      	mov	r1, r2
   b53cc:	2200      	movs	r2, #0
   b53ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53d2:	4b04      	ldr	r3, [pc, #16]	; (b53e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b53d4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b53d6:	2301      	movs	r3, #1
  _serial = serial;
   b53d8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b53da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b53dc:	f7ff fb52 	bl	b4a84 <hal_usart_init_ex>
}
   b53e0:	4620      	mov	r0, r4
   b53e2:	bd10      	pop	{r4, pc}
   b53e4:	000b64d4 	.word	0x000b64d4

000b53e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b53e8:	7441      	strb	r1, [r0, #17]
}
   b53ea:	4770      	bx	lr

000b53ec <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53ec:	4770      	bx	lr

000b53ee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b53ee:	4770      	bx	lr

000b53f0 <_ZN9USBSerial4readEv>:
{
   b53f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b53f2:	2100      	movs	r1, #0
   b53f4:	7c00      	ldrb	r0, [r0, #16]
   b53f6:	f7ff fb6d 	bl	b4ad4 <HAL_USB_USART_Receive_Data>
}
   b53fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b53fe:	bd08      	pop	{r3, pc}

000b5400 <_ZN9USBSerial4peekEv>:
{
   b5400:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5402:	2101      	movs	r1, #1
   b5404:	7c00      	ldrb	r0, [r0, #16]
   b5406:	f7ff fb65 	bl	b4ad4 <HAL_USB_USART_Receive_Data>
}
   b540a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b540e:	bd08      	pop	{r3, pc}

000b5410 <_ZN9USBSerial17availableForWriteEv>:
{
   b5410:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5412:	7c00      	ldrb	r0, [r0, #16]
   b5414:	f7ff fb56 	bl	b4ac4 <HAL_USB_USART_Available_Data_For_Write>
}
   b5418:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b541c:	bd08      	pop	{r3, pc}

000b541e <_ZN9USBSerial9availableEv>:
{
   b541e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5420:	7c00      	ldrb	r0, [r0, #16]
   b5422:	f7ff fb47 	bl	b4ab4 <HAL_USB_USART_Available_Data>
}
   b5426:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b542a:	bd08      	pop	{r3, pc}

000b542c <_ZN9USBSerial5writeEh>:
{
   b542c:	b513      	push	{r0, r1, r4, lr}
   b542e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5430:	7c00      	ldrb	r0, [r0, #16]
{
   b5432:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5434:	f7ff fb46 	bl	b4ac4 <HAL_USB_USART_Available_Data_For_Write>
   b5438:	2800      	cmp	r0, #0
   b543a:	9901      	ldr	r1, [sp, #4]
   b543c:	dc01      	bgt.n	b5442 <_ZN9USBSerial5writeEh+0x16>
   b543e:	7c60      	ldrb	r0, [r4, #17]
   b5440:	b120      	cbz	r0, b544c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5442:	7c20      	ldrb	r0, [r4, #16]
   b5444:	f7ff fb4e 	bl	b4ae4 <HAL_USB_USART_Send_Data>
   b5448:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b544c:	b002      	add	sp, #8
   b544e:	bd10      	pop	{r4, pc}

000b5450 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5450:	7c00      	ldrb	r0, [r0, #16]
   b5452:	f7ff bb4f 	b.w	b4af4 <HAL_USB_USART_Flush_Data>

000b5456 <_ZN9USBSerialD0Ev>:
   b5456:	b510      	push	{r4, lr}
   b5458:	2114      	movs	r1, #20
   b545a:	4604      	mov	r4, r0
   b545c:	f7fe fe1d 	bl	b409a <_ZdlPvj>
   b5460:	4620      	mov	r0, r4
   b5462:	bd10      	pop	{r4, pc}

000b5464 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5464:	b510      	push	{r4, lr}
   b5466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b546a:	4604      	mov	r4, r0
   b546c:	4608      	mov	r0, r1
   b546e:	2100      	movs	r1, #0
   b5470:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5474:	4b04      	ldr	r3, [pc, #16]	; (b5488 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5476:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5478:	2301      	movs	r3, #1
  _serial = serial;
   b547a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b547c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b547e:	4611      	mov	r1, r2
   b5480:	f7ff fb08 	bl	b4a94 <HAL_USB_USART_Init>
}
   b5484:	4620      	mov	r0, r4
   b5486:	bd10      	pop	{r4, pc}
   b5488:	000b6504 	.word	0x000b6504

000b548c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b548c:	7c00      	ldrb	r0, [r0, #16]
   b548e:	2200      	movs	r2, #0
   b5490:	f7ff bb08 	b.w	b4aa4 <HAL_USB_USART_Begin>

000b5494 <_Z19acquireSerialBufferv>:
{
   b5494:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5496:	2214      	movs	r2, #20
{
   b5498:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b549a:	2100      	movs	r1, #0
   b549c:	f000 fdea 	bl	b6074 <memset>
}
   b54a0:	4620      	mov	r0, r4
   b54a2:	bd10      	pop	{r4, pc}

000b54a4 <_Z16_fetch_usbserialv>:
{
   b54a4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54a6:	4c0f      	ldr	r4, [pc, #60]	; (b54e4 <_Z16_fetch_usbserialv+0x40>)
{
   b54a8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b54aa:	a803      	add	r0, sp, #12
   b54ac:	f7ff fff2 	bl	b5494 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54b0:	7821      	ldrb	r1, [r4, #0]
   b54b2:	f3bf 8f5b 	dmb	ish
   b54b6:	f011 0101 	ands.w	r1, r1, #1
   b54ba:	d10f      	bne.n	b54dc <_Z16_fetch_usbserialv+0x38>
   b54bc:	4620      	mov	r0, r4
   b54be:	9101      	str	r1, [sp, #4]
   b54c0:	f7fe fded 	bl	b409e <__cxa_guard_acquire>
   b54c4:	9901      	ldr	r1, [sp, #4]
   b54c6:	b148      	cbz	r0, b54dc <_Z16_fetch_usbserialv+0x38>
   b54c8:	aa03      	add	r2, sp, #12
   b54ca:	4807      	ldr	r0, [pc, #28]	; (b54e8 <_Z16_fetch_usbserialv+0x44>)
   b54cc:	f7ff ffca 	bl	b5464 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b54d0:	4620      	mov	r0, r4
   b54d2:	f7fe fde9 	bl	b40a8 <__cxa_guard_release>
   b54d6:	4805      	ldr	r0, [pc, #20]	; (b54ec <_Z16_fetch_usbserialv+0x48>)
   b54d8:	f000 fdb8 	bl	b604c <atexit>
	return _usbserial;
}
   b54dc:	4802      	ldr	r0, [pc, #8]	; (b54e8 <_Z16_fetch_usbserialv+0x44>)
   b54de:	b008      	add	sp, #32
   b54e0:	bd10      	pop	{r4, pc}
   b54e2:	bf00      	nop
   b54e4:	2003e6f4 	.word	0x2003e6f4
   b54e8:	2003e6f8 	.word	0x2003e6f8
   b54ec:	000b53ed 	.word	0x000b53ed

000b54f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b54f0:	2200      	movs	r2, #0
   b54f2:	6840      	ldr	r0, [r0, #4]
   b54f4:	4611      	mov	r1, r2
   b54f6:	f7ff bb6b 	b.w	b4bd0 <network_ready>

000b54fa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b54fa:	2200      	movs	r2, #0
   b54fc:	6840      	ldr	r0, [r0, #4]
   b54fe:	4611      	mov	r1, r2
   b5500:	f7ff bb86 	b.w	b4c10 <network_listening>

000b5504 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5504:	2200      	movs	r2, #0
   b5506:	6840      	ldr	r0, [r0, #4]
   b5508:	4611      	mov	r1, r2
   b550a:	f7ff bb91 	b.w	b4c30 <network_get_listen_timeout>

000b550e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b550e:	6840      	ldr	r0, [r0, #4]
   b5510:	2200      	movs	r2, #0
   b5512:	f7ff bb85 	b.w	b4c20 <network_set_listen_timeout>

000b5516 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5516:	6840      	ldr	r0, [r0, #4]
   b5518:	2200      	movs	r2, #0
   b551a:	f081 0101 	eor.w	r1, r1, #1
   b551e:	f7ff bb6f 	b.w	b4c00 <network_listen>

000b5522 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5522:	2300      	movs	r3, #0
   b5524:	6840      	ldr	r0, [r0, #4]
   b5526:	461a      	mov	r2, r3
   b5528:	4619      	mov	r1, r3
   b552a:	f7ff bb61 	b.w	b4bf0 <network_off>

000b552e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b552e:	2300      	movs	r3, #0
   b5530:	6840      	ldr	r0, [r0, #4]
   b5532:	461a      	mov	r2, r3
   b5534:	4619      	mov	r1, r3
   b5536:	f7ff bb53 	b.w	b4be0 <network_on>

000b553a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b553a:	2200      	movs	r2, #0
   b553c:	6840      	ldr	r0, [r0, #4]
   b553e:	4611      	mov	r1, r2
   b5540:	f7ff bb36 	b.w	b4bb0 <network_connecting>

000b5544 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5544:	6840      	ldr	r0, [r0, #4]
   b5546:	2200      	movs	r2, #0
   b5548:	2102      	movs	r1, #2
   b554a:	f7ff bb39 	b.w	b4bc0 <network_disconnect>

000b554e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b554e:	2300      	movs	r3, #0
   b5550:	6840      	ldr	r0, [r0, #4]
   b5552:	461a      	mov	r2, r3
   b5554:	f7ff bb24 	b.w	b4ba0 <network_connect>

000b5558 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5558:	4b02      	ldr	r3, [pc, #8]	; (b5564 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b555a:	2204      	movs	r2, #4
   b555c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b555e:	4a02      	ldr	r2, [pc, #8]	; (b5568 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5560:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5562:	4770      	bx	lr
   b5564:	2003e70c 	.word	0x2003e70c
   b5568:	000b6534 	.word	0x000b6534

000b556c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b556c:	4b01      	ldr	r3, [pc, #4]	; (b5574 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b556e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5570:	4770      	bx	lr
   b5572:	bf00      	nop
   b5574:	2003e5a0 	.word	0x2003e5a0

000b5578 <serialEventRun>:
{
   b5578:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b557a:	4b0b      	ldr	r3, [pc, #44]	; (b55a8 <serialEventRun+0x30>)
   b557c:	b143      	cbz	r3, b5590 <serialEventRun+0x18>
   b557e:	f7ff ff91 	bl	b54a4 <_Z16_fetch_usbserialv>
   b5582:	6803      	ldr	r3, [r0, #0]
   b5584:	691b      	ldr	r3, [r3, #16]
   b5586:	4798      	blx	r3
   b5588:	2800      	cmp	r0, #0
   b558a:	dd01      	ble.n	b5590 <serialEventRun+0x18>
        serialEvent();
   b558c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5590:	4b06      	ldr	r3, [pc, #24]	; (b55ac <serialEventRun+0x34>)
   b5592:	b143      	cbz	r3, b55a6 <serialEventRun+0x2e>
   b5594:	f000 f946 	bl	b5824 <_Z22__fetch_global_Serial1v>
   b5598:	6803      	ldr	r3, [r0, #0]
   b559a:	691b      	ldr	r3, [r3, #16]
   b559c:	4798      	blx	r3
   b559e:	2800      	cmp	r0, #0
   b55a0:	dd01      	ble.n	b55a6 <serialEventRun+0x2e>
        serialEvent1();
   b55a2:	f3af 8000 	nop.w
}
   b55a6:	bd08      	pop	{r3, pc}
	...

000b55b0 <_post_loop>:
{
   b55b0:	b508      	push	{r3, lr}
	serialEventRun();
   b55b2:	f7ff ffe1 	bl	b5578 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b55b6:	f7ff f98d 	bl	b48d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b55ba:	4b01      	ldr	r3, [pc, #4]	; (b55c0 <_post_loop+0x10>)
   b55bc:	6018      	str	r0, [r3, #0]
}
   b55be:	bd08      	pop	{r3, pc}
   b55c0:	2003e728 	.word	0x2003e728

000b55c4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55c4:	4805      	ldr	r0, [pc, #20]	; (b55dc <_Z33system_initialize_user_backup_ramv+0x18>)
   b55c6:	4a06      	ldr	r2, [pc, #24]	; (b55e0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b55c8:	4906      	ldr	r1, [pc, #24]	; (b55e4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b55ca:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55cc:	1a12      	subs	r2, r2, r0
   b55ce:	f000 fd43 	bl	b6058 <memcpy>
    __backup_sram_signature = signature;
   b55d2:	4b05      	ldr	r3, [pc, #20]	; (b55e8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b55d4:	4a05      	ldr	r2, [pc, #20]	; (b55ec <_Z33system_initialize_user_backup_ramv+0x28>)
   b55d6:	601a      	str	r2, [r3, #0]
}
   b55d8:	bd08      	pop	{r3, pc}
   b55da:	bf00      	nop
   b55dc:	2003f400 	.word	0x2003f400
   b55e0:	2003f404 	.word	0x2003f404
   b55e4:	000b6624 	.word	0x000b6624
   b55e8:	2003f400 	.word	0x2003f400
   b55ec:	9a271c1e 	.word	0x9a271c1e

000b55f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b55f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b55f2:	2300      	movs	r3, #0
   b55f4:	9300      	str	r3, [sp, #0]
   b55f6:	461a      	mov	r2, r3
   b55f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b55fc:	f7ff fa9c 	bl	b4b38 <system_ctrl_set_result>
}
   b5600:	b003      	add	sp, #12
   b5602:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5608 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5608:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b560a:	8843      	ldrh	r3, [r0, #2]
   b560c:	2b0a      	cmp	r3, #10
   b560e:	d008      	beq.n	b5622 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5610:	2b50      	cmp	r3, #80	; 0x50
   b5612:	d10b      	bne.n	b562c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5614:	4b09      	ldr	r3, [pc, #36]	; (b563c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5616:	681b      	ldr	r3, [r3, #0]
   b5618:	b14b      	cbz	r3, b562e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b561a:	b003      	add	sp, #12
   b561c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5620:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5622:	f7ff ffe5 	bl	b55f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5626:	b003      	add	sp, #12
   b5628:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b562c:	2300      	movs	r3, #0
   b562e:	9300      	str	r3, [sp, #0]
   b5630:	461a      	mov	r2, r3
   b5632:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5636:	f7ff fa7f 	bl	b4b38 <system_ctrl_set_result>
}
   b563a:	e7f4      	b.n	b5626 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b563c:	2003e718 	.word	0x2003e718

000b5640 <module_user_init_hook>:
{
   b5640:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5642:	4812      	ldr	r0, [pc, #72]	; (b568c <module_user_init_hook+0x4c>)
   b5644:	2100      	movs	r1, #0
   b5646:	f7ff fb2b 	bl	b4ca0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b564a:	4b11      	ldr	r3, [pc, #68]	; (b5690 <module_user_init_hook+0x50>)
   b564c:	681a      	ldr	r2, [r3, #0]
   b564e:	4b11      	ldr	r3, [pc, #68]	; (b5694 <module_user_init_hook+0x54>)
   b5650:	429a      	cmp	r2, r3
   b5652:	4b11      	ldr	r3, [pc, #68]	; (b5698 <module_user_init_hook+0x58>)
   b5654:	bf0c      	ite	eq
   b5656:	2201      	moveq	r2, #1
   b5658:	2200      	movne	r2, #0
   b565a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b565c:	d001      	beq.n	b5662 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b565e:	f7ff ffb1 	bl	b55c4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5662:	f7ff f92f 	bl	b48c4 <HAL_RNG_GetRandomNumber>
   b5666:	4604      	mov	r4, r0
    srand(seed);
   b5668:	f000 fd0c 	bl	b6084 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b566c:	4b0b      	ldr	r3, [pc, #44]	; (b569c <module_user_init_hook+0x5c>)
   b566e:	b113      	cbz	r3, b5676 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5670:	4620      	mov	r0, r4
   b5672:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5676:	2100      	movs	r1, #0
   b5678:	4808      	ldr	r0, [pc, #32]	; (b569c <module_user_init_hook+0x5c>)
   b567a:	f7ff fa89 	bl	b4b90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b567e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5682:	4807      	ldr	r0, [pc, #28]	; (b56a0 <module_user_init_hook+0x60>)
   b5684:	2100      	movs	r1, #0
   b5686:	f7ff ba4d 	b.w	b4b24 <system_ctrl_set_app_request_handler>
   b568a:	bf00      	nop
   b568c:	000b556d 	.word	0x000b556d
   b5690:	2003f400 	.word	0x2003f400
   b5694:	9a271c1e 	.word	0x9a271c1e
   b5698:	2003e714 	.word	0x2003e714
   b569c:	00000000 	.word	0x00000000
   b56a0:	000b5609 	.word	0x000b5609

000b56a4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b56a4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b56a6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b56a8:	d902      	bls.n	b56b0 <pinAvailable+0xc>
    return false;
   b56aa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b56ac:	b002      	add	sp, #8
   b56ae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b56b0:	f1a0 030b 	sub.w	r3, r0, #11
   b56b4:	2b02      	cmp	r3, #2
   b56b6:	d81a      	bhi.n	b56ee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b56b8:	4c17      	ldr	r4, [pc, #92]	; (b5718 <pinAvailable+0x74>)
   b56ba:	7821      	ldrb	r1, [r4, #0]
   b56bc:	f3bf 8f5b 	dmb	ish
   b56c0:	f011 0101 	ands.w	r1, r1, #1
   b56c4:	d10b      	bne.n	b56de <pinAvailable+0x3a>
   b56c6:	4620      	mov	r0, r4
   b56c8:	9101      	str	r1, [sp, #4]
   b56ca:	f7fe fce8 	bl	b409e <__cxa_guard_acquire>
   b56ce:	9901      	ldr	r1, [sp, #4]
   b56d0:	b128      	cbz	r0, b56de <pinAvailable+0x3a>
   b56d2:	4812      	ldr	r0, [pc, #72]	; (b571c <pinAvailable+0x78>)
   b56d4:	f7ff fd72 	bl	b51bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b56d8:	4620      	mov	r0, r4
   b56da:	f7fe fce5 	bl	b40a8 <__cxa_guard_release>
   b56de:	4b0f      	ldr	r3, [pc, #60]	; (b571c <pinAvailable+0x78>)
   b56e0:	7818      	ldrb	r0, [r3, #0]
   b56e2:	f7ff f98f 	bl	b4a04 <hal_spi_is_enabled>
   b56e6:	2800      	cmp	r0, #0
   b56e8:	d1df      	bne.n	b56aa <pinAvailable+0x6>
  return true; // 'pin' is available
   b56ea:	2001      	movs	r0, #1
   b56ec:	e7de      	b.n	b56ac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b56ee:	2801      	cmp	r0, #1
   b56f0:	d809      	bhi.n	b5706 <pinAvailable+0x62>
   b56f2:	f000 f857 	bl	b57a4 <_Z19__fetch_global_Wirev>
   b56f6:	2100      	movs	r1, #0
   b56f8:	7c00      	ldrb	r0, [r0, #16]
   b56fa:	f7ff f94b 	bl	b4994 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b56fe:	f080 0001 	eor.w	r0, r0, #1
   b5702:	b2c0      	uxtb	r0, r0
   b5704:	e7d2      	b.n	b56ac <pinAvailable+0x8>
   b5706:	3809      	subs	r0, #9
   b5708:	2801      	cmp	r0, #1
   b570a:	d8ee      	bhi.n	b56ea <pinAvailable+0x46>
   b570c:	f000 f88a 	bl	b5824 <_Z22__fetch_global_Serial1v>
   b5710:	7c00      	ldrb	r0, [r0, #16]
   b5712:	f7ff f9a7 	bl	b4a64 <hal_usart_is_enabled>
   b5716:	e7f2      	b.n	b56fe <pinAvailable+0x5a>
   b5718:	2003e71c 	.word	0x2003e71c
   b571c:	2003e720 	.word	0x2003e720

000b5720 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5720:	2823      	cmp	r0, #35	; 0x23
{
   b5722:	b538      	push	{r3, r4, r5, lr}
   b5724:	4604      	mov	r4, r0
   b5726:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5728:	d80a      	bhi.n	b5740 <pinMode+0x20>
   b572a:	29ff      	cmp	r1, #255	; 0xff
   b572c:	d008      	beq.n	b5740 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b572e:	f7ff ffb9 	bl	b56a4 <pinAvailable>
   b5732:	b128      	cbz	r0, b5740 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5734:	4629      	mov	r1, r5
   b5736:	4620      	mov	r0, r4
}
   b5738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b573c:	f7ff b8d2 	b.w	b48e4 <HAL_Pin_Mode>
}
   b5740:	bd38      	pop	{r3, r4, r5, pc}

000b5742 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5742:	b538      	push	{r3, r4, r5, lr}
   b5744:	4604      	mov	r4, r0
   b5746:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5748:	f7ff f8d4 	bl	b48f4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b574c:	28ff      	cmp	r0, #255	; 0xff
   b574e:	d010      	beq.n	b5772 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5750:	2806      	cmp	r0, #6
   b5752:	d804      	bhi.n	b575e <digitalWrite+0x1c>
   b5754:	234d      	movs	r3, #77	; 0x4d
   b5756:	fa23 f000 	lsr.w	r0, r3, r0
   b575a:	07c3      	lsls	r3, r0, #31
   b575c:	d409      	bmi.n	b5772 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b575e:	4620      	mov	r0, r4
   b5760:	f7ff ffa0 	bl	b56a4 <pinAvailable>
   b5764:	b128      	cbz	r0, b5772 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5766:	4629      	mov	r1, r5
   b5768:	4620      	mov	r0, r4
}
   b576a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b576e:	f7ff b8c9 	b.w	b4904 <HAL_GPIO_Write>
}
   b5772:	bd38      	pop	{r3, r4, r5, pc}

000b5774 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5774:	4770      	bx	lr
	...

000b5778 <_Z17acquireWireBufferv>:
{
   b5778:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b577a:	2520      	movs	r5, #32
   b577c:	2314      	movs	r3, #20
{
   b577e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5780:	6003      	str	r3, [r0, #0]
   b5782:	6085      	str	r5, [r0, #8]
   b5784:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5786:	4906      	ldr	r1, [pc, #24]	; (b57a0 <_Z17acquireWireBufferv+0x28>)
   b5788:	4628      	mov	r0, r5
   b578a:	f000 f86f 	bl	b586c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b578e:	4904      	ldr	r1, [pc, #16]	; (b57a0 <_Z17acquireWireBufferv+0x28>)
	};
   b5790:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5792:	4628      	mov	r0, r5
   b5794:	f000 f86a 	bl	b586c <_ZnajRKSt9nothrow_t>
	};
   b5798:	60e0      	str	r0, [r4, #12]
}
   b579a:	4620      	mov	r0, r4
   b579c:	bd38      	pop	{r3, r4, r5, pc}
   b579e:	bf00      	nop
   b57a0:	000b6568 	.word	0x000b6568

000b57a4 <_Z19__fetch_global_Wirev>:
{
   b57a4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57a6:	4d0e      	ldr	r5, [pc, #56]	; (b57e0 <_Z19__fetch_global_Wirev+0x3c>)
   b57a8:	7829      	ldrb	r1, [r5, #0]
   b57aa:	f3bf 8f5b 	dmb	ish
   b57ae:	f011 0401 	ands.w	r4, r1, #1
{
   b57b2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57b4:	d111      	bne.n	b57da <_Z19__fetch_global_Wirev+0x36>
   b57b6:	4628      	mov	r0, r5
   b57b8:	f7fe fc71 	bl	b409e <__cxa_guard_acquire>
   b57bc:	b168      	cbz	r0, b57da <_Z19__fetch_global_Wirev+0x36>
   b57be:	a801      	add	r0, sp, #4
   b57c0:	f7ff ffda 	bl	b5778 <_Z17acquireWireBufferv>
   b57c4:	aa01      	add	r2, sp, #4
   b57c6:	4621      	mov	r1, r4
   b57c8:	4806      	ldr	r0, [pc, #24]	; (b57e4 <_Z19__fetch_global_Wirev+0x40>)
   b57ca:	f7ff fb0f 	bl	b4dec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b57ce:	4628      	mov	r0, r5
   b57d0:	f7fe fc6a 	bl	b40a8 <__cxa_guard_release>
   b57d4:	4804      	ldr	r0, [pc, #16]	; (b57e8 <_Z19__fetch_global_Wirev+0x44>)
   b57d6:	f000 fc39 	bl	b604c <atexit>
	return wire;
}
   b57da:	4802      	ldr	r0, [pc, #8]	; (b57e4 <_Z19__fetch_global_Wirev+0x40>)
   b57dc:	b007      	add	sp, #28
   b57de:	bd30      	pop	{r4, r5, pc}
   b57e0:	2003e72c 	.word	0x2003e72c
   b57e4:	2003e730 	.word	0x2003e730
   b57e8:	000b5775 	.word	0x000b5775

000b57ec <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b57ec:	4770      	bx	lr
	...

000b57f0 <_Z20acquireSerial1Bufferv>:
{
   b57f0:	b538      	push	{r3, r4, r5, lr}
   b57f2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b57f4:	2514      	movs	r5, #20
   b57f6:	462a      	mov	r2, r5
   b57f8:	2100      	movs	r1, #0
   b57fa:	f000 fc3b 	bl	b6074 <memset>
   b57fe:	8025      	strh	r5, [r4, #0]
   b5800:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5802:	4907      	ldr	r1, [pc, #28]	; (b5820 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5804:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5806:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5808:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b580a:	f000 f82f 	bl	b586c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b580e:	4904      	ldr	r1, [pc, #16]	; (b5820 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5810:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5812:	4628      	mov	r0, r5
   b5814:	f000 f82a 	bl	b586c <_ZnajRKSt9nothrow_t>
    };
   b5818:	60e0      	str	r0, [r4, #12]
}
   b581a:	4620      	mov	r0, r4
   b581c:	bd38      	pop	{r3, r4, r5, pc}
   b581e:	bf00      	nop
   b5820:	000b6568 	.word	0x000b6568

000b5824 <_Z22__fetch_global_Serial1v>:
{
   b5824:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5826:	4d0e      	ldr	r5, [pc, #56]	; (b5860 <_Z22__fetch_global_Serial1v+0x3c>)
   b5828:	7829      	ldrb	r1, [r5, #0]
   b582a:	f3bf 8f5b 	dmb	ish
   b582e:	f011 0401 	ands.w	r4, r1, #1
{
   b5832:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5834:	d111      	bne.n	b585a <_Z22__fetch_global_Serial1v+0x36>
   b5836:	4628      	mov	r0, r5
   b5838:	f7fe fc31 	bl	b409e <__cxa_guard_acquire>
   b583c:	b168      	cbz	r0, b585a <_Z22__fetch_global_Serial1v+0x36>
   b583e:	a801      	add	r0, sp, #4
   b5840:	f7ff ffd6 	bl	b57f0 <_Z20acquireSerial1Bufferv>
   b5844:	aa01      	add	r2, sp, #4
   b5846:	4621      	mov	r1, r4
   b5848:	4806      	ldr	r0, [pc, #24]	; (b5864 <_Z22__fetch_global_Serial1v+0x40>)
   b584a:	f7ff fdb9 	bl	b53c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b584e:	4628      	mov	r0, r5
   b5850:	f7fe fc2a 	bl	b40a8 <__cxa_guard_release>
   b5854:	4804      	ldr	r0, [pc, #16]	; (b5868 <_Z22__fetch_global_Serial1v+0x44>)
   b5856:	f000 fbf9 	bl	b604c <atexit>
    return serial1;
}
   b585a:	4802      	ldr	r0, [pc, #8]	; (b5864 <_Z22__fetch_global_Serial1v+0x40>)
   b585c:	b007      	add	sp, #28
   b585e:	bd30      	pop	{r4, r5, pc}
   b5860:	2003e744 	.word	0x2003e744
   b5864:	2003e748 	.word	0x2003e748
   b5868:	000b57ed 	.word	0x000b57ed

000b586c <_ZnajRKSt9nothrow_t>:
   b586c:	f7fe bc13 	b.w	b4096 <_Znaj>

000b5870 <__aeabi_drsub>:
   b5870:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b5874:	e002      	b.n	b587c <__adddf3>
   b5876:	bf00      	nop

000b5878 <__aeabi_dsub>:
   b5878:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b587c <__adddf3>:
   b587c:	b530      	push	{r4, r5, lr}
   b587e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b5882:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b5886:	ea94 0f05 	teq	r4, r5
   b588a:	bf08      	it	eq
   b588c:	ea90 0f02 	teqeq	r0, r2
   b5890:	bf1f      	itttt	ne
   b5892:	ea54 0c00 	orrsne.w	ip, r4, r0
   b5896:	ea55 0c02 	orrsne.w	ip, r5, r2
   b589a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b589e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b58a2:	f000 80e2 	beq.w	b5a6a <__adddf3+0x1ee>
   b58a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b58aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b58ae:	bfb8      	it	lt
   b58b0:	426d      	neglt	r5, r5
   b58b2:	dd0c      	ble.n	b58ce <__adddf3+0x52>
   b58b4:	442c      	add	r4, r5
   b58b6:	ea80 0202 	eor.w	r2, r0, r2
   b58ba:	ea81 0303 	eor.w	r3, r1, r3
   b58be:	ea82 0000 	eor.w	r0, r2, r0
   b58c2:	ea83 0101 	eor.w	r1, r3, r1
   b58c6:	ea80 0202 	eor.w	r2, r0, r2
   b58ca:	ea81 0303 	eor.w	r3, r1, r3
   b58ce:	2d36      	cmp	r5, #54	; 0x36
   b58d0:	bf88      	it	hi
   b58d2:	bd30      	pophi	{r4, r5, pc}
   b58d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b58d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b58dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b58e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b58e4:	d002      	beq.n	b58ec <__adddf3+0x70>
   b58e6:	4240      	negs	r0, r0
   b58e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b58ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b58f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b58f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b58f8:	d002      	beq.n	b5900 <__adddf3+0x84>
   b58fa:	4252      	negs	r2, r2
   b58fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5900:	ea94 0f05 	teq	r4, r5
   b5904:	f000 80a7 	beq.w	b5a56 <__adddf3+0x1da>
   b5908:	f1a4 0401 	sub.w	r4, r4, #1
   b590c:	f1d5 0e20 	rsbs	lr, r5, #32
   b5910:	db0d      	blt.n	b592e <__adddf3+0xb2>
   b5912:	fa02 fc0e 	lsl.w	ip, r2, lr
   b5916:	fa22 f205 	lsr.w	r2, r2, r5
   b591a:	1880      	adds	r0, r0, r2
   b591c:	f141 0100 	adc.w	r1, r1, #0
   b5920:	fa03 f20e 	lsl.w	r2, r3, lr
   b5924:	1880      	adds	r0, r0, r2
   b5926:	fa43 f305 	asr.w	r3, r3, r5
   b592a:	4159      	adcs	r1, r3
   b592c:	e00e      	b.n	b594c <__adddf3+0xd0>
   b592e:	f1a5 0520 	sub.w	r5, r5, #32
   b5932:	f10e 0e20 	add.w	lr, lr, #32
   b5936:	2a01      	cmp	r2, #1
   b5938:	fa03 fc0e 	lsl.w	ip, r3, lr
   b593c:	bf28      	it	cs
   b593e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b5942:	fa43 f305 	asr.w	r3, r3, r5
   b5946:	18c0      	adds	r0, r0, r3
   b5948:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b594c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5950:	d507      	bpl.n	b5962 <__adddf3+0xe6>
   b5952:	f04f 0e00 	mov.w	lr, #0
   b5956:	f1dc 0c00 	rsbs	ip, ip, #0
   b595a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b595e:	eb6e 0101 	sbc.w	r1, lr, r1
   b5962:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b5966:	d31b      	bcc.n	b59a0 <__adddf3+0x124>
   b5968:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b596c:	d30c      	bcc.n	b5988 <__adddf3+0x10c>
   b596e:	0849      	lsrs	r1, r1, #1
   b5970:	ea5f 0030 	movs.w	r0, r0, rrx
   b5974:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5978:	f104 0401 	add.w	r4, r4, #1
   b597c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5980:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b5984:	f080 809a 	bcs.w	b5abc <__adddf3+0x240>
   b5988:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b598c:	bf08      	it	eq
   b598e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5992:	f150 0000 	adcs.w	r0, r0, #0
   b5996:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b599a:	ea41 0105 	orr.w	r1, r1, r5
   b599e:	bd30      	pop	{r4, r5, pc}
   b59a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b59a4:	4140      	adcs	r0, r0
   b59a6:	eb41 0101 	adc.w	r1, r1, r1
   b59aa:	3c01      	subs	r4, #1
   b59ac:	bf28      	it	cs
   b59ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b59b2:	d2e9      	bcs.n	b5988 <__adddf3+0x10c>
   b59b4:	f091 0f00 	teq	r1, #0
   b59b8:	bf04      	itt	eq
   b59ba:	4601      	moveq	r1, r0
   b59bc:	2000      	moveq	r0, #0
   b59be:	fab1 f381 	clz	r3, r1
   b59c2:	bf08      	it	eq
   b59c4:	3320      	addeq	r3, #32
   b59c6:	f1a3 030b 	sub.w	r3, r3, #11
   b59ca:	f1b3 0220 	subs.w	r2, r3, #32
   b59ce:	da0c      	bge.n	b59ea <__adddf3+0x16e>
   b59d0:	320c      	adds	r2, #12
   b59d2:	dd08      	ble.n	b59e6 <__adddf3+0x16a>
   b59d4:	f102 0c14 	add.w	ip, r2, #20
   b59d8:	f1c2 020c 	rsb	r2, r2, #12
   b59dc:	fa01 f00c 	lsl.w	r0, r1, ip
   b59e0:	fa21 f102 	lsr.w	r1, r1, r2
   b59e4:	e00c      	b.n	b5a00 <__adddf3+0x184>
   b59e6:	f102 0214 	add.w	r2, r2, #20
   b59ea:	bfd8      	it	le
   b59ec:	f1c2 0c20 	rsble	ip, r2, #32
   b59f0:	fa01 f102 	lsl.w	r1, r1, r2
   b59f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b59f8:	bfdc      	itt	le
   b59fa:	ea41 010c 	orrle.w	r1, r1, ip
   b59fe:	4090      	lslle	r0, r2
   b5a00:	1ae4      	subs	r4, r4, r3
   b5a02:	bfa2      	ittt	ge
   b5a04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5a08:	4329      	orrge	r1, r5
   b5a0a:	bd30      	popge	{r4, r5, pc}
   b5a0c:	ea6f 0404 	mvn.w	r4, r4
   b5a10:	3c1f      	subs	r4, #31
   b5a12:	da1c      	bge.n	b5a4e <__adddf3+0x1d2>
   b5a14:	340c      	adds	r4, #12
   b5a16:	dc0e      	bgt.n	b5a36 <__adddf3+0x1ba>
   b5a18:	f104 0414 	add.w	r4, r4, #20
   b5a1c:	f1c4 0220 	rsb	r2, r4, #32
   b5a20:	fa20 f004 	lsr.w	r0, r0, r4
   b5a24:	fa01 f302 	lsl.w	r3, r1, r2
   b5a28:	ea40 0003 	orr.w	r0, r0, r3
   b5a2c:	fa21 f304 	lsr.w	r3, r1, r4
   b5a30:	ea45 0103 	orr.w	r1, r5, r3
   b5a34:	bd30      	pop	{r4, r5, pc}
   b5a36:	f1c4 040c 	rsb	r4, r4, #12
   b5a3a:	f1c4 0220 	rsb	r2, r4, #32
   b5a3e:	fa20 f002 	lsr.w	r0, r0, r2
   b5a42:	fa01 f304 	lsl.w	r3, r1, r4
   b5a46:	ea40 0003 	orr.w	r0, r0, r3
   b5a4a:	4629      	mov	r1, r5
   b5a4c:	bd30      	pop	{r4, r5, pc}
   b5a4e:	fa21 f004 	lsr.w	r0, r1, r4
   b5a52:	4629      	mov	r1, r5
   b5a54:	bd30      	pop	{r4, r5, pc}
   b5a56:	f094 0f00 	teq	r4, #0
   b5a5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5a5e:	bf06      	itte	eq
   b5a60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b5a64:	3401      	addeq	r4, #1
   b5a66:	3d01      	subne	r5, #1
   b5a68:	e74e      	b.n	b5908 <__adddf3+0x8c>
   b5a6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5a6e:	bf18      	it	ne
   b5a70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5a74:	d029      	beq.n	b5aca <__adddf3+0x24e>
   b5a76:	ea94 0f05 	teq	r4, r5
   b5a7a:	bf08      	it	eq
   b5a7c:	ea90 0f02 	teqeq	r0, r2
   b5a80:	d005      	beq.n	b5a8e <__adddf3+0x212>
   b5a82:	ea54 0c00 	orrs.w	ip, r4, r0
   b5a86:	bf04      	itt	eq
   b5a88:	4619      	moveq	r1, r3
   b5a8a:	4610      	moveq	r0, r2
   b5a8c:	bd30      	pop	{r4, r5, pc}
   b5a8e:	ea91 0f03 	teq	r1, r3
   b5a92:	bf1e      	ittt	ne
   b5a94:	2100      	movne	r1, #0
   b5a96:	2000      	movne	r0, #0
   b5a98:	bd30      	popne	{r4, r5, pc}
   b5a9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b5a9e:	d105      	bne.n	b5aac <__adddf3+0x230>
   b5aa0:	0040      	lsls	r0, r0, #1
   b5aa2:	4149      	adcs	r1, r1
   b5aa4:	bf28      	it	cs
   b5aa6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5aaa:	bd30      	pop	{r4, r5, pc}
   b5aac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5ab0:	bf3c      	itt	cc
   b5ab2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b5ab6:	bd30      	popcc	{r4, r5, pc}
   b5ab8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5abc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5ac0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5ac4:	f04f 0000 	mov.w	r0, #0
   b5ac8:	bd30      	pop	{r4, r5, pc}
   b5aca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5ace:	bf1a      	itte	ne
   b5ad0:	4619      	movne	r1, r3
   b5ad2:	4610      	movne	r0, r2
   b5ad4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5ad8:	bf1c      	itt	ne
   b5ada:	460b      	movne	r3, r1
   b5adc:	4602      	movne	r2, r0
   b5ade:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5ae2:	bf06      	itte	eq
   b5ae4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5ae8:	ea91 0f03 	teqeq	r1, r3
   b5aec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5af0:	bd30      	pop	{r4, r5, pc}
   b5af2:	bf00      	nop

000b5af4 <__aeabi_ui2d>:
   b5af4:	f090 0f00 	teq	r0, #0
   b5af8:	bf04      	itt	eq
   b5afa:	2100      	moveq	r1, #0
   b5afc:	4770      	bxeq	lr
   b5afe:	b530      	push	{r4, r5, lr}
   b5b00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5b04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5b08:	f04f 0500 	mov.w	r5, #0
   b5b0c:	f04f 0100 	mov.w	r1, #0
   b5b10:	e750      	b.n	b59b4 <__adddf3+0x138>
   b5b12:	bf00      	nop

000b5b14 <__aeabi_i2d>:
   b5b14:	f090 0f00 	teq	r0, #0
   b5b18:	bf04      	itt	eq
   b5b1a:	2100      	moveq	r1, #0
   b5b1c:	4770      	bxeq	lr
   b5b1e:	b530      	push	{r4, r5, lr}
   b5b20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5b24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5b28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5b2c:	bf48      	it	mi
   b5b2e:	4240      	negmi	r0, r0
   b5b30:	f04f 0100 	mov.w	r1, #0
   b5b34:	e73e      	b.n	b59b4 <__adddf3+0x138>
   b5b36:	bf00      	nop

000b5b38 <__aeabi_f2d>:
   b5b38:	0042      	lsls	r2, r0, #1
   b5b3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b5b3e:	ea4f 0131 	mov.w	r1, r1, rrx
   b5b42:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b5b46:	bf1f      	itttt	ne
   b5b48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b5b4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b5b50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b5b54:	4770      	bxne	lr
   b5b56:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b5b5a:	bf08      	it	eq
   b5b5c:	4770      	bxeq	lr
   b5b5e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b5b62:	bf04      	itt	eq
   b5b64:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b5b68:	4770      	bxeq	lr
   b5b6a:	b530      	push	{r4, r5, lr}
   b5b6c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b5b70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5b78:	e71c      	b.n	b59b4 <__adddf3+0x138>
   b5b7a:	bf00      	nop

000b5b7c <__aeabi_ul2d>:
   b5b7c:	ea50 0201 	orrs.w	r2, r0, r1
   b5b80:	bf08      	it	eq
   b5b82:	4770      	bxeq	lr
   b5b84:	b530      	push	{r4, r5, lr}
   b5b86:	f04f 0500 	mov.w	r5, #0
   b5b8a:	e00a      	b.n	b5ba2 <__aeabi_l2d+0x16>

000b5b8c <__aeabi_l2d>:
   b5b8c:	ea50 0201 	orrs.w	r2, r0, r1
   b5b90:	bf08      	it	eq
   b5b92:	4770      	bxeq	lr
   b5b94:	b530      	push	{r4, r5, lr}
   b5b96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b5b9a:	d502      	bpl.n	b5ba2 <__aeabi_l2d+0x16>
   b5b9c:	4240      	negs	r0, r0
   b5b9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5ba2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5ba6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5baa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b5bae:	f43f aed8 	beq.w	b5962 <__adddf3+0xe6>
   b5bb2:	f04f 0203 	mov.w	r2, #3
   b5bb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5bba:	bf18      	it	ne
   b5bbc:	3203      	addne	r2, #3
   b5bbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5bc2:	bf18      	it	ne
   b5bc4:	3203      	addne	r2, #3
   b5bc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b5bca:	f1c2 0320 	rsb	r3, r2, #32
   b5bce:	fa00 fc03 	lsl.w	ip, r0, r3
   b5bd2:	fa20 f002 	lsr.w	r0, r0, r2
   b5bd6:	fa01 fe03 	lsl.w	lr, r1, r3
   b5bda:	ea40 000e 	orr.w	r0, r0, lr
   b5bde:	fa21 f102 	lsr.w	r1, r1, r2
   b5be2:	4414      	add	r4, r2
   b5be4:	e6bd      	b.n	b5962 <__adddf3+0xe6>
   b5be6:	bf00      	nop

000b5be8 <__aeabi_dmul>:
   b5be8:	b570      	push	{r4, r5, r6, lr}
   b5bea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5bee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5bf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5bf6:	bf1d      	ittte	ne
   b5bf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5bfc:	ea94 0f0c 	teqne	r4, ip
   b5c00:	ea95 0f0c 	teqne	r5, ip
   b5c04:	f000 f8de 	bleq	b5dc4 <__aeabi_dmul+0x1dc>
   b5c08:	442c      	add	r4, r5
   b5c0a:	ea81 0603 	eor.w	r6, r1, r3
   b5c0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b5c12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b5c16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b5c1a:	bf18      	it	ne
   b5c1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b5c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b5c28:	d038      	beq.n	b5c9c <__aeabi_dmul+0xb4>
   b5c2a:	fba0 ce02 	umull	ip, lr, r0, r2
   b5c2e:	f04f 0500 	mov.w	r5, #0
   b5c32:	fbe1 e502 	umlal	lr, r5, r1, r2
   b5c36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b5c3a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b5c3e:	f04f 0600 	mov.w	r6, #0
   b5c42:	fbe1 5603 	umlal	r5, r6, r1, r3
   b5c46:	f09c 0f00 	teq	ip, #0
   b5c4a:	bf18      	it	ne
   b5c4c:	f04e 0e01 	orrne.w	lr, lr, #1
   b5c50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b5c54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5c58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b5c5c:	d204      	bcs.n	b5c68 <__aeabi_dmul+0x80>
   b5c5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b5c62:	416d      	adcs	r5, r5
   b5c64:	eb46 0606 	adc.w	r6, r6, r6
   b5c68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b5c6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b5c70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b5c74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b5c78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b5c7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5c80:	bf88      	it	hi
   b5c82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5c86:	d81e      	bhi.n	b5cc6 <__aeabi_dmul+0xde>
   b5c88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b5c8c:	bf08      	it	eq
   b5c8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b5c92:	f150 0000 	adcs.w	r0, r0, #0
   b5c96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5c9a:	bd70      	pop	{r4, r5, r6, pc}
   b5c9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b5ca0:	ea46 0101 	orr.w	r1, r6, r1
   b5ca4:	ea40 0002 	orr.w	r0, r0, r2
   b5ca8:	ea81 0103 	eor.w	r1, r1, r3
   b5cac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b5cb0:	bfc2      	ittt	gt
   b5cb2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5cb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5cba:	bd70      	popgt	{r4, r5, r6, pc}
   b5cbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5cc0:	f04f 0e00 	mov.w	lr, #0
   b5cc4:	3c01      	subs	r4, #1
   b5cc6:	f300 80ab 	bgt.w	b5e20 <__aeabi_dmul+0x238>
   b5cca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b5cce:	bfde      	ittt	le
   b5cd0:	2000      	movle	r0, #0
   b5cd2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b5cd6:	bd70      	pople	{r4, r5, r6, pc}
   b5cd8:	f1c4 0400 	rsb	r4, r4, #0
   b5cdc:	3c20      	subs	r4, #32
   b5cde:	da35      	bge.n	b5d4c <__aeabi_dmul+0x164>
   b5ce0:	340c      	adds	r4, #12
   b5ce2:	dc1b      	bgt.n	b5d1c <__aeabi_dmul+0x134>
   b5ce4:	f104 0414 	add.w	r4, r4, #20
   b5ce8:	f1c4 0520 	rsb	r5, r4, #32
   b5cec:	fa00 f305 	lsl.w	r3, r0, r5
   b5cf0:	fa20 f004 	lsr.w	r0, r0, r4
   b5cf4:	fa01 f205 	lsl.w	r2, r1, r5
   b5cf8:	ea40 0002 	orr.w	r0, r0, r2
   b5cfc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b5d00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5d04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5d08:	fa21 f604 	lsr.w	r6, r1, r4
   b5d0c:	eb42 0106 	adc.w	r1, r2, r6
   b5d10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5d14:	bf08      	it	eq
   b5d16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5d1a:	bd70      	pop	{r4, r5, r6, pc}
   b5d1c:	f1c4 040c 	rsb	r4, r4, #12
   b5d20:	f1c4 0520 	rsb	r5, r4, #32
   b5d24:	fa00 f304 	lsl.w	r3, r0, r4
   b5d28:	fa20 f005 	lsr.w	r0, r0, r5
   b5d2c:	fa01 f204 	lsl.w	r2, r1, r4
   b5d30:	ea40 0002 	orr.w	r0, r0, r2
   b5d34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5d38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5d3c:	f141 0100 	adc.w	r1, r1, #0
   b5d40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5d44:	bf08      	it	eq
   b5d46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5d4a:	bd70      	pop	{r4, r5, r6, pc}
   b5d4c:	f1c4 0520 	rsb	r5, r4, #32
   b5d50:	fa00 f205 	lsl.w	r2, r0, r5
   b5d54:	ea4e 0e02 	orr.w	lr, lr, r2
   b5d58:	fa20 f304 	lsr.w	r3, r0, r4
   b5d5c:	fa01 f205 	lsl.w	r2, r1, r5
   b5d60:	ea43 0302 	orr.w	r3, r3, r2
   b5d64:	fa21 f004 	lsr.w	r0, r1, r4
   b5d68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5d6c:	fa21 f204 	lsr.w	r2, r1, r4
   b5d70:	ea20 0002 	bic.w	r0, r0, r2
   b5d74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b5d78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5d7c:	bf08      	it	eq
   b5d7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5d82:	bd70      	pop	{r4, r5, r6, pc}
   b5d84:	f094 0f00 	teq	r4, #0
   b5d88:	d10f      	bne.n	b5daa <__aeabi_dmul+0x1c2>
   b5d8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b5d8e:	0040      	lsls	r0, r0, #1
   b5d90:	eb41 0101 	adc.w	r1, r1, r1
   b5d94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5d98:	bf08      	it	eq
   b5d9a:	3c01      	subeq	r4, #1
   b5d9c:	d0f7      	beq.n	b5d8e <__aeabi_dmul+0x1a6>
   b5d9e:	ea41 0106 	orr.w	r1, r1, r6
   b5da2:	f095 0f00 	teq	r5, #0
   b5da6:	bf18      	it	ne
   b5da8:	4770      	bxne	lr
   b5daa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b5dae:	0052      	lsls	r2, r2, #1
   b5db0:	eb43 0303 	adc.w	r3, r3, r3
   b5db4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b5db8:	bf08      	it	eq
   b5dba:	3d01      	subeq	r5, #1
   b5dbc:	d0f7      	beq.n	b5dae <__aeabi_dmul+0x1c6>
   b5dbe:	ea43 0306 	orr.w	r3, r3, r6
   b5dc2:	4770      	bx	lr
   b5dc4:	ea94 0f0c 	teq	r4, ip
   b5dc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5dcc:	bf18      	it	ne
   b5dce:	ea95 0f0c 	teqne	r5, ip
   b5dd2:	d00c      	beq.n	b5dee <__aeabi_dmul+0x206>
   b5dd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5dd8:	bf18      	it	ne
   b5dda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5dde:	d1d1      	bne.n	b5d84 <__aeabi_dmul+0x19c>
   b5de0:	ea81 0103 	eor.w	r1, r1, r3
   b5de4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5de8:	f04f 0000 	mov.w	r0, #0
   b5dec:	bd70      	pop	{r4, r5, r6, pc}
   b5dee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5df2:	bf06      	itte	eq
   b5df4:	4610      	moveq	r0, r2
   b5df6:	4619      	moveq	r1, r3
   b5df8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5dfc:	d019      	beq.n	b5e32 <__aeabi_dmul+0x24a>
   b5dfe:	ea94 0f0c 	teq	r4, ip
   b5e02:	d102      	bne.n	b5e0a <__aeabi_dmul+0x222>
   b5e04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b5e08:	d113      	bne.n	b5e32 <__aeabi_dmul+0x24a>
   b5e0a:	ea95 0f0c 	teq	r5, ip
   b5e0e:	d105      	bne.n	b5e1c <__aeabi_dmul+0x234>
   b5e10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b5e14:	bf1c      	itt	ne
   b5e16:	4610      	movne	r0, r2
   b5e18:	4619      	movne	r1, r3
   b5e1a:	d10a      	bne.n	b5e32 <__aeabi_dmul+0x24a>
   b5e1c:	ea81 0103 	eor.w	r1, r1, r3
   b5e20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5e24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5e28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5e2c:	f04f 0000 	mov.w	r0, #0
   b5e30:	bd70      	pop	{r4, r5, r6, pc}
   b5e32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5e36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b5e3a:	bd70      	pop	{r4, r5, r6, pc}

000b5e3c <__aeabi_ddiv>:
   b5e3c:	b570      	push	{r4, r5, r6, lr}
   b5e3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5e42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5e46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5e4a:	bf1d      	ittte	ne
   b5e4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5e50:	ea94 0f0c 	teqne	r4, ip
   b5e54:	ea95 0f0c 	teqne	r5, ip
   b5e58:	f000 f8a7 	bleq	b5faa <__aeabi_ddiv+0x16e>
   b5e5c:	eba4 0405 	sub.w	r4, r4, r5
   b5e60:	ea81 0e03 	eor.w	lr, r1, r3
   b5e64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5e68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5e6c:	f000 8088 	beq.w	b5f80 <__aeabi_ddiv+0x144>
   b5e70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5e74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b5e78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b5e7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b5e80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b5e84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b5e88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b5e8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b5e90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b5e94:	429d      	cmp	r5, r3
   b5e96:	bf08      	it	eq
   b5e98:	4296      	cmpeq	r6, r2
   b5e9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b5e9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b5ea2:	d202      	bcs.n	b5eaa <__aeabi_ddiv+0x6e>
   b5ea4:	085b      	lsrs	r3, r3, #1
   b5ea6:	ea4f 0232 	mov.w	r2, r2, rrx
   b5eaa:	1ab6      	subs	r6, r6, r2
   b5eac:	eb65 0503 	sbc.w	r5, r5, r3
   b5eb0:	085b      	lsrs	r3, r3, #1
   b5eb2:	ea4f 0232 	mov.w	r2, r2, rrx
   b5eb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b5eba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b5ebe:	ebb6 0e02 	subs.w	lr, r6, r2
   b5ec2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5ec6:	bf22      	ittt	cs
   b5ec8:	1ab6      	subcs	r6, r6, r2
   b5eca:	4675      	movcs	r5, lr
   b5ecc:	ea40 000c 	orrcs.w	r0, r0, ip
   b5ed0:	085b      	lsrs	r3, r3, #1
   b5ed2:	ea4f 0232 	mov.w	r2, r2, rrx
   b5ed6:	ebb6 0e02 	subs.w	lr, r6, r2
   b5eda:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5ede:	bf22      	ittt	cs
   b5ee0:	1ab6      	subcs	r6, r6, r2
   b5ee2:	4675      	movcs	r5, lr
   b5ee4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b5ee8:	085b      	lsrs	r3, r3, #1
   b5eea:	ea4f 0232 	mov.w	r2, r2, rrx
   b5eee:	ebb6 0e02 	subs.w	lr, r6, r2
   b5ef2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5ef6:	bf22      	ittt	cs
   b5ef8:	1ab6      	subcs	r6, r6, r2
   b5efa:	4675      	movcs	r5, lr
   b5efc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b5f00:	085b      	lsrs	r3, r3, #1
   b5f02:	ea4f 0232 	mov.w	r2, r2, rrx
   b5f06:	ebb6 0e02 	subs.w	lr, r6, r2
   b5f0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5f0e:	bf22      	ittt	cs
   b5f10:	1ab6      	subcs	r6, r6, r2
   b5f12:	4675      	movcs	r5, lr
   b5f14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b5f18:	ea55 0e06 	orrs.w	lr, r5, r6
   b5f1c:	d018      	beq.n	b5f50 <__aeabi_ddiv+0x114>
   b5f1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b5f22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b5f26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b5f2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b5f2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b5f32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b5f36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b5f3a:	d1c0      	bne.n	b5ebe <__aeabi_ddiv+0x82>
   b5f3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5f40:	d10b      	bne.n	b5f5a <__aeabi_ddiv+0x11e>
   b5f42:	ea41 0100 	orr.w	r1, r1, r0
   b5f46:	f04f 0000 	mov.w	r0, #0
   b5f4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b5f4e:	e7b6      	b.n	b5ebe <__aeabi_ddiv+0x82>
   b5f50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5f54:	bf04      	itt	eq
   b5f56:	4301      	orreq	r1, r0
   b5f58:	2000      	moveq	r0, #0
   b5f5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5f5e:	bf88      	it	hi
   b5f60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5f64:	f63f aeaf 	bhi.w	b5cc6 <__aeabi_dmul+0xde>
   b5f68:	ebb5 0c03 	subs.w	ip, r5, r3
   b5f6c:	bf04      	itt	eq
   b5f6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b5f72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5f76:	f150 0000 	adcs.w	r0, r0, #0
   b5f7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5f7e:	bd70      	pop	{r4, r5, r6, pc}
   b5f80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b5f84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b5f88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b5f8c:	bfc2      	ittt	gt
   b5f8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5f92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5f96:	bd70      	popgt	{r4, r5, r6, pc}
   b5f98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5f9c:	f04f 0e00 	mov.w	lr, #0
   b5fa0:	3c01      	subs	r4, #1
   b5fa2:	e690      	b.n	b5cc6 <__aeabi_dmul+0xde>
   b5fa4:	ea45 0e06 	orr.w	lr, r5, r6
   b5fa8:	e68d      	b.n	b5cc6 <__aeabi_dmul+0xde>
   b5faa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5fae:	ea94 0f0c 	teq	r4, ip
   b5fb2:	bf08      	it	eq
   b5fb4:	ea95 0f0c 	teqeq	r5, ip
   b5fb8:	f43f af3b 	beq.w	b5e32 <__aeabi_dmul+0x24a>
   b5fbc:	ea94 0f0c 	teq	r4, ip
   b5fc0:	d10a      	bne.n	b5fd8 <__aeabi_ddiv+0x19c>
   b5fc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5fc6:	f47f af34 	bne.w	b5e32 <__aeabi_dmul+0x24a>
   b5fca:	ea95 0f0c 	teq	r5, ip
   b5fce:	f47f af25 	bne.w	b5e1c <__aeabi_dmul+0x234>
   b5fd2:	4610      	mov	r0, r2
   b5fd4:	4619      	mov	r1, r3
   b5fd6:	e72c      	b.n	b5e32 <__aeabi_dmul+0x24a>
   b5fd8:	ea95 0f0c 	teq	r5, ip
   b5fdc:	d106      	bne.n	b5fec <__aeabi_ddiv+0x1b0>
   b5fde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5fe2:	f43f aefd 	beq.w	b5de0 <__aeabi_dmul+0x1f8>
   b5fe6:	4610      	mov	r0, r2
   b5fe8:	4619      	mov	r1, r3
   b5fea:	e722      	b.n	b5e32 <__aeabi_dmul+0x24a>
   b5fec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5ff0:	bf18      	it	ne
   b5ff2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5ff6:	f47f aec5 	bne.w	b5d84 <__aeabi_dmul+0x19c>
   b5ffa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b5ffe:	f47f af0d 	bne.w	b5e1c <__aeabi_dmul+0x234>
   b6002:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6006:	f47f aeeb 	bne.w	b5de0 <__aeabi_dmul+0x1f8>
   b600a:	e712      	b.n	b5e32 <__aeabi_dmul+0x24a>

000b600c <__aeabi_d2uiz>:
   b600c:	004a      	lsls	r2, r1, #1
   b600e:	d211      	bcs.n	b6034 <__aeabi_d2uiz+0x28>
   b6010:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6014:	d211      	bcs.n	b603a <__aeabi_d2uiz+0x2e>
   b6016:	d50d      	bpl.n	b6034 <__aeabi_d2uiz+0x28>
   b6018:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b601c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6020:	d40e      	bmi.n	b6040 <__aeabi_d2uiz+0x34>
   b6022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b602a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b602e:	fa23 f002 	lsr.w	r0, r3, r2
   b6032:	4770      	bx	lr
   b6034:	f04f 0000 	mov.w	r0, #0
   b6038:	4770      	bx	lr
   b603a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b603e:	d102      	bne.n	b6046 <__aeabi_d2uiz+0x3a>
   b6040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6044:	4770      	bx	lr
   b6046:	f04f 0000 	mov.w	r0, #0
   b604a:	4770      	bx	lr

000b604c <atexit>:
   b604c:	2300      	movs	r3, #0
   b604e:	4601      	mov	r1, r0
   b6050:	461a      	mov	r2, r3
   b6052:	4618      	mov	r0, r3
   b6054:	f000 b856 	b.w	b6104 <__register_exitproc>

000b6058 <memcpy>:
   b6058:	440a      	add	r2, r1
   b605a:	4291      	cmp	r1, r2
   b605c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6060:	d100      	bne.n	b6064 <memcpy+0xc>
   b6062:	4770      	bx	lr
   b6064:	b510      	push	{r4, lr}
   b6066:	f811 4b01 	ldrb.w	r4, [r1], #1
   b606a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b606e:	4291      	cmp	r1, r2
   b6070:	d1f9      	bne.n	b6066 <memcpy+0xe>
   b6072:	bd10      	pop	{r4, pc}

000b6074 <memset>:
   b6074:	4402      	add	r2, r0
   b6076:	4603      	mov	r3, r0
   b6078:	4293      	cmp	r3, r2
   b607a:	d100      	bne.n	b607e <memset+0xa>
   b607c:	4770      	bx	lr
   b607e:	f803 1b01 	strb.w	r1, [r3], #1
   b6082:	e7f9      	b.n	b6078 <memset+0x4>

000b6084 <srand>:
   b6084:	b538      	push	{r3, r4, r5, lr}
   b6086:	4b10      	ldr	r3, [pc, #64]	; (b60c8 <srand+0x44>)
   b6088:	681d      	ldr	r5, [r3, #0]
   b608a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b608c:	4604      	mov	r4, r0
   b608e:	b9b3      	cbnz	r3, b60be <srand+0x3a>
   b6090:	2018      	movs	r0, #24
   b6092:	f7fe fde5 	bl	b4c60 <malloc>
   b6096:	4602      	mov	r2, r0
   b6098:	63a8      	str	r0, [r5, #56]	; 0x38
   b609a:	b920      	cbnz	r0, b60a6 <srand+0x22>
   b609c:	4b0b      	ldr	r3, [pc, #44]	; (b60cc <srand+0x48>)
   b609e:	480c      	ldr	r0, [pc, #48]	; (b60d0 <srand+0x4c>)
   b60a0:	2142      	movs	r1, #66	; 0x42
   b60a2:	f7fe fdf5 	bl	b4c90 <__assert_func>
   b60a6:	490b      	ldr	r1, [pc, #44]	; (b60d4 <srand+0x50>)
   b60a8:	4b0b      	ldr	r3, [pc, #44]	; (b60d8 <srand+0x54>)
   b60aa:	e9c0 1300 	strd	r1, r3, [r0]
   b60ae:	4b0b      	ldr	r3, [pc, #44]	; (b60dc <srand+0x58>)
   b60b0:	6083      	str	r3, [r0, #8]
   b60b2:	230b      	movs	r3, #11
   b60b4:	8183      	strh	r3, [r0, #12]
   b60b6:	2100      	movs	r1, #0
   b60b8:	2001      	movs	r0, #1
   b60ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b60be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b60c0:	2200      	movs	r2, #0
   b60c2:	611c      	str	r4, [r3, #16]
   b60c4:	615a      	str	r2, [r3, #20]
   b60c6:	bd38      	pop	{r3, r4, r5, pc}
   b60c8:	2003e5a0 	.word	0x2003e5a0
   b60cc:	000b6569 	.word	0x000b6569
   b60d0:	000b6580 	.word	0x000b6580
   b60d4:	abcd330e 	.word	0xabcd330e
   b60d8:	e66d1234 	.word	0xe66d1234
   b60dc:	0005deec 	.word	0x0005deec

000b60e0 <strcmp>:
   b60e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b60e4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b60e8:	2a01      	cmp	r2, #1
   b60ea:	bf28      	it	cs
   b60ec:	429a      	cmpcs	r2, r3
   b60ee:	d0f7      	beq.n	b60e0 <strcmp>
   b60f0:	1ad0      	subs	r0, r2, r3
   b60f2:	4770      	bx	lr

000b60f4 <strlen>:
   b60f4:	4603      	mov	r3, r0
   b60f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b60fa:	2a00      	cmp	r2, #0
   b60fc:	d1fb      	bne.n	b60f6 <strlen+0x2>
   b60fe:	1a18      	subs	r0, r3, r0
   b6100:	3801      	subs	r0, #1
   b6102:	4770      	bx	lr

000b6104 <__register_exitproc>:
   b6104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6108:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b61c4 <__register_exitproc+0xc0>
   b610c:	4606      	mov	r6, r0
   b610e:	f8d8 0000 	ldr.w	r0, [r8]
   b6112:	461f      	mov	r7, r3
   b6114:	460d      	mov	r5, r1
   b6116:	4691      	mov	r9, r2
   b6118:	f000 f856 	bl	b61c8 <__retarget_lock_acquire_recursive>
   b611c:	4b25      	ldr	r3, [pc, #148]	; (b61b4 <__register_exitproc+0xb0>)
   b611e:	681c      	ldr	r4, [r3, #0]
   b6120:	b934      	cbnz	r4, b6130 <__register_exitproc+0x2c>
   b6122:	4c25      	ldr	r4, [pc, #148]	; (b61b8 <__register_exitproc+0xb4>)
   b6124:	601c      	str	r4, [r3, #0]
   b6126:	4b25      	ldr	r3, [pc, #148]	; (b61bc <__register_exitproc+0xb8>)
   b6128:	b113      	cbz	r3, b6130 <__register_exitproc+0x2c>
   b612a:	681b      	ldr	r3, [r3, #0]
   b612c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6130:	6863      	ldr	r3, [r4, #4]
   b6132:	2b1f      	cmp	r3, #31
   b6134:	dd07      	ble.n	b6146 <__register_exitproc+0x42>
   b6136:	f8d8 0000 	ldr.w	r0, [r8]
   b613a:	f000 f847 	bl	b61cc <__retarget_lock_release_recursive>
   b613e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6146:	b34e      	cbz	r6, b619c <__register_exitproc+0x98>
   b6148:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b614c:	b988      	cbnz	r0, b6172 <__register_exitproc+0x6e>
   b614e:	4b1c      	ldr	r3, [pc, #112]	; (b61c0 <__register_exitproc+0xbc>)
   b6150:	b923      	cbnz	r3, b615c <__register_exitproc+0x58>
   b6152:	f8d8 0000 	ldr.w	r0, [r8]
   b6156:	f000 f838 	bl	b61ca <__retarget_lock_release>
   b615a:	e7f0      	b.n	b613e <__register_exitproc+0x3a>
   b615c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6160:	f7fe fd7e 	bl	b4c60 <malloc>
   b6164:	2800      	cmp	r0, #0
   b6166:	d0f4      	beq.n	b6152 <__register_exitproc+0x4e>
   b6168:	2300      	movs	r3, #0
   b616a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b616e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6172:	6863      	ldr	r3, [r4, #4]
   b6174:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6178:	2201      	movs	r2, #1
   b617a:	409a      	lsls	r2, r3
   b617c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6180:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6184:	4313      	orrs	r3, r2
   b6186:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b618a:	2e02      	cmp	r6, #2
   b618c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6190:	bf02      	ittt	eq
   b6192:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6196:	4313      	orreq	r3, r2
   b6198:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b619c:	6863      	ldr	r3, [r4, #4]
   b619e:	f8d8 0000 	ldr.w	r0, [r8]
   b61a2:	1c5a      	adds	r2, r3, #1
   b61a4:	3302      	adds	r3, #2
   b61a6:	6062      	str	r2, [r4, #4]
   b61a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b61ac:	f000 f80e 	bl	b61cc <__retarget_lock_release_recursive>
   b61b0:	2000      	movs	r0, #0
   b61b2:	e7c6      	b.n	b6142 <__register_exitproc+0x3e>
   b61b4:	2003e7e8 	.word	0x2003e7e8
   b61b8:	2003e75c 	.word	0x2003e75c
   b61bc:	00000000 	.word	0x00000000
   b61c0:	000b4c61 	.word	0x000b4c61
   b61c4:	2003e604 	.word	0x2003e604

000b61c8 <__retarget_lock_acquire_recursive>:
   b61c8:	4770      	bx	lr

000b61ca <__retarget_lock_release>:
   b61ca:	4770      	bx	lr

000b61cc <__retarget_lock_release_recursive>:
   b61cc:	4770      	bx	lr

000b61ce <link_code_end>:
	...

000b61d0 <dynalib_user>:
   b61d0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b61e0:	0000 0000 7274 6575 5700 7461 7265 6e69     ....true.Waterin
   b61f0:	2067 7973 7473 6d65 7420 7275 656e 2064     g system turned 
   b6200:	6e6f 0021 6166 736c 0065 6157 6574 6972     on!.false.Wateri
   b6210:	676e 7320 7379 6574 206d 7574 6e72 6465     ng system turned
   b6220:	6f20 6666 0021 6e49 6176 696c 2064 6f63      off!.Invalid co
   b6230:	6d6d 6e61 2064 6f66 2072 7566 636e 6974     mmand for functi
   b6240:	6e6f 7320 7465 6157 6574 6972 676e 0021     on setWatering!.
   b6250:	6557 636c 6d6f 2065 6f74 7420 6568 5a20     Welcome to the Z
   b6260:	6661 7265 5320 616d 7472 4720 6572 6e65     afer Smart Green
   b6270:	6f68 7375 2065 7250 6a6f 6365 2174 4320     house Project! C
   b6280:	756f 7472 7365 2079 666f 4920 2042 6c43     ourtesy of IB Cl
   b6290:	7361 2073 666f 3220 2033 293a 4200 454d     ass of 23 :).BME
   b62a0:	3832 2030 6e69 7469 6169 696c 617a 6974     280 initializati
   b62b0:	6e6f 6620 6961 656c 2164 5720 6c69 206c     on failed! Will 
   b62c0:	6572 7473 7261 2074 6e69 3320 2030 6573     restart in 30 se
   b62d0:	6f63 646e 0073 4d42 3245 3038 6920 696e     conds.BME280 ini
   b62e0:	6974 6c61 7a69 7461 6f69 206e 7573 6363     tialization succ
   b62f0:	7365 6673 6c75 0021 4e45 3153 3036 6920     essful!.ENS160 i
   b6300:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   b6310:	6c69 6465 2021 6957 6c6c 7220 7365 6174     iled! Will resta
   b6320:	7472 6920 206e 3033 7320 6365 6e6f 7364     rt in 30 seconds
   b6330:	4500 534e 3631 2030 6e69 7469 6169 696c     .ENS160 initiali
   b6340:	617a 6974 6e6f 7320 6375 6563 7373 7566     zation successfu
   b6350:	216c 7300 696f 5f6c 5f31 6872 7300 696f     l!.soil_1_rh.soi
   b6360:	5f6c 5f32 6872 7300 696f 5f6c 5f33 6872     l_2_rh.soil_3_rh
   b6370:	7300 696f 5f6c 5f34 6872 7300 696f 5f6c     .soil_4_rh.soil_
   b6380:	5f35 6872 7300 7465 6157 6574 6972 676e     5_rh.setWatering
   b6390:	6900 5773 7461 7265 6e69 0067 6574 706d     .isWatering.temp
   b63a0:	7265 7461 7275 0065 7568 696d 6964 7974     erature.humidity
   b63b0:	6200 7261 6d6f 7465 6972 5f63 7270 7365     .barometric_pres
   b63c0:	7573 6572 6500 4f43 0032 5654 434f 4100     sure.eCO2.TVOC.A
   b63d0:	4951 0000                                   QI..

000b63d4 <_ZTV18DFRobot_BME280_IIC>:
	...
   b63dc:	4355 000b 439b 000b                         UC...C..

000b63e4 <_ZTV18DFRobot_ENS160_I2C>:
	...
   b63ec:	4807 000b 46fd 000b 4735 000b               .H...F..5G..

000b63f8 <_ZTVN5spark13EthernetClassE>:
	...
   b6400:	4d75 000b 4d6b 000b 4d61 000b 4d57 000b     uM..kM..aM..WM..
   b6410:	4d4b 000b 4d3f 000b 4fcd 000b 4fd5 000b     KM..?M...O...O..
   b6420:	4d33 000b 4d2b 000b 4d21 000b 4d17 000b     3M..+M..!M...M..
   b6430:	5005 000b                                   .P..

000b6434 <_ZTV7TwoWire>:
	...
   b643c:	4d95 000b 4ddf 000b 4db7 000b 4d97 000b     .M...M...M...M..
   b644c:	4dbf 000b 4dc7 000b 4dcf 000b 4dd7 000b     .M...M...M...M..

000b645c <_ZTV9IPAddress>:
	...
   b6464:	4e9b 000b 4e8b 000b 4e8d 000b 7061 0070     .N...N...N..app.

000b6474 <_ZTVN5spark12NetworkClassE>:
	...
   b647c:	4f8d 000b 4f97 000b 4fa1 000b 4fab 000b     .O...O...O...O..
   b648c:	4fb5 000b 4fc1 000b 4fcd 000b 4fd5 000b     .O...O...O...O..
   b649c:	4fdd 000b 4fe9 000b 4ff1 000b 4ffb 000b     .O...O...O...O..
   b64ac:	5005 000b 5925 252d 2d6d 6425 2554 3a48     .P..%Y-%m-%dT%H:
   b64bc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b64cc <_ZTV11USARTSerial>:
	...
   b64d4:	5345 000b 53b1 000b 5389 000b 50f1 000b     ES...S...S...P..
   b64e4:	5359 000b 5375 000b 5367 000b 5383 000b     YS..uS..gS...S..
   b64f4:	5347 000b 534b 000b                         GS..KS..

000b64fc <_ZTV9USBSerial>:
	...
   b6504:	53ef 000b 5457 000b 542d 000b 50f1 000b     .S..WT..-T...P..
   b6514:	541f 000b 53f1 000b 5401 000b 5451 000b     .T...S...T..QT..
   b6524:	5411 000b 53e9 000b                         .T...S..

000b652c <_ZTVN5spark9WiFiClassE>:
	...
   b6534:	554f 000b 5545 000b 553b 000b 54f1 000b     OU..EU..;U...T..
   b6544:	552f 000b 5523 000b 4fcd 000b 4fd5 000b     /U..#U...O...O..
   b6554:	5517 000b 550f 000b 5505 000b 54fb 000b     .U...U...U...T..
   b6564:	5005 000b                                   .P..

000b6568 <_ZSt7nothrow>:
   b6568:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6578:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b6588:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6598:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b65a8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b65b8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b65c8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b65d9 <link_const_variable_data_end>:
   b65d9:	00          	.byte	0x00
	...

000b65dc <link_constructors_location>:
   b65dc:	000b4185 	.word	0x000b4185
   b65e0:	000b4cb9 	.word	0x000b4cb9
   b65e4:	000b4d81 	.word	0x000b4d81
   b65e8:	000b4f7d 	.word	0x000b4f7d
   b65ec:	000b50dd 	.word	0x000b50dd
   b65f0:	000b51b1 	.word	0x000b51b1
   b65f4:	000b530d 	.word	0x000b530d
   b65f8:	000b5331 	.word	0x000b5331
   b65fc:	000b5559 	.word	0x000b5559
